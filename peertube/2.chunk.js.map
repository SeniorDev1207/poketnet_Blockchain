{"version":3,"sources":["webpack:///./src/assets/player/webtorrent/peertube-chunk-store.ts","webpack:///./src/assets/player/webtorrent/video-renderer.ts","webpack:///./src/assets/player/webtorrent/webtorrent-plugin.ts"],"names":["ChunkDatabase","dbname","super","this","version","stores","chunks","ExpirationDatabase","databases","PeertubeChunkStore","chunkLength","opts","pendingPut","memoryChunks","databaseName","torrent","infoHash","setMaxListeners","Number","Error","length","Infinity","lastChunkLength","lastChunkIndex","Math","ceil","db","expirationDB","runCleaner","index","buf","cb","isLastChunk","nextTick","push","id","putBulkTimeout","setTimeout","processing","undefined","transaction","bulkPut","map","p","err","console","log","forEach","BUFFERING_PUT_MS","get","memoryChunk","process","result","Buffer","alloc","offset","slice","catch","error","destroy","clearTimeout","cleanerInterval","clearInterval","close","dropDatabase","checkExpiration","setInterval","CLEANER_INTERVAL_MS","databasesToDeleteInfo","put","name","expiration","Date","getTime","CLEANER_EXPIRATION_MS","now","where","below","toArray","databaseToDeleteInfo","dbToDelete","delete","val","MediaElementWrapper","videostream","VIDEOSTREAM_EXTS","renderVideo","file","elem","callback","createReadStream","validateFile","extension","toLowerCase","preparedElem","renderer","currentTime","indexOf","prepareElem","addEventListener","onError","removeEventListener","onLoadStart","useMediaSource","useVP9","codecs","ext","getCodec","fallbackToMediaSource","wrapper","writable","createWriteStream","pipe","autoplay","play","renderMedia","CacheChunkStore","Plugin","getPlugin","player","options","startTime","CONSTANTS","INFO_SCHEDULER","AUTO_QUALITY_SCHEDULER","AUTO_QUALITY_THRESHOLD_PERCENT","AUTO_QUALITY_OBSERVATION_TIME","AUTO_QUALITY_HIGHER_RESOLUTION_DELAY","BANDWIDTH_AVERAGE_NUMBER_OF_VALUES","webtorrent","tracker","rtcConfig","dht","destroyingFakeRenderer","autoResolution","autoResolutionPossible","isAutoResolutionObservation","playerRefusedP2P","downloadSpeeds","videoFiles","videoDuration","savePlayerSrcFunction","src","playerElement","ready","playerOptions","options_","volume","muted","duration","initializePlayer","runTorrentInfoScheduler","one","runAutoQualitySchedulerTimer","runAutoQualityScheduler","addTorrentDelay","qualityObservationTimer","torrentInfoInterval","autoQualityInterval","flushVideoFile","currentVideoFile","destroyFakeRenderer","resolution","videoFile","done","savedAverageBandwidth","getAppropriateFile","pickAverageVideoFile","magnetUri","disableErrorDisplay","oldPlaybackRate","playbackRate","previousVideoFile","fallbackToHttp","addTorrent","changeQuality","trigger","auto","resolutionId","delay","paused","bigPlayButton","hide","addClass","posterImage","show","removeClass","newVideoFile","find","f","updateVideoFile","forcePlay","seek","destroyRenderer","remove","getCurrentResolutionId","forbid","possible","magnetOrTorrentUrl","oldTorrent","add","store","storeOpts","max","stopTorrent","renderFileInFakeElement","files","controls","tryToPlay","pause","on","message","handleError","warn","playPromise","then","time","handleTechSeeked_","averageDownloadSpeed","filter","progress","ended","getAndSaveActualDownloadSpeed","playerHeight","offsetHeight","maxResolution","i","filteredFiles","fileBitrate","size","threshold","start","lastDownloadSpeeds","sum","reduce","a","b","averageBandwidth","round","buildQualities","oldPlay","bind","changeResolution","changeResolutionDelay","isPlayerWaiting","label","updateResolution","hasClass","downloadSpeed","source","http","uploadSpeed","downloaded","uploaded","p2p","numPeers","disableAutoResolution","enableErrorDisplay","httpUrl","fileUrl","floor","removePeer","fakeVideoElem","document","createElement","fakeRenderer","qualityLevelsPayload","representation","buildQualityLabel","height","_enabled","qualityLevels","addQualityLevel","selected","payload","qualitySwitchCallback","d","qualityData","video","tech","fps","enableAutoResolution","selectedIndex_","selectedIndex","registerPlugin"],"mappings":"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","file":"2.chunk.js","sourcesContent":["// From https://github.com/MinEduTDF/idb-chunk-store\n// We use temporary IndexDB (all data are removed on destroy) to avoid RAM issues\n// Thanks @santiagogil and @Feross\n\nimport { EventEmitter } from 'events'\nimport Dexie from 'dexie'\n\nclass ChunkDatabase extends Dexie {\n  chunks: Dexie.Table<{ id: number, buf: Buffer }, number>\n\n  constructor (dbname: string) {\n    super(dbname)\n\n    this.version(1).stores({\n      chunks: 'id'\n    })\n  }\n}\n\nclass ExpirationDatabase extends Dexie {\n  databases: Dexie.Table<{ name: string, expiration: number }, number>\n\n  constructor () {\n    super('webtorrent-expiration')\n\n    this.version(1).stores({\n      databases: 'name,expiration'\n    })\n  }\n}\n\nexport class PeertubeChunkStore extends EventEmitter {\n  private static readonly BUFFERING_PUT_MS = 1000\n  private static readonly CLEANER_INTERVAL_MS = 1000 * 60 // 1 minute\n  private static readonly CLEANER_EXPIRATION_MS = 1000 * 60 * 5 // 5 minutes\n\n  chunkLength: number\n\n  private pendingPut: { id: number, buf: Buffer, cb: Function }[] = []\n  // If the store is full\n  private memoryChunks: { [ id: number ]: Buffer | true } = {}\n  private databaseName: string\n  private putBulkTimeout: any\n  private cleanerInterval: any\n  private db: ChunkDatabase\n  private expirationDB: ExpirationDatabase\n  private readonly length: number\n  private readonly lastChunkLength: number\n  private readonly lastChunkIndex: number\n\n  constructor (chunkLength: number, opts: any) {\n    super()\n\n    this.databaseName = 'webtorrent-chunks-'\n\n    if (!opts) opts = {}\n    if (opts.torrent && opts.torrent.infoHash) this.databaseName += opts.torrent.infoHash\n    else this.databaseName += '-default'\n\n    this.setMaxListeners(100)\n\n    this.chunkLength = Number(chunkLength)\n    if (!this.chunkLength) throw new Error('First argument must be a chunk length')\n\n    this.length = Number(opts.length) || Infinity\n\n    if (this.length !== Infinity) {\n      this.lastChunkLength = (this.length % this.chunkLength) || this.chunkLength\n      this.lastChunkIndex = Math.ceil(this.length / this.chunkLength) - 1\n    }\n\n    this.db = new ChunkDatabase(this.databaseName)\n    // Track databases that expired\n    this.expirationDB = new ExpirationDatabase()\n\n    this.runCleaner()\n  }\n\n  put (index: number, buf: Buffer, cb: (err?: Error) => void) {\n    const isLastChunk = (index === this.lastChunkIndex)\n    if (isLastChunk && buf.length !== this.lastChunkLength) {\n      return this.nextTick(cb, new Error('Last chunk length must be ' + this.lastChunkLength))\n    }\n    if (!isLastChunk && buf.length !== this.chunkLength) {\n      return this.nextTick(cb, new Error('Chunk length must be ' + this.chunkLength))\n    }\n\n    // Specify we have this chunk\n    this.memoryChunks[index] = true\n\n    // Add it to the pending put\n    this.pendingPut.push({ id: index, buf, cb })\n    // If it's already planned, return\n    if (this.putBulkTimeout) return\n\n    // Plan a future bulk insert\n    this.putBulkTimeout = setTimeout(async () => {\n      const processing = this.pendingPut\n      this.pendingPut = []\n      this.putBulkTimeout = undefined\n\n      try {\n        await this.db.transaction('rw', this.db.chunks, () => {\n          return this.db.chunks.bulkPut(processing.map(p => ({ id: p.id, buf: p.buf })))\n        })\n      } catch (err) {\n        console.log('Cannot bulk insert chunks. Store them in memory.', { err })\n\n        processing.forEach(p => this.memoryChunks[ p.id ] = p.buf)\n      } finally {\n        processing.forEach(p => p.cb())\n      }\n    }, PeertubeChunkStore.BUFFERING_PUT_MS)\n  }\n\n  get (index: number, opts: any, cb: (err?: Error, buf?: Buffer) => void): void {\n    if (typeof opts === 'function') return this.get(index, null, opts)\n\n    // IndexDB could be slow, use our memory index first\n    const memoryChunk = this.memoryChunks[index]\n    if (memoryChunk === undefined) {\n      const err = new Error('Chunk not found') as any\n      err['notFound'] = true\n\n      return process.nextTick(() => cb(err))\n    }\n\n    // Chunk in memory\n    if (memoryChunk !== true) return cb(null, memoryChunk)\n\n    // Chunk in store\n    this.db.transaction('r', this.db.chunks, async () => {\n      const result = await this.db.chunks.get({ id: index })\n      if (result === undefined) return cb(null, Buffer.alloc(0))\n\n      const buf = result.buf\n      if (!opts) return this.nextTick(cb, null, buf)\n\n      const offset = opts.offset || 0\n      const len = opts.length || (buf.length - offset)\n      return cb(null, buf.slice(offset, len + offset))\n    })\n    .catch(err => {\n      console.error(err)\n      return cb(err)\n    })\n  }\n\n  close (cb: (err?: Error) => void) {\n    return this.destroy(cb)\n  }\n\n  async destroy (cb: (err?: Error) => void) {\n    try {\n      if (this.pendingPut) {\n        clearTimeout(this.putBulkTimeout)\n        this.pendingPut = null\n      }\n      if (this.cleanerInterval) {\n        clearInterval(this.cleanerInterval)\n        this.cleanerInterval = null\n      }\n\n      if (this.db) {\n        this.db.close()\n\n        await this.dropDatabase(this.databaseName)\n      }\n\n      if (this.expirationDB) {\n        this.expirationDB.close()\n        this.expirationDB = null\n      }\n\n      return cb()\n    } catch (err) {\n      console.error('Cannot destroy peertube chunk store.', err)\n      return cb(err)\n    }\n  }\n\n  private runCleaner () {\n    this.checkExpiration()\n\n    this.cleanerInterval = setInterval(async () => {\n      this.checkExpiration()\n    }, PeertubeChunkStore.CLEANER_INTERVAL_MS)\n  }\n\n  private async checkExpiration () {\n    let databasesToDeleteInfo: { name: string }[] = []\n\n    try {\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, async () => {\n        // Update our database expiration since we are alive\n        await this.expirationDB.databases.put({\n          name: this.databaseName,\n          expiration: new Date().getTime() + PeertubeChunkStore.CLEANER_EXPIRATION_MS\n        })\n\n        const now = new Date().getTime()\n        databasesToDeleteInfo = await this.expirationDB.databases.where('expiration').below(now).toArray()\n      })\n    } catch (err) {\n      console.error('Cannot update expiration of fetch expired databases.', err)\n    }\n\n    for (const databaseToDeleteInfo of databasesToDeleteInfo) {\n      await this.dropDatabase(databaseToDeleteInfo.name)\n    }\n  }\n\n  private async dropDatabase (databaseName: string) {\n    const dbToDelete = new ChunkDatabase(databaseName)\n    console.log('Destroying IndexDB database %s.', databaseName)\n\n    try {\n      await dbToDelete.delete()\n\n      await this.expirationDB.transaction('rw', this.expirationDB.databases, () => {\n        return this.expirationDB.databases.where({ name: databaseName }).delete()\n      })\n    } catch (err) {\n      console.error('Cannot delete %s.', databaseName, err)\n    }\n  }\n\n  private nextTick <T> (cb: (err?: Error, val?: T) => void, err: Error, val?: T) {\n    process.nextTick(() => cb(err, val), undefined)\n  }\n}\n","// Thanks: https://github.com/feross/render-media\n// TODO: use render-media once https://github.com/feross/render-media/issues/32 is fixed\n\nconst MediaElementWrapper = require('mediasource')\nimport { extname } from 'path'\nconst videostream = require('videostream')\n\nconst VIDEOSTREAM_EXTS = [\n  '.m4a',\n  '.m4v',\n  '.mp4'\n]\n\ntype RenderMediaOptions = {\n  controls: boolean\n  autoplay: boolean\n}\n\nfunction renderVideo (\n  file: any,\n  elem: HTMLVideoElement,\n  opts: RenderMediaOptions,\n  callback: (err: Error, renderer: any) => void\n) {\n  validateFile(file)\n\n  return renderMedia(file, elem, opts, callback)\n}\n\nfunction renderMedia (file: any, elem: HTMLVideoElement, opts: RenderMediaOptions, callback: (err: Error, renderer?: any) => void) {\n  const extension = extname(file.name).toLowerCase()\n  let preparedElem: any\n  let currentTime = 0\n  let renderer: any\n\n  try {\n    if (VIDEOSTREAM_EXTS.indexOf(extension) >= 0) {\n      renderer = useVideostream()\n    } else {\n      renderer = useMediaSource()\n    }\n  } catch (err) {\n    return callback(err)\n  }\n\n  function useVideostream () {\n    prepareElem()\n    preparedElem.addEventListener('error', function onError (err: Error) {\n      preparedElem.removeEventListener('error', onError)\n\n      return callback(err)\n    })\n    preparedElem.addEventListener('loadstart', onLoadStart)\n    return new videostream(file, preparedElem)\n  }\n\n  function useMediaSource (useVP9 = false) {\n    const codecs = getCodec(file.name, useVP9)\n\n    prepareElem()\n    preparedElem.addEventListener('error', function onError (err: Error) {\n      preparedElem.removeEventListener('error', onError)\n\n      // Try with vp9 before returning an error\n      if (codecs.indexOf('vp8') !== -1) return fallbackToMediaSource(true)\n\n      return callback(err)\n    })\n    preparedElem.addEventListener('loadstart', onLoadStart)\n\n    const wrapper = new MediaElementWrapper(preparedElem)\n    const writable = wrapper.createWriteStream(codecs)\n    file.createReadStream().pipe(writable)\n\n    if (currentTime) preparedElem.currentTime = currentTime\n\n    return wrapper\n  }\n\n  function fallbackToMediaSource (useVP9 = false) {\n    if (useVP9 === true) console.log('Falling back to media source with VP9 enabled.')\n    else console.log('Falling back to media source..')\n\n    useMediaSource(useVP9)\n  }\n\n  function prepareElem () {\n    if (preparedElem === undefined) {\n      preparedElem = elem\n\n      preparedElem.addEventListener('progress', function () {\n        currentTime = elem.currentTime\n      })\n    }\n  }\n\n  function onLoadStart () {\n    preparedElem.removeEventListener('loadstart', onLoadStart)\n    if (opts.autoplay) preparedElem.play()\n\n    callback(null, renderer)\n  }\n}\n\nfunction validateFile (file: any) {\n  if (file == null) {\n    throw new Error('file cannot be null or undefined')\n  }\n  if (typeof file.name !== 'string') {\n    throw new Error('missing or invalid file.name property')\n  }\n  if (typeof file.createReadStream !== 'function') {\n    throw new Error('missing or invalid file.createReadStream property')\n  }\n}\n\nfunction getCodec (name: string, useVP9 = false) {\n  const ext = extname(name).toLowerCase()\n  if (ext === '.mp4') {\n    return 'video/mp4; codecs=\"avc1.640029, mp4a.40.5\"'\n  }\n\n  if (ext === '.webm') {\n    if (useVP9 === true) return 'video/webm; codecs=\"vp9, opus\"'\n\n    return 'video/webm; codecs=\"vp8, vorbis\"'\n  }\n\n  return undefined\n}\n\nexport {\n  renderVideo\n}\n","import videojs from 'video.js'\nimport * as WebTorrent from 'webtorrent'\nimport { renderVideo } from './video-renderer'\nimport { LoadedQualityData, PlayerNetworkInfo, WebtorrentPluginOptions } from '../peertube-videojs-typings'\nimport { getRtcConfig, timeToInt, videoFileMaxByResolution, videoFileMinByResolution, isIOS, isSafari } from '../utils'\nimport { PeertubeChunkStore } from './peertube-chunk-store'\nimport {\n  getAverageBandwidthInStore,\n  getStoredMute,\n  getStoredP2PEnabled,\n  getStoredVolume,\n  saveAverageBandwidth\n} from '../peertube-player-local-storage'\nimport { VideoFile } from '@shared/models'\n\nconst CacheChunkStore = require('cache-chunk-store')\n\ntype PlayOptions = {\n  forcePlay?: boolean,\n  seek?: number,\n  delay?: number\n}\n\nconst Plugin = videojs.getPlugin('plugin')\n\nclass WebTorrentPlugin extends Plugin {\n  readonly videoFiles: VideoFile[]\n\n  private readonly playerElement: HTMLVideoElement\n\n  private readonly autoplay: boolean = false\n  private readonly startTime: number = 0\n  private readonly savePlayerSrcFunction: videojs.Player['src']\n  private readonly videoDuration: number\n  private readonly CONSTANTS = {\n    INFO_SCHEDULER: 1000, // Don't change this\n    AUTO_QUALITY_SCHEDULER: 3000, // Check quality every 3 seconds\n    AUTO_QUALITY_THRESHOLD_PERCENT: 30, // Bandwidth should be 30% more important than a resolution bitrate to change to it\n    AUTO_QUALITY_OBSERVATION_TIME: 10000, // Wait 10 seconds after having change the resolution before another check\n    AUTO_QUALITY_HIGHER_RESOLUTION_DELAY: 5000, // Buffering higher resolution during 5 seconds\n    BANDWIDTH_AVERAGE_NUMBER_OF_VALUES: 5 // Last 5 seconds to build average bandwidth\n  }\n\n  private readonly webtorrent = new WebTorrent({\n    tracker: {\n      rtcConfig: getRtcConfig()\n    },\n    dht: false\n  })\n\n  private currentVideoFile: VideoFile\n  private torrent: WebTorrent.Torrent\n\n  private renderer: any\n  private fakeRenderer: any\n  private destroyingFakeRenderer = false\n\n  private autoResolution = true\n  private autoResolutionPossible = true\n  private isAutoResolutionObservation = false\n  private playerRefusedP2P = false\n\n  private torrentInfoInterval: any\n  private autoQualityInterval: any\n  private addTorrentDelay: any\n  private qualityObservationTimer: any\n  private runAutoQualitySchedulerTimer: any\n\n  private downloadSpeeds: number[] = []\n\n  constructor (player: videojs.Player, options?: WebtorrentPluginOptions) {\n    super(player)\n\n    this.startTime = timeToInt(options.startTime)\n\n    // Disable auto play on iOS\n    this.autoplay = options.autoplay\n    this.playerRefusedP2P = !getStoredP2PEnabled()\n\n    this.videoFiles = options.videoFiles\n    this.videoDuration = options.videoDuration\n\n    this.savePlayerSrcFunction = this.player.src\n    this.playerElement = options.playerElement\n\n    this.player.ready(() => {\n      const playerOptions = this.player.options_\n\n      const volume = getStoredVolume()\n      if (volume !== undefined) this.player.volume(volume)\n\n      const muted = playerOptions.muted !== undefined ? playerOptions.muted : getStoredMute()\n      if (muted !== undefined) this.player.muted(muted)\n\n      this.player.duration(options.videoDuration)\n\n      this.initializePlayer()\n      this.runTorrentInfoScheduler()\n\n      this.player.one('play', () => {\n        // Don't run immediately scheduler, wait some seconds the TCP connections are made\n        this.runAutoQualitySchedulerTimer = setTimeout(() => this.runAutoQualityScheduler(), this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\n      })\n    })\n  }\n\n  dispose () {\n    clearTimeout(this.addTorrentDelay)\n    clearTimeout(this.qualityObservationTimer)\n    clearTimeout(this.runAutoQualitySchedulerTimer)\n\n    clearInterval(this.torrentInfoInterval)\n    clearInterval(this.autoQualityInterval)\n\n    // Don't need to destroy renderer, video player will be destroyed\n    this.flushVideoFile(this.currentVideoFile, false)\n\n    this.destroyFakeRenderer()\n  }\n\n  getCurrentResolutionId () {\n    return this.currentVideoFile ? this.currentVideoFile.resolution.id : -1\n  }\n\n  updateVideoFile (\n    videoFile?: VideoFile,\n    options: {\n      forcePlay?: boolean,\n      seek?: number,\n      delay?: number\n    } = {},\n    done: () => void = () => { /* empty */ }\n  ) {\n    // Automatically choose the adapted video file\n    if (!videoFile) {\n      const savedAverageBandwidth = getAverageBandwidthInStore()\n      videoFile = savedAverageBandwidth\n        ? this.getAppropriateFile(savedAverageBandwidth)\n        : this.pickAverageVideoFile()\n    }\n\n    if (!videoFile) {\n      throw Error(`Can't update video file since videoFile is undefined.`)\n    }\n\n    // Don't add the same video file once again\n    if (this.currentVideoFile !== undefined && this.currentVideoFile.magnetUri === videoFile.magnetUri) {\n      return\n    }\n\n    // Do not display error to user because we will have multiple fallback\n    this.disableErrorDisplay();\n\n    // Hack to \"simulate\" src link in video.js >= 6\n    // Without this, we can't play the video after pausing it\n    // https://github.com/videojs/video.js/blob/master/src/js/player.js#L1633\n    (this.player as any).src = () => true\n    const oldPlaybackRate = this.player.playbackRate()\n\n    const previousVideoFile = this.currentVideoFile\n    this.currentVideoFile = videoFile\n\n    // Don't try on iOS that does not support MediaSource\n    // Or don't use P2P if webtorrent is disabled\n    if (isIOS() || this.playerRefusedP2P) {\n      return this.fallbackToHttp(options, () => {\n        this.player.playbackRate(oldPlaybackRate)\n        return done()\n      })\n    }\n\n    this.addTorrent(this.currentVideoFile.magnetUri, previousVideoFile, options, () => {\n      this.player.playbackRate(oldPlaybackRate)\n      return done()\n    })\n\n    this.changeQuality()\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.currentVideoFile.resolution.id })\n  }\n\n  updateResolution (resolutionId: number, delay = 0) {\n    // Remember player state\n    const currentTime = this.player.currentTime()\n    const isPaused = this.player.paused()\n\n    // Hide bigPlayButton\n    if (!isPaused) {\n      this.player.bigPlayButton.hide()\n    }\n\n    // Audio-only (resolutionId === 0) gets special treatment\n    if (resolutionId === 0) {\n      // Audio-only: show poster, do not auto-hide controls\n      this.player.addClass('vjs-playing-audio-only-content')\n      this.player.posterImage.show()\n    } else {\n      // Hide poster to have black background\n      this.player.removeClass('vjs-playing-audio-only-content')\n      this.player.posterImage.hide()\n    }\n\n    const newVideoFile = this.videoFiles.find(f => f.resolution.id === resolutionId)\n    const options = {\n      forcePlay: false,\n      delay,\n      seek: currentTime + (delay / 1000)\n    }\n\n    this.updateVideoFile(newVideoFile, options)\n  }\n\n  flushVideoFile (videoFile: VideoFile, destroyRenderer = true) {\n    if (videoFile !== undefined && this.webtorrent.get(videoFile.magnetUri)) {\n      if (destroyRenderer === true && this.renderer && this.renderer.destroy) this.renderer.destroy()\n\n      this.webtorrent.remove(videoFile.magnetUri)\n      console.log('Removed ' + videoFile.magnetUri)\n    }\n  }\n\n  enableAutoResolution () {\n    this.autoResolution = true\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.getCurrentResolutionId() })\n  }\n\n  disableAutoResolution (forbid = false) {\n    if (forbid === true) this.autoResolutionPossible = false\n\n    this.autoResolution = false\n    this.trigger('autoResolutionChange', { possible: this.autoResolutionPossible })\n    this.trigger('resolutionChange', { auto: this.autoResolution, resolutionId: this.getCurrentResolutionId() })\n  }\n\n  isAutoResolutionPossible () {\n    return this.autoResolutionPossible\n  }\n\n  getTorrent () {\n    return this.torrent\n  }\n\n  getCurrentVideoFile () {\n    return this.currentVideoFile\n  }\n\n  private addTorrent (\n    magnetOrTorrentUrl: string,\n    previousVideoFile: VideoFile,\n    options: PlayOptions,\n    done: Function\n  ) {\n    if (!magnetOrTorrentUrl) return this.fallbackToHttp(options, done)\n\n    console.log('Adding ' + magnetOrTorrentUrl + '.')\n\n    const oldTorrent = this.torrent\n    const torrentOptions = {\n      // Don't use arrow function: it breaks webtorrent (that uses `new` keyword)\n      store: function (chunkLength: number, storeOpts: any) {\n        return new CacheChunkStore(new PeertubeChunkStore(chunkLength, storeOpts), {\n          max: 100\n        })\n      }\n    }\n\n    this.torrent = this.webtorrent.add(magnetOrTorrentUrl, torrentOptions, torrent => {\n      console.log('Added ' + magnetOrTorrentUrl + '.')\n\n      if (oldTorrent) {\n        // Pause the old torrent\n        this.stopTorrent(oldTorrent)\n\n        // We use a fake renderer so we download correct pieces of the next file\n        if (options.delay) this.renderFileInFakeElement(torrent.files[ 0 ], options.delay)\n      }\n\n      // Render the video in a few seconds? (on resolution change for example, we wait some seconds of the new video resolution)\n      this.addTorrentDelay = setTimeout(() => {\n        // We don't need the fake renderer anymore\n        this.destroyFakeRenderer()\n\n        const paused = this.player.paused()\n\n        this.flushVideoFile(previousVideoFile)\n\n        // Update progress bar (just for the UI), do not wait rendering\n        if (options.seek) this.player.currentTime(options.seek)\n\n        const renderVideoOptions = { autoplay: false, controls: true }\n        renderVideo(torrent.files[ 0 ], this.playerElement, renderVideoOptions, (err, renderer) => {\n          this.renderer = renderer\n\n          if (err) return this.fallbackToHttp(options, done)\n\n          return this.tryToPlay(err => {\n            if (err) return done(err)\n\n            if (options.seek) this.seek(options.seek)\n            if (options.forcePlay === false && paused === true) this.player.pause()\n\n            return done()\n          })\n        })\n      }, options.delay || 0)\n    })\n\n    this.torrent.on('error', (err: any) => console.error(err))\n\n    this.torrent.on('warning', (err: any) => {\n      // We don't support HTTP tracker but we don't care -> we use the web socket tracker\n      if (err.message.indexOf('Unsupported tracker protocol') !== -1) return\n\n      // Users don't care about issues with WebRTC, but developers do so log it in the console\n      if (err.message.indexOf('Ice connection failed') !== -1) {\n        console.log(err)\n        return\n      }\n\n      // Magnet hash is not up to date with the torrent file, add directly the torrent file\n      if (err.message.indexOf('incorrect info hash') !== -1) {\n        console.error('Incorrect info hash detected, falling back to torrent file.')\n        const newOptions = { forcePlay: true, seek: options.seek }\n        return this.addTorrent(this.torrent[ 'xs' ], previousVideoFile, newOptions, done)\n      }\n\n      // Remote instance is down\n      if (err.message.indexOf('from xs param') !== -1) {\n        this.handleError(err)\n      }\n\n      console.warn(err)\n    })\n  }\n\n  private tryToPlay (done?: (err?: Error) => void) {\n    if (!done) done = function () { /* empty */ }\n\n    const playPromise = this.player.play()\n    if (playPromise !== undefined) {\n      return playPromise.then(() => done())\n                        .catch((err: Error) => {\n                          if (err.message.indexOf('The play() request was interrupted by a call to pause()') !== -1) {\n                            return\n                          }\n\n                          console.error(err)\n                          this.player.pause()\n                          this.player.posterImage.show()\n                          this.player.removeClass('vjs-has-autoplay')\n                          this.player.removeClass('vjs-has-big-play-button-clicked')\n                          this.player.removeClass('vjs-playing-audio-only-content')\n\n                          return done()\n                        })\n    }\n\n    return done()\n  }\n\n  private seek (time: number) {\n    this.player.currentTime(time)\n    this.player.handleTechSeeked_()\n  }\n\n  private getAppropriateFile (averageDownloadSpeed?: number): VideoFile {\n    if (this.videoFiles === undefined) return undefined\n\n    const files = this.videoFiles.filter(f => f.resolution.id !== 0)\n\n    if (files.length === 0) return undefined\n    if (files.length === 1) return files[0]\n\n    // Don't change the torrent if the player ended\n    if (this.torrent && this.torrent.progress === 1 && this.player.ended()) return this.currentVideoFile\n\n    if (!averageDownloadSpeed) averageDownloadSpeed = this.getAndSaveActualDownloadSpeed()\n\n    // Limit resolution according to player height\n    const playerHeight = this.playerElement.offsetHeight\n\n    // We take the first resolution just above the player height\n    // Example: player height is 530px, we want the 720p file instead of 480p\n    let maxResolution = files[0].resolution.id\n    for (let i = files.length - 1; i >= 0; i--) {\n      const resolutionId = files[i].resolution.id\n      if (resolutionId !== 0 && resolutionId >= playerHeight) {\n        maxResolution = resolutionId\n        break\n      }\n    }\n\n    // Filter videos we can play according to our screen resolution and bandwidth\n    const filteredFiles = files.filter(f => f.resolution.id <= maxResolution)\n                               .filter(f => {\n                                 const fileBitrate = (f.size / this.videoDuration)\n                                 let threshold = fileBitrate\n\n                                 // If this is for a higher resolution or an initial load: add a margin\n                                 if (!this.currentVideoFile || f.resolution.id > this.currentVideoFile.resolution.id) {\n                                   threshold += ((fileBitrate * this.CONSTANTS.AUTO_QUALITY_THRESHOLD_PERCENT) / 100)\n                                 }\n\n                                 return averageDownloadSpeed > threshold\n                               })\n\n    // If the download speed is too bad, return the lowest resolution we have\n    if (filteredFiles.length === 0) return videoFileMinByResolution(files)\n\n    return videoFileMaxByResolution(filteredFiles)\n  }\n\n  private getAndSaveActualDownloadSpeed () {\n    const start = Math.max(this.downloadSpeeds.length - this.CONSTANTS.BANDWIDTH_AVERAGE_NUMBER_OF_VALUES, 0)\n    const lastDownloadSpeeds = this.downloadSpeeds.slice(start, this.downloadSpeeds.length)\n    if (lastDownloadSpeeds.length === 0) return -1\n\n    const sum = lastDownloadSpeeds.reduce((a, b) => a + b)\n    const averageBandwidth = Math.round(sum / lastDownloadSpeeds.length)\n\n    // Save the average bandwidth for future use\n    saveAverageBandwidth(averageBandwidth)\n\n    return averageBandwidth\n  }\n\n  private initializePlayer () {\n    this.buildQualities()\n\n    if (this.autoplay) {\n      this.player.posterImage.hide()\n\n      return this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\n    }\n\n    // Proxy first play\n    const oldPlay = this.player.play.bind(this.player);\n    (this.player as any).play = () => {\n      this.player.addClass('vjs-has-big-play-button-clicked')\n      this.player.play = oldPlay\n\n      this.updateVideoFile(undefined, { forcePlay: true, seek: this.startTime })\n    }\n  }\n\n  private runAutoQualityScheduler () {\n    this.autoQualityInterval = setInterval(() => {\n\n      // Not initialized or in HTTP fallback\n      if (this.torrent === undefined || this.torrent === null) return\n      if (this.autoResolution === false) return\n      if (this.isAutoResolutionObservation === true) return\n\n      const file = this.getAppropriateFile()\n      let changeResolution = false\n      let changeResolutionDelay = 0\n\n      // Lower resolution\n      if (this.isPlayerWaiting() && file.resolution.id < this.currentVideoFile.resolution.id) {\n        console.log('Downgrading automatically the resolution to: %s', file.resolution.label)\n        changeResolution = true\n      } else if (file.resolution.id > this.currentVideoFile.resolution.id) { // Higher resolution\n        console.log('Upgrading automatically the resolution to: %s', file.resolution.label)\n        changeResolution = true\n        changeResolutionDelay = this.CONSTANTS.AUTO_QUALITY_HIGHER_RESOLUTION_DELAY\n      }\n\n      if (changeResolution === true) {\n        this.updateResolution(file.resolution.id, changeResolutionDelay)\n\n        // Wait some seconds in observation of our new resolution\n        this.isAutoResolutionObservation = true\n\n        this.qualityObservationTimer = setTimeout(() => {\n          this.isAutoResolutionObservation = false\n        }, this.CONSTANTS.AUTO_QUALITY_OBSERVATION_TIME)\n      }\n    }, this.CONSTANTS.AUTO_QUALITY_SCHEDULER)\n  }\n\n  private isPlayerWaiting () {\n    return this.player && this.player.hasClass('vjs-waiting')\n  }\n\n  private runTorrentInfoScheduler () {\n    this.torrentInfoInterval = setInterval(() => {\n      // Not initialized yet\n      if (this.torrent === undefined) return\n\n      // Http fallback\n      if (this.torrent === null) return this.player.trigger('p2pInfo', false)\n\n      // this.webtorrent.downloadSpeed because we need to take into account the potential old torrent too\n      if (this.webtorrent.downloadSpeed !== 0) this.downloadSpeeds.push(this.webtorrent.downloadSpeed)\n\n      return this.player.trigger('p2pInfo', {\n        source: 'webtorrent',\n        http: {\n          downloadSpeed: 0,\n          uploadSpeed: 0,\n          downloaded: 0,\n          uploaded: 0\n        },\n        p2p: {\n          downloadSpeed: this.torrent.downloadSpeed,\n          numPeers: this.torrent.numPeers,\n          uploadSpeed: this.torrent.uploadSpeed,\n          downloaded: this.torrent.downloaded,\n          uploaded: this.torrent.uploaded\n        }\n      } as PlayerNetworkInfo)\n    }, this.CONSTANTS.INFO_SCHEDULER)\n  }\n\n  private fallbackToHttp (options: PlayOptions, done?: Function) {\n    const paused = this.player.paused()\n\n    this.disableAutoResolution(true)\n\n    this.flushVideoFile(this.currentVideoFile, true)\n    this.torrent = null\n\n    // Enable error display now this is our last fallback\n    this.player.one('error', () => this.enableErrorDisplay())\n\n    const httpUrl = this.currentVideoFile.fileUrl\n    this.player.src = this.savePlayerSrcFunction\n    this.player.src(httpUrl)\n\n    this.changeQuality()\n\n    // We changed the source, so reinit captions\n    this.player.trigger('sourcechange')\n\n    return this.tryToPlay(err => {\n      if (err && done) return done(err)\n\n      if (options.seek) this.seek(options.seek)\n      if (options.forcePlay === false && paused === true) this.player.pause()\n\n      if (done) return done()\n    })\n  }\n\n  private handleError (err: Error | string) {\n    return this.player.trigger('customError', { err })\n  }\n\n  private enableErrorDisplay () {\n    this.player.addClass('vjs-error-display-enabled')\n  }\n\n  private disableErrorDisplay () {\n    this.player.removeClass('vjs-error-display-enabled')\n  }\n\n  private pickAverageVideoFile () {\n    if (this.videoFiles.length === 1) return this.videoFiles[0]\n\n    return this.videoFiles[Math.floor(this.videoFiles.length / 2)]\n  }\n\n  private stopTorrent (torrent: WebTorrent.Torrent) {\n    torrent.pause()\n    // Pause does not remove actual peers (in particular the webseed peer)\n    torrent.removePeer(torrent[ 'ws' ])\n  }\n\n  private renderFileInFakeElement (file: WebTorrent.TorrentFile, delay: number) {\n    this.destroyingFakeRenderer = false\n\n    const fakeVideoElem = document.createElement('video')\n    renderVideo(file, fakeVideoElem, { autoplay: false, controls: false }, (err, renderer) => {\n      this.fakeRenderer = renderer\n\n      // The renderer returns an error when we destroy it, so skip them\n      if (this.destroyingFakeRenderer === false && err) {\n        console.error('Cannot render new torrent in fake video element.', err)\n      }\n\n      // Load the future file at the correct time (in delay MS - 2 seconds)\n      fakeVideoElem.currentTime = this.player.currentTime() + (delay - 2000)\n    })\n  }\n\n  private destroyFakeRenderer () {\n    if (this.fakeRenderer) {\n      this.destroyingFakeRenderer = true\n\n      if (this.fakeRenderer.destroy) {\n        try {\n          this.fakeRenderer.destroy()\n        } catch (err) {\n          console.log('Cannot destroy correctly fake renderer.', err)\n        }\n      }\n      this.fakeRenderer = undefined\n    }\n  }\n\n  private buildQualities () {\n    const qualityLevelsPayload = []\n\n    for (const file of this.videoFiles) {\n      const representation = {\n        id: file.resolution.id,\n        label: this.buildQualityLabel(file),\n        height: file.resolution.id,\n        _enabled: true\n      }\n\n      this.player.qualityLevels().addQualityLevel(representation)\n\n      qualityLevelsPayload.push({\n        id: representation.id,\n        label: representation.label,\n        selected: false\n      })\n    }\n\n    const payload: LoadedQualityData = {\n      qualitySwitchCallback: (d: any) => this.qualitySwitchCallback(d),\n      qualityData: {\n        video: qualityLevelsPayload\n      }\n    }\n    this.player.tech(true).trigger('loadedqualitydata', payload)\n  }\n\n  private buildQualityLabel (file: VideoFile) {\n    let label = file.resolution.label\n\n    if (file.fps && file.fps >= 50) {\n      label += file.fps\n    }\n\n    return label\n  }\n\n  private qualitySwitchCallback (id: number) {\n    if (id === -1) {\n      if (this.autoResolutionPossible === true) this.enableAutoResolution()\n      return\n    }\n\n    this.disableAutoResolution()\n    this.updateResolution(id)\n  }\n\n  private changeQuality () {\n    const resolutionId = this.currentVideoFile.resolution.id\n    const qualityLevels = this.player.qualityLevels()\n\n    if (resolutionId === -1) {\n      qualityLevels.selectedIndex = -1\n      return\n    }\n\n    for (let i = 0; i < qualityLevels.length; i++) {\n      const q = qualityLevels[i]\n      if (q.height === resolutionId) qualityLevels.selectedIndex_ = i\n    }\n  }\n}\n\nvideojs.registerPlugin('webtorrent', WebTorrentPlugin)\nexport { WebTorrentPlugin }\n"],"sourceRoot":""}