{"version":3,"sources":["webpack:///./node_modules/sha.js/hash.js","webpack:///./node_modules/p2p-media-loader-core/dist/index.js","webpack:///./node_modules/p2p-media-loader-core/dist/stringly-typed-event-emitter.js","webpack:///./node_modules/sha.js/sha1.js","webpack:///./node_modules/p2p-media-loader-core/dist/loader-interface.js","webpack:///./node_modules/p2p-media-loader-core/dist/media-peer.js","webpack:///./node_modules/p2p-media-loader-hlsjs/dist/segment-manager.js","webpack:///./node_modules/p2p-media-loader-hlsjs/dist/index.js","webpack:///./node_modules/p2p-media-loader-hlsjs/dist/engine.js","webpack:///./node_modules/p2p-media-loader-core/dist/hybrid-loader.js","webpack:///./node_modules/p2p-media-loader-core/dist/http-media-manager.js","webpack:///./node_modules/p2p-media-loader-core/dist/p2p-media-manager.js","webpack:///./node_modules/p2p-media-loader-core/dist/bandwidth-approximator.js","webpack:///./node_modules/p2p-media-loader-core/dist/segments-memory-storage.js","webpack:///./node_modules/@videojs/vhs-utils/es/decode-b64-to-uint8-array.js","webpack:///./node_modules/p2p-media-loader-hlsjs/dist/hlsjs-loader.js","webpack:///./node_modules/p2p-media-loader-hlsjs/dist/hlsjs-loader-class.js","webpack:///./node_modules/@videojs/vhs-utils/es/stream.js","webpack:///./node_modules/m3u8-parser/dist/m3u8-parser.es.js"],"names":["Buffer","Hash","blockSize","finalSize","this","_block","alloc","_finalSize","_blockSize","_len","prototype","update","data","enc","from","block","length","accum","offset","assigned","remainder","Math","min","i","_update","digest","rem","fill","bits","writeUInt32BE","lowBits","hash","_hash","toString","Error","module","exports","__export","m","p","hasOwnProperty","Object","defineProperty","value","version","events_1","STEEmitter","EventEmitter","event","listener","super","on","args","emit","inherits","K","W","Array","Sha1","init","_w","call","rotl5","num","rotl30","ft","s","b","c","d","_a","_b","_c","_d","_e","M","a","e","readInt32BE","j","t","H","allocUnsafe","writeInt32BE","Events","Debug","stringly_typed_event_emitter_1","buffer_1","MediaPeerCommands","MediaPeerSegmentStatus","DownloadingSegment","id","size","bytesDownloaded","pieces","MediaPeer","peer","settings","remoteAddress","downloadingSegmentId","downloadingSegment","segmentsMap","Map","debug","timer","onPeerConnect","onPeerClose","terminateSegmentRequest","onPeerError","error","onPeerData","command","getJsonCommand","segmentId","SegmentsMap","createSegmentsMap","SegmentRequest","SegmentData","cancelResponseTimeoutTimer","SegmentAbsent","delete","receiveSegmentPiece","byteLength","push","segmentData","Uint8Array","piece","set","buffer","bytes","JSON","parse","TextDecoder","decode","segments","undefined","streamSwarmId","keys","swarmData","segmentsIds","split","segmentsStatuses","segmentStatus","write","stringify","destroy","sendCommand","bytesLeft","bytesToSend","webRtcMaxMessageSize","runResponseTimeoutTimer","CancelSegmentRequest","setTimeout","cancelSegmentRequest","p2pSegmentDownloadTimeout","clearTimeout","p2p_media_loader_core_1","m3u8_parser_1","defaultSettings","forwardSegmentCount","swarmId","assetsStorage","SegmentManager","loader","masterPlaylist","variantPlaylists","segmentRequest","playQueue","onSegmentLoaded","segment","segmentUrl","url","byterangeToString","segmentByterange","range","onSuccess","slice","downloadBandwidth","onSegmentError","onError","onSegmentAbort","assign","SegmentLoaded","SegmentError","SegmentAbort","requestUrl","content","responseUrl","parser","Parser","end","playlist","Playlist","manifest","playlists","key","variantPlaylist","found","index","getStreamSwarmId","streamId","updateSegments","xhr","masterSwarmId","getMasterSwarmId","asset","getAsset","responseURL","responseUri","response","loadContent","storeAsset","masterManifestUri","requestUri","processPlaylist","byterange","segmentLocation","getSegmentLocation","byteRangeString","values","next","requestRange","segmentSequence","mediaSequence","segmentIndex","promise","Promise","resolve","reject","loadSegments","start","duration","urlIndex","findIndex","compareByterange","playPosition","playheadPosition","currentSegmentPosition","clear","getSegmentIndex","requestFirstSegment","playlistSegments","initialSequence","loadSegmentId","priority","max","getSegmentAbsoluteUrl","uri","getSegmentId","sequence","load","getSegment","settingsSwarmId","playlistUrl","URL","responseType","XMLHttpRequest","open","setRequestHeader","addEventListener","readyState","status","statusText","xhrSetup","getSettings","send","playlistRequestUrl","b1","b2","initHlsJsPlayer","player","config","getEngine","initHlsJsEvents","engine","_event","frag","setPlayingSegment","byteRange","async","errorData","details","htmlMediaElement","media","el_","setPlayingSegmentByCurrentTime","currentTime","initClapprPlayer","playback","core","getCurrentPlayback","_hls","_p2pm_linitialized","initFlowplayerHlsJsPlayer","hlsjs","hls","initVideoJsContribHlsJsPlayer","ready","options","tech_","options_","hlsjsConfig","initVideoJsHlsJsPlugin","videojs","Html5Hlsjs","addHook","videojsPlayer","initMediaElementJsPlayer","mediaElement","hlsPlayer","initJwPlayer","iid","setInterval","clearInterval","segment_manager_1","hlsjs_loader_1","hlsjs_loader_class_1","Engine","HybridLoader","segmentManager","map","eventKey","forEach","isSupported","createHlsJsLoaderClass","HlsJsLoader","getDetails","loader_interface_1","http_media_manager_1","p2p_media_manager_1","media_peer_1","bandwidth_approximator_1","segments_memory_storage_1","getBrowserRTC","cachedSegmentExpiration","cachedSegmentsCount","useP2P","consumeOnly","requiredSegmentsPriority","simultaneousHttpDownloads","httpDownloadProbability","httpDownloadProbabilityInterval","httpDownloadProbabilitySkipIfNoPeers","httpFailedSegmentTimeout","httpDownloadMaxPriority","httpDownloadInitialTimeout","httpDownloadInitialTimeoutPerSegment","httpUseRanges","simultaneousP2PDownloads","p2pDownloadMaxPriority","trackerAnnounce","peerRequestsPerAnnounce","rtcConfig","debugSegments","segmentsQueue","bandwidthApproximator","BandwidthApproximator","httpDownloadInitialTimeoutTimestamp","processInitialSegmentTimeout","httpRandomDownloadInterval","storageSegments","segmentsStorage","getSegmentsMap","processSegmentsQueue","p2pManager","sendSegmentsMapToAll","downloadRandomSegmentOverHttp","httpManager","getActiveDownloadsCount","getPeers","getOvrallSegmentsMap","pendingQueue","filter","isDownloading","has","isFailed","random","floor","download","onPieceBytesDownloaded","method","peerId","addBytes","now","PieceBytesDownloaded","onPieceBytesUploaded","PieceBytesUploaded","getBandwidth","storeSegment","PeerConnect","sendSegmentsMap","PeerClose","onTrackerUpdate","incomplete","bufferedSegmentsCount","SegmentsMemoryStorage","createHttpManager","createP2PManager","browserRtc","RTCPeerConnection","createDataChannel","HttpMediaManager","P2PMediaManager","setStreamSwarmId","updateSegmentsMap","find","f","abort","enabled","cleanSegmentsStorage","getPeerId","httpAllowed","firstNotDownloadePriority","httpTimeout","segmentToAbort","downloadedPieces","get","Loaded","addSegmentToMap","segmentsIdsAndStatuses","storageSegment","getActiveDownloads","LoadingByHttp","clean","queueSegment","performance","xhrRequests","failedSegments","cleanTimedOutFailedSegments","segmentUrlBuilder","setupXhrEvents","request","time","prevBytesLoaded","loaded","target","segmentFailure","segmentDownloadFinished","segmentValidator","candidates","Client","sha1","PEER_ID_VERSION_PREFIX","replace","v","parseInt","PeerSegmentRequest","sementsStorage","trackerClient","peers","peerCandidates","peerSegmentRequests","pendingTrackerClient","onTrackerError","onTrackerWarning","warning","onTrackerPeer","trackerPeer","onPeerDataUpdated","onSegmentRequest","onSegmentAbsent","onSegmentTimeout","peerCandidatesById","peerCandidate","indexOf","splice","sendSegmentData","sendSegmentAbsent","peerSegmentRequest","description","PEER_ID_SYMBOLS","charAt","TextEncoder","encode","generatePeerId","ArrayBuffer","isDestroyed","infoHash","createClient","clientOptions","announce","port","getAnnounceOpts","numwant","oldTrackerClient","getDownloadingSegmentId","requestSegment","swarmChange","stop","removeAllListeners","peerCandidateById","overallSegmentsMap","SMOOTH_INTERVAL","NumberWithTime","timeStamp","lastBytes","currentBytesSum","lastBandwidth","shift","maxBandwidth","bandwidth","cache","lastAccessed","cacheItem","lockedSementsfilter","segmentsToDelete","remainingSegments","cachedSegment","countOverhead","sort","decodeB64ToUint8Array","b64Text","decodedString","atob","array","charCodeAt","stats","context","_config","callbacks","type","result","loadPlaylist","successPlaylist","loadSegment","rangeStart","rangeEnd","successSegment","console","warn","abortSegment","trequest","tfirst","tload","downloadTime","HlsJsLoaderClass","impl","Stream","listeners","_proto","off","trigger","arguments","_length","_i","apply","dispose","pipe","destination","_Stream","LineStream","_this","nextNewline","substring","TAB","String","fromCharCode","parseByterange","byterangeString","match","exec","parseAttributes","attributes","attr","attrs","RegExp","ParseStream","customParsers","tagMappers","line","_this2","trim","reduce","acc","mapper","mappedLine","concat","newLine","tagType","parseFloat","title","number","playlistType","allowed","test","URI","BYTERANGE","RESOLUTION","resolution","width","height","BANDWIDTH","dateTimeString","dateTimeObject","Date","IV","toLowerCase","Uint32Array","PRECISE","subkey","text","addParser","_ref","_this3","expression","customType","dataParser","addTagMapper","_ref2","camelCaseKeys","str","toUpperCase","setHoldBack","serverControl","targetDuration","partTargetDuration","tag","hb","phb","minTargetDuration","minPartDuration","message","lineStream","parseStream","currentMap","_key","self","uris","currentUri","hasParts","noop","defaultMediaGroups","currentTimeline","allowCache","discontinuityStarts","lastByterangeEnd","lastPartByterangeEnd","parts","preloadHints","timeline","preloadSegment","entry","mediaGroup","rendition","endlist","endList","inf","discontinuitySequence","METHOD","KEYFORMAT","KEYID","contentProtection","schemeIdUri","keyId","pssh","iv","isFinite","mediaGroups","TYPE","NAME","mediaGroupType","default","DEFAULT","autoselect","AUTOSELECT","LANGUAGE","language","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","discontinuity","targetduration","isNaN","timeOffset","precise","cueOut","cueOutCont","cueIn","skip","warnOnMissingAttributes_","part","renditionReports","r","canBlockReload","canSkipDateranges","hint","isPart","otherHint","report","required","partInf","partTarget","comment","custom","identifier","missing","join","chunk"],"mappings":"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","file":"3.chunk.js","sourcesContent":["var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n","\"use strict\";\n/**\n * @license Apache-2.0\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = \"0.6.2\";\n__export(require(\"./loader-interface\"));\n__export(require(\"./hybrid-loader\"));\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nclass STEEmitter extends events_1.EventEmitter {\n    on(event, listener) { return super.on(event, listener); }\n    emit(event, ...args) { return super.emit(event, ...args); }\n}\nexports.STEEmitter = STEEmitter;\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Events;\n(function (Events) {\n    /**\n     * Emitted when segment has been downloaded.\n     * Args: segment\n     */\n    Events[\"SegmentLoaded\"] = \"segment_loaded\";\n    /**\n     * Emitted when an error occurred while loading the segment.\n     * Args: segment, error\n     */\n    Events[\"SegmentError\"] = \"segment_error\";\n    /**\n     * Emitted for each segment that does not hit into a new segments queue when the load() method is called.\n     * Args: segment\n     */\n    Events[\"SegmentAbort\"] = \"segment_abort\";\n    /**\n     * Emitted when a peer is connected.\n     * Args: peer\n     */\n    Events[\"PeerConnect\"] = \"peer_connect\";\n    /**\n     * Emitted when a peer is disconnected.\n     * Args: peerId\n     */\n    Events[\"PeerClose\"] = \"peer_close\";\n    /**\n     * Emitted when a segment piece has been downloaded.\n     * Args: method (can be \"http\" or \"p2p\" only), bytes\n     */\n    Events[\"PieceBytesDownloaded\"] = \"piece_bytes_downloaded\";\n    /**\n     * Emitted when a segment piece has been uploaded.\n     * Args: method (can be \"p2p\" only), bytes\n     */\n    Events[\"PieceBytesUploaded\"] = \"piece_bytes_uploaded\";\n})(Events = exports.Events || (exports.Events = {}));\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Debug = require(\"debug\");\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\nconst buffer_1 = require(\"buffer\");\nvar MediaPeerCommands;\n(function (MediaPeerCommands) {\n    MediaPeerCommands[MediaPeerCommands[\"SegmentData\"] = 0] = \"SegmentData\";\n    MediaPeerCommands[MediaPeerCommands[\"SegmentAbsent\"] = 1] = \"SegmentAbsent\";\n    MediaPeerCommands[MediaPeerCommands[\"SegmentsMap\"] = 2] = \"SegmentsMap\";\n    MediaPeerCommands[MediaPeerCommands[\"SegmentRequest\"] = 3] = \"SegmentRequest\";\n    MediaPeerCommands[MediaPeerCommands[\"CancelSegmentRequest\"] = 4] = \"CancelSegmentRequest\";\n})(MediaPeerCommands || (MediaPeerCommands = {}));\nvar MediaPeerSegmentStatus;\n(function (MediaPeerSegmentStatus) {\n    MediaPeerSegmentStatus[MediaPeerSegmentStatus[\"Loaded\"] = 0] = \"Loaded\";\n    MediaPeerSegmentStatus[MediaPeerSegmentStatus[\"LoadingByHttp\"] = 1] = \"LoadingByHttp\";\n})(MediaPeerSegmentStatus = exports.MediaPeerSegmentStatus || (exports.MediaPeerSegmentStatus = {}));\nclass DownloadingSegment {\n    constructor(id, size) {\n        this.id = id;\n        this.size = size;\n        this.bytesDownloaded = 0;\n        this.pieces = [];\n    }\n}\nclass MediaPeer extends stringly_typed_event_emitter_1.STEEmitter {\n    constructor(peer, settings) {\n        super();\n        this.peer = peer;\n        this.settings = settings;\n        this.remoteAddress = \"\";\n        this.downloadingSegmentId = null;\n        this.downloadingSegment = null;\n        this.segmentsMap = new Map();\n        this.debug = Debug(\"p2pml:media-peer\");\n        this.timer = null;\n        this.onPeerConnect = () => {\n            this.debug(\"peer connect\", this.id, this);\n            this.remoteAddress = this.peer.remoteAddress;\n            this.emit(\"connect\", this);\n        };\n        this.onPeerClose = () => {\n            this.debug(\"peer close\", this.id, this);\n            this.terminateSegmentRequest();\n            this.emit(\"close\", this);\n        };\n        this.onPeerError = (error) => {\n            this.debug(\"peer error\", this.id, error, this);\n        };\n        this.onPeerData = (data) => {\n            const command = this.getJsonCommand(data);\n            if (command == null) {\n                this.receiveSegmentPiece(data);\n                return;\n            }\n            if (this.downloadingSegment) {\n                this.debug(\"peer segment download is interrupted by a command\", this.id, this);\n                const segmentId = this.downloadingSegment.id;\n                this.terminateSegmentRequest();\n                this.emit(\"segment-error\", this, segmentId, \"Segment download is interrupted by a command\");\n                return;\n            }\n            this.debug(\"peer receive command\", this.id, command, this);\n            switch (command.c) {\n                case MediaPeerCommands.SegmentsMap:\n                    this.segmentsMap = this.createSegmentsMap(command.m);\n                    this.emit(\"data-updated\");\n                    break;\n                case MediaPeerCommands.SegmentRequest:\n                    this.emit(\"segment-request\", this, command.i);\n                    break;\n                case MediaPeerCommands.SegmentData:\n                    if (this.downloadingSegmentId === command.i) {\n                        this.downloadingSegment = new DownloadingSegment(command.i, command.s);\n                        this.cancelResponseTimeoutTimer();\n                    }\n                    break;\n                case MediaPeerCommands.SegmentAbsent:\n                    if (this.downloadingSegmentId === command.i) {\n                        this.terminateSegmentRequest();\n                        this.segmentsMap.delete(command.i);\n                        this.emit(\"segment-absent\", this, command.i);\n                    }\n                    break;\n                case MediaPeerCommands.CancelSegmentRequest:\n                    // TODO: peer stop sending buffer\n                    break;\n                default:\n                    break;\n            }\n        };\n        this.peer.on(\"connect\", this.onPeerConnect);\n        this.peer.on(\"close\", this.onPeerClose);\n        this.peer.on(\"error\", this.onPeerError);\n        this.peer.on(\"data\", this.onPeerData);\n        this.id = peer.id;\n    }\n    receiveSegmentPiece(data) {\n        if (!this.downloadingSegment) {\n            // The segment was not requested or canceled\n            this.debug(\"peer segment not requested\", this.id, this);\n            return;\n        }\n        this.downloadingSegment.bytesDownloaded += data.byteLength;\n        this.downloadingSegment.pieces.push(data);\n        this.emit(\"bytes-downloaded\", this, data.byteLength);\n        const segmentId = this.downloadingSegment.id;\n        if (this.downloadingSegment.bytesDownloaded == this.downloadingSegment.size) {\n            const segmentData = new Uint8Array(this.downloadingSegment.size);\n            let offset = 0;\n            for (const piece of this.downloadingSegment.pieces) {\n                segmentData.set(new Uint8Array(piece), offset);\n                offset += piece.byteLength;\n            }\n            this.debug(\"peer segment download done\", this.id, segmentId, this);\n            this.terminateSegmentRequest();\n            this.emit(\"segment-loaded\", this, segmentId, segmentData.buffer);\n        }\n        else if (this.downloadingSegment.bytesDownloaded > this.downloadingSegment.size) {\n            this.debug(\"peer segment download bytes mismatch\", this.id, segmentId, this);\n            this.terminateSegmentRequest();\n            this.emit(\"segment-error\", this, segmentId, \"Too many bytes received for segment\");\n        }\n    }\n    getJsonCommand(data) {\n        const bytes = new Uint8Array(data);\n        // Serialized JSON string check by first, second and last characters: '{\" .... }'\n        if (bytes[0] == 123 && bytes[1] == 34 && bytes[data.byteLength - 1] == 125) {\n            try {\n                return JSON.parse(new TextDecoder().decode(data));\n            }\n            catch (_a) {\n            }\n        }\n        return null;\n    }\n    createSegmentsMap(segments) {\n        if (segments == undefined || !(segments instanceof Object)) {\n            return new Map();\n        }\n        const segmentsMap = new Map();\n        for (const streamSwarmId of Object.keys(segments)) {\n            const swarmData = segments[streamSwarmId];\n            if (!(swarmData instanceof Array) ||\n                (swarmData.length !== 2) ||\n                (typeof swarmData[0] !== \"string\") ||\n                !(swarmData[1] instanceof Array)) {\n                return new Map();\n            }\n            const segmentsIds = swarmData[0].split(\"|\");\n            const segmentsStatuses = swarmData[1];\n            if (segmentsIds.length !== segmentsStatuses.length) {\n                return new Map();\n            }\n            for (let i = 0; i < segmentsIds.length; i++) {\n                const segmentStatus = segmentsStatuses[i];\n                if (typeof segmentStatus !== \"number\" || MediaPeerSegmentStatus[segmentStatus] === undefined) {\n                    return new Map();\n                }\n                segmentsMap.set(`${streamSwarmId}+${segmentsIds[i]}`, segmentStatus);\n            }\n        }\n        return segmentsMap;\n    }\n    sendCommand(command) {\n        this.debug(\"peer send command\", this.id, command, this);\n        this.peer.write(JSON.stringify(command));\n    }\n    destroy() {\n        this.debug(\"peer destroy\", this.id, this);\n        this.terminateSegmentRequest();\n        this.peer.destroy();\n    }\n    getDownloadingSegmentId() {\n        return this.downloadingSegmentId;\n    }\n    getSegmentsMap() {\n        return this.segmentsMap;\n    }\n    sendSegmentsMap(segmentsMap) {\n        this.sendCommand({ c: MediaPeerCommands.SegmentsMap, m: segmentsMap });\n    }\n    sendSegmentData(segmentId, data) {\n        this.sendCommand({\n            c: MediaPeerCommands.SegmentData,\n            i: segmentId,\n            s: data.byteLength\n        });\n        let bytesLeft = data.byteLength;\n        while (bytesLeft > 0) {\n            const bytesToSend = (bytesLeft >= this.settings.webRtcMaxMessageSize ? this.settings.webRtcMaxMessageSize : bytesLeft);\n            const buffer = buffer_1.Buffer.from(data, data.byteLength - bytesLeft, bytesToSend);\n            this.peer.write(buffer);\n            bytesLeft -= bytesToSend;\n        }\n        this.emit(\"bytes-uploaded\", this, data.byteLength);\n    }\n    sendSegmentAbsent(segmentId) {\n        this.sendCommand({ c: MediaPeerCommands.SegmentAbsent, i: segmentId });\n    }\n    requestSegment(segmentId) {\n        if (this.downloadingSegmentId) {\n            throw new Error(\"A segment is already downloading: \" + this.downloadingSegmentId);\n        }\n        this.sendCommand({ c: MediaPeerCommands.SegmentRequest, i: segmentId });\n        this.downloadingSegmentId = segmentId;\n        this.runResponseTimeoutTimer();\n    }\n    cancelSegmentRequest() {\n        let downloadingSegment;\n        if (this.downloadingSegmentId) {\n            const segmentId = this.downloadingSegmentId;\n            downloadingSegment = this.downloadingSegment ? this.downloadingSegment.pieces : undefined;\n            this.terminateSegmentRequest();\n            this.sendCommand({ c: MediaPeerCommands.CancelSegmentRequest, i: segmentId });\n        }\n        return downloadingSegment;\n    }\n    runResponseTimeoutTimer() {\n        this.timer = setTimeout(() => {\n            this.timer = null;\n            if (!this.downloadingSegmentId) {\n                return;\n            }\n            const segmentId = this.downloadingSegmentId;\n            this.cancelSegmentRequest();\n            this.emit(\"segment-timeout\", this, segmentId); // TODO: send peer not responding event\n        }, this.settings.p2pSegmentDownloadTimeout);\n    }\n    cancelResponseTimeoutTimer() {\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n    }\n    terminateSegmentRequest() {\n        this.downloadingSegmentId = null;\n        this.downloadingSegment = null;\n        this.cancelResponseTimeoutTimer();\n    }\n}\nexports.MediaPeer = MediaPeer;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst p2p_media_loader_core_1 = require(\"p2p-media-loader-core\");\nconst m3u8_parser_1 = require(\"m3u8-parser\");\nconst defaultSettings = {\n    forwardSegmentCount: 20,\n    swarmId: undefined,\n    assetsStorage: undefined,\n};\nclass SegmentManager {\n    constructor(loader, settings = {}) {\n        this.masterPlaylist = null;\n        this.variantPlaylists = new Map();\n        this.segmentRequest = null;\n        this.playQueue = [];\n        this.onSegmentLoaded = (segment) => {\n            if (this.segmentRequest && (this.segmentRequest.segmentUrl === segment.url) &&\n                (byterangeToString(this.segmentRequest.segmentByterange) === segment.range)) {\n                this.segmentRequest.onSuccess(segment.data.slice(0), segment.downloadBandwidth);\n                this.segmentRequest = null;\n            }\n        };\n        this.onSegmentError = (segment, error) => {\n            if (this.segmentRequest && (this.segmentRequest.segmentUrl === segment.url) &&\n                (byterangeToString(this.segmentRequest.segmentByterange) === segment.range)) {\n                this.segmentRequest.onError(error);\n                this.segmentRequest = null;\n            }\n        };\n        this.onSegmentAbort = (segment) => {\n            if (this.segmentRequest && (this.segmentRequest.segmentUrl === segment.url) &&\n                (byterangeToString(this.segmentRequest.segmentByterange) === segment.range)) {\n                this.segmentRequest.onError(\"Loading aborted: internal abort\");\n                this.segmentRequest = null;\n            }\n        };\n        this.settings = Object.assign(Object.assign({}, defaultSettings), settings);\n        this.loader = loader;\n        this.loader.on(p2p_media_loader_core_1.Events.SegmentLoaded, this.onSegmentLoaded);\n        this.loader.on(p2p_media_loader_core_1.Events.SegmentError, this.onSegmentError);\n        this.loader.on(p2p_media_loader_core_1.Events.SegmentAbort, this.onSegmentAbort);\n    }\n    getSettings() {\n        return this.settings;\n    }\n    processPlaylist(requestUrl, content, responseUrl) {\n        const parser = new m3u8_parser_1.Parser();\n        parser.push(content);\n        parser.end();\n        const playlist = new Playlist(requestUrl, responseUrl, parser.manifest);\n        if (playlist.manifest.playlists) {\n            this.masterPlaylist = playlist;\n            for (const [key, variantPlaylist] of this.variantPlaylists) {\n                const { streamSwarmId, found, index } = this.getStreamSwarmId(variantPlaylist.requestUrl);\n                if (!found) {\n                    this.variantPlaylists.delete(key);\n                }\n                else {\n                    variantPlaylist.streamSwarmId = streamSwarmId;\n                    variantPlaylist.streamId = \"V\" + index.toString();\n                }\n            }\n        }\n        else {\n            const { streamSwarmId, found, index } = this.getStreamSwarmId(requestUrl);\n            if (found || (this.masterPlaylist === null)) { // do not add audio and subtitles to variants\n                playlist.streamSwarmId = streamSwarmId;\n                playlist.streamId = (this.masterPlaylist === null ? undefined : \"V\" + index.toString());\n                this.variantPlaylists.set(requestUrl, playlist);\n                this.updateSegments();\n            }\n        }\n    }\n    async loadPlaylist(url) {\n        const assetsStorage = this.settings.assetsStorage;\n        let xhr;\n        if (assetsStorage !== undefined) {\n            let masterSwarmId;\n            masterSwarmId = this.getMasterSwarmId();\n            if (masterSwarmId === undefined) {\n                masterSwarmId = url.split(\"?\")[0];\n            }\n            const asset = await assetsStorage.getAsset(url, undefined, masterSwarmId);\n            if (asset !== undefined) {\n                xhr = {\n                    responseURL: asset.responseUri,\n                    response: asset.data,\n                };\n            }\n            else {\n                xhr = await this.loadContent(url, \"text\");\n                assetsStorage.storeAsset({\n                    masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : url,\n                    masterSwarmId: masterSwarmId,\n                    requestUri: url,\n                    responseUri: xhr.responseURL,\n                    data: xhr.response,\n                });\n            }\n        }\n        else {\n            xhr = await this.loadContent(url, \"text\");\n        }\n        this.processPlaylist(url, xhr.response, xhr.responseURL);\n        return xhr;\n    }\n    async loadSegment(url, byterange) {\n        const segmentLocation = this.getSegmentLocation(url, byterange);\n        const byteRangeString = byterangeToString(byterange);\n        if (!segmentLocation) {\n            let content;\n            // Not a segment from variants; usually can be: init, audio or subtitles segment, encription key etc.\n            const assetsStorage = this.settings.assetsStorage;\n            if (assetsStorage !== undefined) {\n                let masterManifestUri = this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : undefined;\n                let masterSwarmId;\n                masterSwarmId = this.getMasterSwarmId();\n                if (masterSwarmId === undefined && this.variantPlaylists.size === 1) {\n                    masterSwarmId = this.variantPlaylists.values().next().value.requestUrl.split(\"?\")[0];\n                }\n                if (masterManifestUri === undefined && this.variantPlaylists.size === 1) {\n                    masterManifestUri = this.variantPlaylists.values().next().value.requestUrl;\n                }\n                if (masterSwarmId !== undefined && masterManifestUri !== undefined) {\n                    const asset = await assetsStorage.getAsset(url, byteRangeString, masterSwarmId);\n                    if (asset !== undefined) {\n                        content = asset.data;\n                    }\n                    else {\n                        const xhr = await this.loadContent(url, \"arraybuffer\", byteRangeString);\n                        content = xhr.response;\n                        assetsStorage.storeAsset({\n                            masterManifestUri: masterManifestUri,\n                            masterSwarmId: masterSwarmId,\n                            requestUri: url,\n                            requestRange: byteRangeString,\n                            responseUri: xhr.responseURL,\n                            data: content,\n                        });\n                    }\n                }\n            }\n            if (content === undefined) {\n                const xhr = await this.loadContent(url, \"arraybuffer\", byteRangeString);\n                content = xhr.response;\n            }\n            return { content, downloadBandwidth: 0 };\n        }\n        const segmentSequence = (segmentLocation.playlist.manifest.mediaSequence ? segmentLocation.playlist.manifest.mediaSequence : 0)\n            + segmentLocation.segmentIndex;\n        if (this.playQueue.length > 0) {\n            const previousSegment = this.playQueue[this.playQueue.length - 1];\n            if (previousSegment.segmentSequence !== segmentSequence - 1) {\n                // Reset play queue in case of segment loading out of sequence\n                this.playQueue = [];\n            }\n        }\n        if (this.segmentRequest) {\n            this.segmentRequest.onError(\"Cancel segment request: simultaneous segment requests are not supported\");\n        }\n        const promise = new Promise((resolve, reject) => {\n            this.segmentRequest = new SegmentRequest(url, byterange, segmentSequence, segmentLocation.playlist.requestUrl, (content, downloadBandwidth) => resolve({ content, downloadBandwidth }), error => reject(error));\n        });\n        this.playQueue.push({ segmentUrl: url, segmentByterange: byterange, segmentSequence: segmentSequence });\n        this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, true);\n        return promise;\n    }\n    setPlayingSegment(url, byterange, start, duration) {\n        const urlIndex = this.playQueue.findIndex(segment => (segment.segmentUrl == url) && compareByterange(segment.segmentByterange, byterange));\n        if (urlIndex >= 0) {\n            this.playQueue = this.playQueue.slice(urlIndex);\n            this.playQueue[0].playPosition = { start, duration };\n            this.updateSegments();\n        }\n    }\n    setPlayingSegmentByCurrentTime(playheadPosition) {\n        if (this.playQueue.length === 0 || !this.playQueue[0].playPosition) {\n            return;\n        }\n        const currentSegmentPosition = this.playQueue[0].playPosition;\n        const segmentEndTime = currentSegmentPosition.start + currentSegmentPosition.duration;\n        if (segmentEndTime - playheadPosition < 0.2) {\n            // means that current segment is (almost) finished playing\n            // remove it from queue\n            this.playQueue = this.playQueue.slice(1);\n            this.updateSegments();\n        }\n    }\n    abortSegment(url, byterange) {\n        if (this.segmentRequest && (this.segmentRequest.segmentUrl === url) &&\n            compareByterange(this.segmentRequest.segmentByterange, byterange)) {\n            this.segmentRequest.onSuccess(undefined, 0);\n            this.segmentRequest = null;\n        }\n    }\n    async destroy() {\n        if (this.segmentRequest) {\n            this.segmentRequest.onError(\"Loading aborted: object destroyed\");\n            this.segmentRequest = null;\n        }\n        this.masterPlaylist = null;\n        this.variantPlaylists.clear();\n        this.playQueue = [];\n        if (this.settings.assetsStorage !== undefined) {\n            await this.settings.assetsStorage.destroy();\n        }\n        await this.loader.destroy();\n    }\n    updateSegments() {\n        if (!this.segmentRequest) {\n            return;\n        }\n        const segmentLocation = this.getSegmentLocation(this.segmentRequest.segmentUrl, this.segmentRequest.segmentByterange);\n        if (segmentLocation) {\n            this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, false);\n        }\n    }\n    getSegmentLocation(url, byterange) {\n        for (const playlist of this.variantPlaylists.values()) {\n            const segmentIndex = playlist.getSegmentIndex(url, byterange);\n            if (segmentIndex >= 0) {\n                return { playlist: playlist, segmentIndex: segmentIndex };\n            }\n        }\n        return undefined;\n    }\n    async loadSegments(playlist, segmentIndex, requestFirstSegment) {\n        const segments = [];\n        const playlistSegments = playlist.manifest.segments;\n        const initialSequence = playlist.manifest.mediaSequence ? playlist.manifest.mediaSequence : 0;\n        let loadSegmentId = null;\n        let priority = Math.max(0, this.playQueue.length - 1);\n        const masterSwarmId = this.getMasterSwarmId();\n        for (let i = segmentIndex; i < playlistSegments.length && segments.length < this.settings.forwardSegmentCount; ++i) {\n            const segment = playlist.manifest.segments[i];\n            const url = playlist.getSegmentAbsoluteUrl(segment.uri);\n            const byterange = segment.byterange;\n            const id = this.getSegmentId(playlist, initialSequence + i);\n            segments.push({\n                id: id,\n                url: url,\n                masterSwarmId: masterSwarmId !== undefined ? masterSwarmId : playlist.streamSwarmId,\n                masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : playlist.requestUrl,\n                streamId: playlist.streamId,\n                sequence: (initialSequence + i).toString(),\n                range: byterangeToString(byterange),\n                priority: priority++,\n            });\n            if (requestFirstSegment && !loadSegmentId) {\n                loadSegmentId = id;\n            }\n        }\n        this.loader.load(segments, playlist.streamSwarmId);\n        if (loadSegmentId) {\n            const segment = await this.loader.getSegment(loadSegmentId);\n            if (segment) { // Segment already loaded by loader\n                this.onSegmentLoaded(segment);\n            }\n        }\n    }\n    getSegmentId(playlist, segmentSequence) {\n        return `${playlist.streamSwarmId}+${segmentSequence}`;\n    }\n    getMasterSwarmId() {\n        const settingsSwarmId = (this.settings.swarmId && (this.settings.swarmId.length !== 0)) ? this.settings.swarmId : undefined;\n        if (settingsSwarmId !== undefined) {\n            return settingsSwarmId;\n        }\n        return (this.masterPlaylist !== null)\n            ? this.masterPlaylist.requestUrl.split(\"?\")[0]\n            : undefined;\n    }\n    getStreamSwarmId(playlistUrl) {\n        const masterSwarmId = this.getMasterSwarmId();\n        if (this.masterPlaylist !== null) {\n            for (let i = 0; i < this.masterPlaylist.manifest.playlists.length; ++i) {\n                const url = new URL(this.masterPlaylist.manifest.playlists[i].uri, this.masterPlaylist.responseUrl).toString();\n                if (url === playlistUrl) {\n                    return { streamSwarmId: `${masterSwarmId}+V${i}`, found: true, index: i };\n                }\n            }\n        }\n        return {\n            streamSwarmId: masterSwarmId !== undefined ? masterSwarmId : playlistUrl.split(\"?\")[0],\n            found: false,\n            index: -1\n        };\n    }\n    async loadContent(url, responseType, range) {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url, true);\n            xhr.responseType = responseType;\n            if (range) {\n                xhr.setRequestHeader(\"Range\", range);\n            }\n            xhr.addEventListener(\"readystatechange\", () => {\n                if (xhr.readyState !== 4) {\n                    return;\n                }\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr);\n                }\n                else {\n                    reject(xhr.statusText);\n                }\n            });\n            const xhrSetup = this.loader.getSettings().xhrSetup;\n            if (xhrSetup) {\n                xhrSetup(xhr, url);\n            }\n            xhr.send();\n        });\n    }\n}\nexports.SegmentManager = SegmentManager;\nclass Playlist {\n    constructor(requestUrl, responseUrl, manifest) {\n        this.requestUrl = requestUrl;\n        this.responseUrl = responseUrl;\n        this.manifest = manifest;\n        this.streamSwarmId = \"\";\n    }\n    getSegmentIndex(url, byterange) {\n        for (let i = 0; i < this.manifest.segments.length; ++i) {\n            const segment = this.manifest.segments[i];\n            const segmentUrl = this.getSegmentAbsoluteUrl(segment.uri);\n            if ((url === segmentUrl) && compareByterange(segment.byterange, byterange)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    getSegmentAbsoluteUrl(segmentUrl) {\n        return new URL(segmentUrl, this.responseUrl).toString();\n    }\n}\nclass SegmentRequest {\n    constructor(segmentUrl, segmentByterange, segmentSequence, playlistRequestUrl, onSuccess, onError) {\n        this.segmentUrl = segmentUrl;\n        this.segmentByterange = segmentByterange;\n        this.segmentSequence = segmentSequence;\n        this.playlistRequestUrl = playlistRequestUrl;\n        this.onSuccess = onSuccess;\n        this.onError = onError;\n    }\n}\nfunction compareByterange(b1, b2) {\n    return (b1 === undefined)\n        ? (b2 === undefined)\n        : ((b2 !== undefined) && (b1.length === b2.length) && (b1.offset === b2.offset));\n}\nfunction byterangeToString(byterange) {\n    if (byterange === undefined) {\n        return undefined;\n    }\n    const end = byterange.offset + byterange.length - 1;\n    return `bytes=${byterange.offset}-${end}`;\n}\n","\"use strict\";\n/**\n * @license Apache-2.0\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = \"0.6.2\";\n__export(require(\"./engine\"));\n__export(require(\"./segment-manager\"));\nfunction initHlsJsPlayer(player) {\n    if (player && player.config && player.config.loader && typeof player.config.loader.getEngine === \"function\") {\n        initHlsJsEvents(player, player.config.loader.getEngine());\n    }\n}\nexports.initHlsJsPlayer = initHlsJsPlayer;\nfunction initClapprPlayer(player) {\n    player.on(\"play\", () => {\n        const playback = player.core.getCurrentPlayback();\n        if (playback._hls && !playback._hls._p2pm_linitialized) {\n            playback._hls._p2pm_linitialized = true;\n            initHlsJsPlayer(player.core.getCurrentPlayback()._hls);\n        }\n    });\n}\nexports.initClapprPlayer = initClapprPlayer;\nfunction initFlowplayerHlsJsPlayer(player) {\n    player.on(\"ready\", () => initHlsJsPlayer(player.engine.hlsjs ? player.engine.hlsjs : player.engine.hls));\n}\nexports.initFlowplayerHlsJsPlayer = initFlowplayerHlsJsPlayer;\nfunction initVideoJsContribHlsJsPlayer(player) {\n    player.ready(() => {\n        const options = player.tech_.options_;\n        if (options && options.hlsjsConfig && options.hlsjsConfig.loader && typeof options.hlsjsConfig.loader.getEngine === \"function\") {\n            initHlsJsEvents(player.tech_, options.hlsjsConfig.loader.getEngine());\n        }\n    });\n}\nexports.initVideoJsContribHlsJsPlayer = initVideoJsContribHlsJsPlayer;\nfunction initVideoJsHlsJsPlugin() {\n    if (videojs == undefined || videojs.Html5Hlsjs == undefined) {\n        return;\n    }\n    videojs.Html5Hlsjs.addHook(\"beforeinitialize\", (videojsPlayer, hlsjs) => {\n        if (hlsjs.config && hlsjs.config.loader && typeof hlsjs.config.loader.getEngine === \"function\") {\n            initHlsJsEvents(hlsjs, hlsjs.config.loader.getEngine());\n        }\n    });\n}\nexports.initVideoJsHlsJsPlugin = initVideoJsHlsJsPlugin;\nfunction initMediaElementJsPlayer(mediaElement) {\n    mediaElement.addEventListener(\"hlsFragChanged\", (event) => {\n        const hls = mediaElement.hlsPlayer;\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\n            const engine = hls.config.loader.getEngine();\n            if (event.data && (event.data.length > 1)) {\n                const frag = event.data[1].frag;\n                const byterange = (frag.byteRange.length !== 2)\n                    ? undefined\n                    : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\n                engine.setPlayingSegment(frag.url, byterange, frag.start, frag.duration);\n            }\n        }\n    });\n    mediaElement.addEventListener(\"hlsDestroying\", async () => {\n        const hls = mediaElement.hlsPlayer;\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\n            const engine = hls.config.loader.getEngine();\n            await engine.destroy();\n        }\n    });\n    mediaElement.addEventListener(\"hlsError\", (event) => {\n        const hls = mediaElement.hlsPlayer;\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\n            if ((event.data !== undefined) && (event.data.details === \"bufferStalledError\")) {\n                const engine = hls.config.loader.getEngine();\n                engine.setPlayingSegmentByCurrentTime(hls.media.currentTime);\n            }\n        }\n    });\n}\nexports.initMediaElementJsPlayer = initMediaElementJsPlayer;\nfunction initJwPlayer(player, hlsjsConfig) {\n    const iid = setInterval(() => {\n        if (player.hls && player.hls.config) {\n            clearInterval(iid);\n            Object.assign(player.hls.config, hlsjsConfig);\n            initHlsJsPlayer(player.hls);\n        }\n    }, 200);\n}\nexports.initJwPlayer = initJwPlayer;\nfunction initHlsJsEvents(player, engine) {\n    player.on(\"hlsFragChanged\", (_event, data) => {\n        const frag = data.frag;\n        const byterange = (frag.byteRange.length !== 2)\n            ? undefined\n            : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\n        engine.setPlayingSegment(frag.url, byterange, frag.start, frag.duration);\n    });\n    player.on(\"hlsDestroying\", async () => {\n        await engine.destroy();\n    });\n    player.on(\"hlsError\", (_event, errorData) => {\n        if (errorData.details === \"bufferStalledError\") {\n            const htmlMediaElement = player.media === undefined\n                ? player.el_ // videojs-contrib-hlsjs\n                : player.media; // all others\n            if (htmlMediaElement === undefined) {\n                return;\n            }\n            engine.setPlayingSegmentByCurrentTime(htmlMediaElement.currentTime);\n        }\n    });\n}\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst p2p_media_loader_core_1 = require(\"p2p-media-loader-core\");\nconst segment_manager_1 = require(\"./segment-manager\");\nconst hlsjs_loader_1 = require(\"./hlsjs-loader\");\nconst hlsjs_loader_class_1 = require(\"./hlsjs-loader-class\");\nclass Engine extends events_1.EventEmitter {\n    constructor(settings = {}) {\n        super();\n        this.loader = new p2p_media_loader_core_1.HybridLoader(settings.loader);\n        this.segmentManager = new segment_manager_1.SegmentManager(this.loader, settings.segments);\n        Object.keys(p2p_media_loader_core_1.Events)\n            .map(eventKey => p2p_media_loader_core_1.Events[eventKey])\n            .forEach(event => this.loader.on(event, (...args) => this.emit(event, ...args)));\n    }\n    static isSupported() {\n        return p2p_media_loader_core_1.HybridLoader.isSupported();\n    }\n    createLoaderClass() {\n        return hlsjs_loader_class_1.createHlsJsLoaderClass(hlsjs_loader_1.HlsJsLoader, this);\n    }\n    async destroy() {\n        await this.segmentManager.destroy();\n    }\n    getSettings() {\n        return {\n            segments: this.segmentManager.getSettings(),\n            loader: this.loader.getSettings()\n        };\n    }\n    getDetails() {\n        return {\n            loader: this.loader.getDetails()\n        };\n    }\n    setPlayingSegment(url, byterange, start, duration) {\n        this.segmentManager.setPlayingSegment(url, byterange, start, duration);\n    }\n    setPlayingSegmentByCurrentTime(playheadPosition) {\n        this.segmentManager.setPlayingSegmentByCurrentTime(playheadPosition);\n    }\n}\nexports.Engine = Engine;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Debug = require(\"debug\");\nconst loader_interface_1 = require(\"./loader-interface\");\nconst events_1 = require(\"events\");\nconst http_media_manager_1 = require(\"./http-media-manager\");\nconst p2p_media_manager_1 = require(\"./p2p-media-manager\");\nconst media_peer_1 = require(\"./media-peer\");\nconst bandwidth_approximator_1 = require(\"./bandwidth-approximator\");\nconst segments_memory_storage_1 = require(\"./segments-memory-storage\");\nconst getBrowserRTC = require(\"get-browser-rtc\");\nconst Peer = require(\"simple-peer\");\nconst defaultSettings = {\n    cachedSegmentExpiration: 5 * 60 * 1000,\n    cachedSegmentsCount: 30,\n    useP2P: true,\n    consumeOnly: false,\n    requiredSegmentsPriority: 1,\n    simultaneousHttpDownloads: 2,\n    httpDownloadProbability: 0.1,\n    httpDownloadProbabilityInterval: 1000,\n    httpDownloadProbabilitySkipIfNoPeers: false,\n    httpFailedSegmentTimeout: 10000,\n    httpDownloadMaxPriority: 20,\n    httpDownloadInitialTimeout: 0,\n    httpDownloadInitialTimeoutPerSegment: 4000,\n    httpUseRanges: false,\n    simultaneousP2PDownloads: 3,\n    p2pDownloadMaxPriority: 20,\n    p2pSegmentDownloadTimeout: 60000,\n    webRtcMaxMessageSize: 64 * 1024 - 1,\n    trackerAnnounce: [\"wss://tracker.novage.com.ua\", \"wss://tracker.openwebtorrent.com\"],\n    peerRequestsPerAnnounce: 10,\n    rtcConfig: Peer.config\n};\nclass HybridLoader extends events_1.EventEmitter {\n    constructor(settings = {}) {\n        super();\n        this.debug = Debug(\"p2pml:hybrid-loader\");\n        this.debugSegments = Debug(\"p2pml:hybrid-loader-segments\");\n        this.segmentsQueue = [];\n        this.bandwidthApproximator = new bandwidth_approximator_1.BandwidthApproximator();\n        this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n        this.processInitialSegmentTimeout = async () => {\n            if (this.httpRandomDownloadInterval === undefined) {\n                return; // Instance destroyed\n            }\n            if (this.masterSwarmId !== undefined) {\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n                }\n            }\n            if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\n                // Set one more timeout for a next segment\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment);\n            }\n        };\n        this.downloadRandomSegmentOverHttp = async () => {\n            if (this.masterSwarmId === undefined ||\n                this.httpRandomDownloadInterval === undefined ||\n                this.httpDownloadInitialTimeoutTimestamp !== -Infinity ||\n                this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads ||\n                (this.settings.httpDownloadProbabilitySkipIfNoPeers && this.p2pManager.getPeers().size === 0) ||\n                this.settings.consumeOnly) {\n                return;\n            }\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            const segmentsMap = this.p2pManager.getOvrallSegmentsMap();\n            const pendingQueue = this.segmentsQueue.filter(s => !this.p2pManager.isDownloading(s) &&\n                !this.httpManager.isDownloading(s) &&\n                !segmentsMap.has(s.id) &&\n                !this.httpManager.isFailed(s) &&\n                (s.priority <= this.settings.httpDownloadMaxPriority) &&\n                !storageSegments.has(s.id));\n            if (pendingQueue.length == 0) {\n                return;\n            }\n            if (Math.random() > this.settings.httpDownloadProbability * pendingQueue.length) {\n                return;\n            }\n            const segment = pendingQueue[Math.floor(Math.random() * pendingQueue.length)];\n            this.debugSegments(\"HTTP download (random)\", segment.priority, segment.url);\n            this.httpManager.download(segment);\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n        };\n        this.onPieceBytesDownloaded = (method, bytes, peerId) => {\n            this.bandwidthApproximator.addBytes(bytes, this.now());\n            this.emit(loader_interface_1.Events.PieceBytesDownloaded, method, bytes, peerId);\n        };\n        this.onPieceBytesUploaded = (method, bytes, peerId) => {\n            this.emit(loader_interface_1.Events.PieceBytesUploaded, method, bytes, peerId);\n        };\n        this.onSegmentLoaded = async (segment, data, peerId) => {\n            this.debugSegments(\"segment loaded\", segment.id, segment.url);\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n            segment.data = data;\n            segment.downloadBandwidth = this.bandwidthApproximator.getBandwidth(this.now());\n            await this.segmentsStorage.storeSegment(segment);\n            this.emit(loader_interface_1.Events.SegmentLoaded, segment, peerId);\n            let storageSegments;\n            storageSegments = (storageSegments === undefined ? await this.segmentsStorage.getSegmentsMap(this.masterSwarmId) : storageSegments);\n            this.processSegmentsQueue(storageSegments);\n            if (!this.settings.consumeOnly) {\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n            }\n        };\n        this.onSegmentError = async (segment, details, peerId) => {\n            this.debugSegments(\"segment error\", segment.id, segment.url, peerId, details);\n            this.emit(loader_interface_1.Events.SegmentError, segment, details, peerId);\n            if (this.masterSwarmId !== undefined) {\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n                }\n            }\n        };\n        this.onPeerConnect = async (peer) => {\n            this.emit(loader_interface_1.Events.PeerConnect, peer);\n            if (!this.settings.consumeOnly && this.masterSwarmId !== undefined) {\n                this.p2pManager.sendSegmentsMap(peer.id, this.createSegmentsMap(await this.segmentsStorage.getSegmentsMap(this.masterSwarmId)));\n            }\n        };\n        this.onPeerClose = (peerId) => {\n            this.emit(loader_interface_1.Events.PeerClose, peerId);\n        };\n        this.onTrackerUpdate = async (data) => {\n            if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity &&\n                data.incomplete !== undefined && data.incomplete <= 1) {\n                this.debugSegments(\"cancel initial HTTP download timeout - no peers\");\n                this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n                if (this.masterSwarmId !== undefined) {\n                    const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n                    if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                        this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n                    }\n                }\n            }\n        };\n        this.settings = Object.assign(Object.assign({}, defaultSettings), settings);\n        if (settings.bufferedSegmentsCount) {\n            if (settings.p2pDownloadMaxPriority === undefined) {\n                this.settings.p2pDownloadMaxPriority = settings.bufferedSegmentsCount;\n            }\n            if (settings.httpDownloadMaxPriority === undefined) {\n                this.settings.p2pDownloadMaxPriority = settings.bufferedSegmentsCount;\n            }\n            delete this.settings.bufferedSegmentsCount;\n        }\n        this.segmentsStorage = (this.settings.segmentsStorage === undefined\n            ? new segments_memory_storage_1.SegmentsMemoryStorage(this.settings)\n            : this.settings.segmentsStorage);\n        this.debug(\"loader settings\", this.settings);\n        this.httpManager = this.createHttpManager();\n        this.httpManager.on(\"segment-loaded\", this.onSegmentLoaded);\n        this.httpManager.on(\"segment-error\", this.onSegmentError);\n        this.httpManager.on(\"bytes-downloaded\", (bytes) => this.onPieceBytesDownloaded(\"http\", bytes));\n        this.p2pManager = this.createP2PManager();\n        this.p2pManager.on(\"segment-loaded\", this.onSegmentLoaded);\n        this.p2pManager.on(\"segment-error\", this.onSegmentError);\n        this.p2pManager.on(\"peer-data-updated\", async () => {\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n            }\n        });\n        this.p2pManager.on(\"bytes-downloaded\", (bytes, peerId) => this.onPieceBytesDownloaded(\"p2p\", bytes, peerId));\n        this.p2pManager.on(\"bytes-uploaded\", (bytes, peerId) => this.onPieceBytesUploaded(\"p2p\", bytes, peerId));\n        this.p2pManager.on(\"peer-connected\", this.onPeerConnect);\n        this.p2pManager.on(\"peer-closed\", this.onPeerClose);\n        this.p2pManager.on(\"tracker-update\", this.onTrackerUpdate);\n    }\n    static isSupported() {\n        const browserRtc = getBrowserRTC();\n        return (browserRtc && (browserRtc.RTCPeerConnection.prototype.createDataChannel !== undefined));\n    }\n    createHttpManager() {\n        return new http_media_manager_1.HttpMediaManager(this.settings);\n    }\n    createP2PManager() {\n        return new p2p_media_manager_1.P2PMediaManager(this.segmentsStorage, this.settings);\n    }\n    async load(segments, streamSwarmId) {\n        if (this.httpRandomDownloadInterval === undefined) { // Do once on first call\n            this.httpRandomDownloadInterval = setInterval(this.downloadRandomSegmentOverHttp, this.settings.httpDownloadProbabilityInterval);\n            if (this.settings.httpDownloadInitialTimeout > 0 && this.settings.httpDownloadInitialTimeoutPerSegment > 0) {\n                // Initialize initial HTTP download timeout (i.e. download initial segments over P2P)\n                this.debugSegments(\"enable initial HTTP download timeout\", this.settings.httpDownloadInitialTimeout, \"per segment\", this.settings.httpDownloadInitialTimeoutPerSegment);\n                this.httpDownloadInitialTimeoutTimestamp = this.now();\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment + 100);\n            }\n        }\n        if (segments.length > 0) {\n            this.masterSwarmId = segments[0].masterSwarmId;\n        }\n        if (this.masterSwarmId !== undefined) {\n            this.p2pManager.setStreamSwarmId(streamSwarmId, this.masterSwarmId);\n        }\n        this.debug(\"load segments\");\n        let updateSegmentsMap = false;\n        // stop all http requests and p2p downloads for segments that are not in the new load\n        for (const segment of this.segmentsQueue) {\n            if (!segments.find(f => f.url == segment.url)) {\n                this.debug(\"remove segment\", segment.url);\n                if (this.httpManager.isDownloading(segment)) {\n                    updateSegmentsMap = true;\n                    this.httpManager.abort(segment);\n                }\n                else {\n                    this.p2pManager.abort(segment);\n                }\n                this.emit(loader_interface_1.Events.SegmentAbort, segment);\n            }\n        }\n        if (this.debug.enabled) {\n            for (const segment of segments) {\n                if (!this.segmentsQueue.find(f => f.url == segment.url)) {\n                    this.debug(\"add segment\", segment.url);\n                }\n            }\n        }\n        this.segmentsQueue = segments;\n        if (this.masterSwarmId === undefined) {\n            return;\n        }\n        let storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n        updateSegmentsMap = (this.processSegmentsQueue(storageSegments) || updateSegmentsMap);\n        if (await this.cleanSegmentsStorage()) {\n            storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            updateSegmentsMap = true;\n        }\n        if (updateSegmentsMap && !this.settings.consumeOnly) {\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n        }\n    }\n    async getSegment(id) {\n        return this.masterSwarmId === undefined\n            ? undefined\n            : this.segmentsStorage.getSegment(id, this.masterSwarmId);\n    }\n    getSettings() {\n        return this.settings;\n    }\n    getDetails() {\n        return {\n            peerId: this.p2pManager.getPeerId()\n        };\n    }\n    async destroy() {\n        if (this.httpRandomDownloadInterval !== undefined) {\n            clearInterval(this.httpRandomDownloadInterval);\n            this.httpRandomDownloadInterval = undefined;\n        }\n        this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n        this.segmentsQueue = [];\n        this.httpManager.destroy();\n        this.p2pManager.destroy();\n        this.masterSwarmId = undefined;\n        await this.segmentsStorage.destroy();\n    }\n    processSegmentsQueue(storageSegments) {\n        this.debugSegments(\"process segments queue. priority\", this.segmentsQueue.length > 0 ? this.segmentsQueue[0].priority : 0);\n        if (this.masterSwarmId === undefined || this.segmentsQueue.length === 0) {\n            return false;\n        }\n        let updateSegmentsMap = false;\n        let segmentsMap;\n        let httpAllowed = true;\n        if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\n            let firstNotDownloadePriority;\n            for (const segment of this.segmentsQueue) {\n                if (!storageSegments.has(segment.id)) {\n                    firstNotDownloadePriority = segment.priority;\n                    break;\n                }\n            }\n            const httpTimeout = this.now() - this.httpDownloadInitialTimeoutTimestamp;\n            httpAllowed = (httpTimeout >= this.settings.httpDownloadInitialTimeout)\n                || ((firstNotDownloadePriority !== undefined) && (httpTimeout > this.settings.httpDownloadInitialTimeoutPerSegment) && (firstNotDownloadePriority <= 0));\n            if (httpAllowed) {\n                this.debugSegments(\"cancel initial HTTP download timeout - timed out\");\n                this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n            }\n        }\n        for (let index = 0; index < this.segmentsQueue.length; index++) {\n            const segment = this.segmentsQueue[index];\n            if (storageSegments.has(segment.id) || this.httpManager.isDownloading(segment)) {\n                continue;\n            }\n            if (segment.priority <= this.settings.requiredSegmentsPriority && httpAllowed && !this.httpManager.isFailed(segment)) {\n                // Download required segments over HTTP\n                if (this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads) {\n                    // Not enough HTTP download resources. Abort one of the HTTP downloads.\n                    for (let i = this.segmentsQueue.length - 1; i > index; i--) {\n                        const segmentToAbort = this.segmentsQueue[i];\n                        if (this.httpManager.isDownloading(segmentToAbort)) {\n                            this.debugSegments(\"cancel HTTP download\", segmentToAbort.priority, segmentToAbort.url);\n                            this.httpManager.abort(segmentToAbort);\n                            break;\n                        }\n                    }\n                }\n                if (this.httpManager.getActiveDownloadsCount() < this.settings.simultaneousHttpDownloads) {\n                    // Abort P2P download of the required segment if any and force HTTP download\n                    const downloadedPieces = this.p2pManager.abort(segment);\n                    this.httpManager.download(segment, downloadedPieces);\n                    this.debugSegments(\"HTTP download (priority)\", segment.priority, segment.url);\n                    updateSegmentsMap = true;\n                    continue;\n                }\n            }\n            if (this.p2pManager.isDownloading(segment)) {\n                continue;\n            }\n            if (segment.priority <= this.settings.requiredSegmentsPriority) { // Download required segments over P2P\n                segmentsMap = segmentsMap ? segmentsMap : this.p2pManager.getOvrallSegmentsMap();\n                if (segmentsMap.get(segment.id) !== media_peer_1.MediaPeerSegmentStatus.Loaded) {\n                    continue;\n                }\n                if (this.p2pManager.getActiveDownloadsCount() >= this.settings.simultaneousP2PDownloads) {\n                    // Not enough P2P download resources. Abort one of the P2P downloads.\n                    for (let i = this.segmentsQueue.length - 1; i > index; i--) {\n                        const segmentToAbort = this.segmentsQueue[i];\n                        if (this.p2pManager.isDownloading(segmentToAbort)) {\n                            this.debugSegments(\"cancel P2P download\", segmentToAbort.priority, segmentToAbort.url);\n                            this.p2pManager.abort(segmentToAbort);\n                            break;\n                        }\n                    }\n                }\n                if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads) {\n                    if (this.p2pManager.download(segment)) {\n                        this.debugSegments(\"P2P download (priority)\", segment.priority, segment.url);\n                        continue;\n                    }\n                }\n                continue;\n            }\n            if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads &&\n                segment.priority <= this.settings.p2pDownloadMaxPriority) {\n                if (this.p2pManager.download(segment)) {\n                    this.debugSegments(\"P2P download\", segment.priority, segment.url);\n                }\n            }\n        }\n        return updateSegmentsMap;\n    }\n    getStreamSwarmId(segment) {\n        return segment.streamId === undefined ? segment.masterSwarmId : `${segment.masterSwarmId}+${segment.streamId}`;\n    }\n    createSegmentsMap(storageSegments) {\n        const segmentsMap = {};\n        const addSegmentToMap = (segment, status) => {\n            const streamSwarmId = this.getStreamSwarmId(segment);\n            const segmentId = segment.sequence;\n            let segmentsIdsAndStatuses = segmentsMap[streamSwarmId];\n            if (segmentsIdsAndStatuses === undefined) {\n                segmentsIdsAndStatuses = [\"\", []];\n                segmentsMap[streamSwarmId] = segmentsIdsAndStatuses;\n            }\n            const segmentsStatuses = segmentsIdsAndStatuses[1];\n            segmentsIdsAndStatuses[0] += ((segmentsStatuses.length == 0) ? segmentId : `|${segmentId}`);\n            segmentsStatuses.push(status);\n        };\n        for (const storageSegment of storageSegments.values()) {\n            addSegmentToMap(storageSegment.segment, media_peer_1.MediaPeerSegmentStatus.Loaded);\n        }\n        for (const download of this.httpManager.getActiveDownloads().values()) {\n            addSegmentToMap(download.segment, media_peer_1.MediaPeerSegmentStatus.LoadingByHttp);\n        }\n        return segmentsMap;\n    }\n    async cleanSegmentsStorage() {\n        if (this.masterSwarmId === undefined) {\n            return false;\n        }\n        return this.segmentsStorage.clean(this.masterSwarmId, (id) => this.segmentsQueue.find(queueSegment => queueSegment.id === id) !== undefined);\n    }\n    now() {\n        return performance.now();\n    }\n}\nexports.HybridLoader = HybridLoader;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Debug = require(\"debug\");\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\nclass HttpMediaManager extends stringly_typed_event_emitter_1.STEEmitter {\n    constructor(settings) {\n        super();\n        this.settings = settings;\n        this.xhrRequests = new Map();\n        this.failedSegments = new Map();\n        this.debug = Debug(\"p2pml:http-media-manager\");\n        this.now = () => performance.now();\n    }\n    download(segment, downloadedPieces) {\n        if (this.isDownloading(segment)) {\n            return;\n        }\n        this.cleanTimedOutFailedSegments();\n        const segmentUrl = this.settings.segmentUrlBuilder\n            ? this.settings.segmentUrlBuilder(segment)\n            : segment.url;\n        this.debug(\"http segment download\", segmentUrl);\n        segment.requestUrl = segmentUrl;\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", segmentUrl, true);\n        xhr.responseType = \"arraybuffer\";\n        if (segment.range) {\n            xhr.setRequestHeader(\"Range\", segment.range);\n            downloadedPieces = undefined; // TODO: process downloadedPieces for segments with range headers too\n        }\n        else if ((downloadedPieces !== undefined) && this.settings.httpUseRanges) {\n            let bytesDownloaded = 0;\n            for (const piece of downloadedPieces) {\n                bytesDownloaded += piece.byteLength;\n            }\n            xhr.setRequestHeader(\"Range\", `bytes=${bytesDownloaded}-`);\n            this.debug(\"continue download from\", bytesDownloaded);\n        }\n        else {\n            downloadedPieces = undefined;\n        }\n        this.setupXhrEvents(xhr, segment, downloadedPieces);\n        if (this.settings.xhrSetup) {\n            this.settings.xhrSetup(xhr, segmentUrl);\n        }\n        this.xhrRequests.set(segment.id, { xhr, segment });\n        xhr.send();\n    }\n    abort(segment) {\n        const request = this.xhrRequests.get(segment.id);\n        if (request) {\n            request.xhr.abort();\n            this.xhrRequests.delete(segment.id);\n            this.debug(\"http segment abort\", segment.id);\n        }\n    }\n    isDownloading(segment) {\n        return this.xhrRequests.has(segment.id);\n    }\n    isFailed(segment) {\n        const time = this.failedSegments.get(segment.id);\n        return time !== undefined && time > this.now();\n    }\n    getActiveDownloads() {\n        return this.xhrRequests;\n    }\n    getActiveDownloadsCount() {\n        return this.xhrRequests.size;\n    }\n    destroy() {\n        this.xhrRequests.forEach(request => request.xhr.abort());\n        this.xhrRequests.clear();\n    }\n    setupXhrEvents(xhr, segment, downloadedPieces) {\n        let prevBytesLoaded = 0;\n        xhr.addEventListener(\"progress\", (event) => {\n            const bytesLoaded = event.loaded - prevBytesLoaded;\n            this.emit(\"bytes-downloaded\", bytesLoaded);\n            prevBytesLoaded = event.loaded;\n        });\n        xhr.addEventListener(\"load\", async (event) => {\n            if ((event.target.status < 200) || (event.target.status >= 300)) {\n                this.segmentFailure(segment, event, xhr);\n                return;\n            }\n            let data = event.target.response;\n            if ((downloadedPieces !== undefined) && (event.target.status === 206)) {\n                let bytesDownloaded = 0;\n                for (const piece of downloadedPieces) {\n                    bytesDownloaded += piece.byteLength;\n                }\n                const segmentData = new Uint8Array(bytesDownloaded + data.byteLength);\n                let offset = 0;\n                for (const piece of downloadedPieces) {\n                    segmentData.set(new Uint8Array(piece), offset);\n                    offset += piece.byteLength;\n                }\n                segmentData.set(new Uint8Array(data), offset);\n                data = segmentData.buffer;\n            }\n            await this.segmentDownloadFinished(segment, data, xhr);\n        });\n        xhr.addEventListener(\"error\", (event) => {\n            this.segmentFailure(segment, event, xhr);\n        });\n        xhr.addEventListener(\"timeout\", (event) => {\n            this.segmentFailure(segment, event, xhr);\n        });\n    }\n    async segmentDownloadFinished(segment, data, xhr) {\n        segment.responseUrl = xhr.responseURL === null ? undefined : xhr.responseURL;\n        if (this.settings.segmentValidator) {\n            try {\n                await this.settings.segmentValidator(Object.assign(Object.assign({}, segment), { data: data }), \"http\");\n            }\n            catch (error) {\n                this.debug(\"segment validator failed\", error);\n                this.segmentFailure(segment, error, xhr);\n                return;\n            }\n        }\n        this.xhrRequests.delete(segment.id);\n        this.emit(\"segment-loaded\", segment, data);\n    }\n    segmentFailure(segment, error, xhr) {\n        segment.responseUrl = xhr.responseURL === null ? undefined : xhr.responseURL;\n        this.xhrRequests.delete(segment.id);\n        this.failedSegments.set(segment.id, this.now() + this.settings.httpFailedSegmentTimeout);\n        this.emit(\"segment-error\", segment, error);\n    }\n    cleanTimedOutFailedSegments() {\n        const now = this.now();\n        const candidates = [];\n        this.failedSegments.forEach((time, id) => {\n            if (time < now) {\n                candidates.push(id);\n            }\n        });\n        candidates.forEach(id => this.failedSegments.delete(id));\n    }\n}\nexports.HttpMediaManager = HttpMediaManager;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Debug = require(\"debug\");\nconst Client = require(\"bittorrent-tracker/client\");\nconst stringly_typed_event_emitter_1 = require(\"./stringly-typed-event-emitter\");\nconst media_peer_1 = require(\"./media-peer\");\nconst buffer_1 = require(\"buffer\");\nconst sha1 = require(\"sha.js/sha1\");\nconst index_1 = require(\"./index\");\nconst PEER_PROTOCOL_VERSION = 2;\nconst PEER_ID_VERSION_STRING = index_1.version.replace(/\\d*./g, v => `0${parseInt(v, 10) % 100}`.slice(-2)).slice(0, 4);\nconst PEER_ID_VERSION_PREFIX = `-WW${PEER_ID_VERSION_STRING}-`; // Using WebTorrent client ID in order to not be banned by websocket trackers\nclass PeerSegmentRequest {\n    constructor(peerId, segment) {\n        this.peerId = peerId;\n        this.segment = segment;\n    }\n}\nfunction generatePeerId() {\n    const PEER_ID_SYMBOLS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const PEER_ID_LENGTH = 20;\n    let peerId = PEER_ID_VERSION_PREFIX;\n    for (let i = 0; i < PEER_ID_LENGTH - PEER_ID_VERSION_PREFIX.length; i++) {\n        peerId += PEER_ID_SYMBOLS.charAt(Math.floor(Math.random() * PEER_ID_SYMBOLS.length));\n    }\n    return new TextEncoder().encode(peerId).buffer;\n}\nclass P2PMediaManager extends stringly_typed_event_emitter_1.STEEmitter {\n    constructor(sementsStorage, settings) {\n        super();\n        this.sementsStorage = sementsStorage;\n        this.settings = settings;\n        this.trackerClient = null;\n        this.peers = new Map();\n        this.peerCandidates = new Map();\n        this.peerSegmentRequests = new Map();\n        this.streamSwarmId = null;\n        this.debug = Debug(\"p2pml:p2p-media-manager\");\n        this.pendingTrackerClient = null;\n        this.onTrackerError = (error) => {\n            this.debug(\"tracker error\", error);\n        };\n        this.onTrackerWarning = (warning) => {\n            this.debug(\"tracker warning\", warning);\n        };\n        this.onTrackerUpdate = (data) => {\n            this.debug(\"tracker update\", data);\n            this.emit(\"tracker-update\", data);\n        };\n        this.onTrackerPeer = (trackerPeer) => {\n            this.debug(\"tracker peer\", trackerPeer.id, trackerPeer);\n            if (this.peers.has(trackerPeer.id)) {\n                this.debug(\"tracker peer already connected\", trackerPeer.id, trackerPeer);\n                trackerPeer.destroy();\n                return;\n            }\n            const peer = new media_peer_1.MediaPeer(trackerPeer, this.settings);\n            peer.on(\"connect\", this.onPeerConnect);\n            peer.on(\"close\", this.onPeerClose);\n            peer.on(\"data-updated\", this.onPeerDataUpdated);\n            peer.on(\"segment-request\", this.onSegmentRequest);\n            peer.on(\"segment-loaded\", this.onSegmentLoaded);\n            peer.on(\"segment-absent\", this.onSegmentAbsent);\n            peer.on(\"segment-error\", this.onSegmentError);\n            peer.on(\"segment-timeout\", this.onSegmentTimeout);\n            peer.on(\"bytes-downloaded\", this.onPieceBytesDownloaded);\n            peer.on(\"bytes-uploaded\", this.onPieceBytesUploaded);\n            let peerCandidatesById = this.peerCandidates.get(peer.id);\n            if (!peerCandidatesById) {\n                peerCandidatesById = [];\n                this.peerCandidates.set(peer.id, peerCandidatesById);\n            }\n            peerCandidatesById.push(peer);\n        };\n        this.onPieceBytesDownloaded = (peer, bytes) => {\n            this.emit(\"bytes-downloaded\", bytes, peer.id);\n        };\n        this.onPieceBytesUploaded = (peer, bytes) => {\n            this.emit(\"bytes-uploaded\", bytes, peer.id);\n        };\n        this.onPeerConnect = (peer) => {\n            const connectedPeer = this.peers.get(peer.id);\n            if (connectedPeer) {\n                this.debug(\"tracker peer already connected (in peer connect)\", peer.id, peer);\n                peer.destroy();\n                return;\n            }\n            // First peer with the ID connected\n            this.peers.set(peer.id, peer);\n            // Destroy all other peer candidates\n            const peerCandidatesById = this.peerCandidates.get(peer.id);\n            if (peerCandidatesById) {\n                for (const peerCandidate of peerCandidatesById) {\n                    if (peerCandidate != peer) {\n                        peerCandidate.destroy();\n                    }\n                }\n                this.peerCandidates.delete(peer.id);\n            }\n            this.emit(\"peer-connected\", { id: peer.id, remoteAddress: peer.remoteAddress });\n        };\n        this.onPeerClose = (peer) => {\n            if (this.peers.get(peer.id) != peer) {\n                // Try to delete the peer candidate\n                const peerCandidatesById = this.peerCandidates.get(peer.id);\n                if (!peerCandidatesById) {\n                    return;\n                }\n                const index = peerCandidatesById.indexOf(peer);\n                if (index != -1) {\n                    peerCandidatesById.splice(index, 1);\n                }\n                if (peerCandidatesById.length == 0) {\n                    this.peerCandidates.delete(peer.id);\n                }\n                return;\n            }\n            for (const [key, value] of this.peerSegmentRequests) {\n                if (value.peerId == peer.id) {\n                    this.peerSegmentRequests.delete(key);\n                }\n            }\n            this.peers.delete(peer.id);\n            this.emit(\"peer-data-updated\");\n            this.emit(\"peer-closed\", peer.id);\n        };\n        this.onPeerDataUpdated = () => {\n            this.emit(\"peer-data-updated\");\n        };\n        this.onSegmentRequest = async (peer, segmentId) => {\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n            const segment = await this.sementsStorage.getSegment(segmentId, this.masterSwarmId);\n            if (segment) {\n                peer.sendSegmentData(segmentId, segment.data);\n            }\n            else {\n                peer.sendSegmentAbsent(segmentId);\n            }\n        };\n        this.onSegmentLoaded = async (peer, segmentId, data) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (!peerSegmentRequest) {\n                return;\n            }\n            const segment = peerSegmentRequest.segment;\n            if (this.settings.segmentValidator) {\n                try {\n                    await this.settings.segmentValidator(Object.assign(Object.assign({}, segment), { data: data }), \"p2p\", peer.id);\n                }\n                catch (error) {\n                    this.debug(\"segment validator failed\", error);\n                    this.peerSegmentRequests.delete(segmentId);\n                    this.emit(\"segment-error\", segment, error, peer.id);\n                    this.onPeerClose(peer);\n                    return;\n                }\n            }\n            this.peerSegmentRequests.delete(segmentId);\n            this.emit(\"segment-loaded\", segment, data, peer.id);\n        };\n        this.onSegmentAbsent = (peer, segmentId) => {\n            this.peerSegmentRequests.delete(segmentId);\n            this.emit(\"peer-data-updated\");\n        };\n        this.onSegmentError = (peer, segmentId, description) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (peerSegmentRequest) {\n                this.peerSegmentRequests.delete(segmentId);\n                this.emit(\"segment-error\", peerSegmentRequest.segment, description, peer.id);\n            }\n        };\n        this.onSegmentTimeout = (peer, segmentId) => {\n            const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n            if (peerSegmentRequest) {\n                this.peerSegmentRequests.delete(segmentId);\n                peer.destroy();\n                if (this.peers.delete(peerSegmentRequest.peerId)) {\n                    this.emit(\"peer-data-updated\");\n                }\n            }\n        };\n        this.peerId = settings.useP2P ? generatePeerId() : new ArrayBuffer(0);\n        if (this.debug.enabled) {\n            this.debug(\"peer ID\", this.getPeerId(), new TextDecoder().decode(this.peerId));\n        }\n    }\n    getPeers() {\n        return this.peers;\n    }\n    getPeerId() {\n        return buffer_1.Buffer.from(this.peerId).toString(\"hex\");\n    }\n    async setStreamSwarmId(streamSwarmId, masterSwarmId) {\n        if (this.streamSwarmId === streamSwarmId) {\n            return;\n        }\n        this.destroy(true);\n        this.streamSwarmId = streamSwarmId;\n        this.masterSwarmId = masterSwarmId;\n        this.debug(\"stream swarm ID\", this.streamSwarmId);\n        this.pendingTrackerClient = {\n            isDestroyed: false\n        };\n        const pendingTrackerClient = this.pendingTrackerClient;\n        // TODO: native browser 'crypto.subtle' implementation doesn't work in Chrome in insecure pages\n        // TODO: Edge doesn't support SHA-1. Change to SHA-256 once Edge support is required.\n        // const infoHash = await crypto.subtle.digest(\"SHA-1\", new TextEncoder().encode(PEER_PROTOCOL_VERSION + this.streamSwarmId));\n        const infoHash = new sha1().update(PEER_PROTOCOL_VERSION + this.streamSwarmId).digest();\n        // destroy may be called while waiting for the hash to be calculated\n        if (!pendingTrackerClient.isDestroyed) {\n            this.pendingTrackerClient = null;\n            this.createClient(infoHash);\n        }\n        else if (this.trackerClient != null) {\n            this.trackerClient.destroy();\n            this.trackerClient = null;\n        }\n    }\n    createClient(infoHash) {\n        if (!this.settings.useP2P) {\n            return;\n        }\n        const clientOptions = {\n            infoHash: buffer_1.Buffer.from(infoHash, 0, 20),\n            peerId: buffer_1.Buffer.from(this.peerId, 0, 20),\n            announce: this.settings.trackerAnnounce,\n            rtcConfig: this.settings.rtcConfig,\n            port: 6881,\n            getAnnounceOpts: () => {\n                return { numwant: this.settings.peerRequestsPerAnnounce };\n            }\n        };\n        let oldTrackerClient = this.trackerClient;\n        this.trackerClient = new Client(clientOptions);\n        this.trackerClient.on(\"error\", this.onTrackerError);\n        this.trackerClient.on(\"warning\", this.onTrackerWarning);\n        this.trackerClient.on(\"update\", this.onTrackerUpdate);\n        this.trackerClient.on(\"peer\", this.onTrackerPeer);\n        this.trackerClient.start();\n        if (oldTrackerClient != null) {\n            oldTrackerClient.destroy();\n            oldTrackerClient = null;\n        }\n    }\n    download(segment) {\n        if (this.isDownloading(segment)) {\n            return false;\n        }\n        const candidates = [];\n        for (const peer of this.peers.values()) {\n            if ((peer.getDownloadingSegmentId() == null) &&\n                (peer.getSegmentsMap().get(segment.id) === media_peer_1.MediaPeerSegmentStatus.Loaded)) {\n                candidates.push(peer);\n            }\n        }\n        if (candidates.length === 0) {\n            return false;\n        }\n        const peer = candidates[Math.floor(Math.random() * candidates.length)];\n        peer.requestSegment(segment.id);\n        this.peerSegmentRequests.set(segment.id, new PeerSegmentRequest(peer.id, segment));\n        return true;\n    }\n    abort(segment) {\n        let downloadingSegment;\n        const peerSegmentRequest = this.peerSegmentRequests.get(segment.id);\n        if (peerSegmentRequest) {\n            const peer = this.peers.get(peerSegmentRequest.peerId);\n            if (peer) {\n                downloadingSegment = peer.cancelSegmentRequest();\n            }\n            this.peerSegmentRequests.delete(segment.id);\n        }\n        return downloadingSegment;\n    }\n    isDownloading(segment) {\n        return this.peerSegmentRequests.has(segment.id);\n    }\n    getActiveDownloadsCount() {\n        return this.peerSegmentRequests.size;\n    }\n    destroy(swarmChange = false) {\n        this.streamSwarmId = null;\n        if (this.trackerClient) {\n            this.trackerClient.stop();\n            if (swarmChange) {\n                // Don't destroy trackerClient to reuse its WebSocket connection to the tracker server\n                this.trackerClient.removeAllListeners(\"error\");\n                this.trackerClient.removeAllListeners(\"warning\");\n                this.trackerClient.removeAllListeners(\"update\");\n                this.trackerClient.removeAllListeners(\"peer\");\n            }\n            else {\n                this.trackerClient.destroy();\n                this.trackerClient = null;\n            }\n        }\n        if (this.pendingTrackerClient) {\n            this.pendingTrackerClient.isDestroyed = true;\n            this.pendingTrackerClient = null;\n        }\n        this.peers.forEach(peer => peer.destroy());\n        this.peers.clear();\n        this.peerSegmentRequests.clear();\n        for (const peerCandidateById of this.peerCandidates.values()) {\n            for (const peerCandidate of peerCandidateById) {\n                peerCandidate.destroy();\n            }\n        }\n        this.peerCandidates.clear();\n    }\n    sendSegmentsMapToAll(segmentsMap) {\n        this.peers.forEach(peer => peer.sendSegmentsMap(segmentsMap));\n    }\n    sendSegmentsMap(peerId, segmentsMap) {\n        const peer = this.peers.get(peerId);\n        if (peer) {\n            peer.sendSegmentsMap(segmentsMap);\n        }\n    }\n    getOvrallSegmentsMap() {\n        const overallSegmentsMap = new Map();\n        for (const peer of this.peers.values()) {\n            for (const [segmentId, segmentStatus] of peer.getSegmentsMap()) {\n                if (segmentStatus === media_peer_1.MediaPeerSegmentStatus.Loaded) {\n                    overallSegmentsMap.set(segmentId, media_peer_1.MediaPeerSegmentStatus.Loaded);\n                }\n                else if (!overallSegmentsMap.get(segmentId)) {\n                    overallSegmentsMap.set(segmentId, media_peer_1.MediaPeerSegmentStatus.LoadingByHttp);\n                }\n            }\n        }\n        return overallSegmentsMap;\n    }\n}\nexports.P2PMediaManager = P2PMediaManager;\n","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SMOOTH_INTERVAL = 1 * 1000;\nconst MEASURE_INTERVAL = 60 * 1000;\nclass NumberWithTime {\n    constructor(value, timeStamp) {\n        this.value = value;\n        this.timeStamp = timeStamp;\n    }\n}\nclass BandwidthApproximator {\n    constructor() {\n        this.lastBytes = [];\n        this.currentBytesSum = 0;\n        this.lastBandwidth = [];\n    }\n    addBytes(bytes, timeStamp) {\n        this.lastBytes.push(new NumberWithTime(bytes, timeStamp));\n        this.currentBytesSum += bytes;\n        while (timeStamp - this.lastBytes[0].timeStamp > SMOOTH_INTERVAL) {\n            this.currentBytesSum -= this.lastBytes.shift().value;\n        }\n        this.lastBandwidth.push(new NumberWithTime(this.currentBytesSum / SMOOTH_INTERVAL, timeStamp));\n    }\n    // in bytes per millisecond\n    getBandwidth(timeStamp) {\n        while (this.lastBandwidth.length != 0 && timeStamp - this.lastBandwidth[0].timeStamp > MEASURE_INTERVAL) {\n            this.lastBandwidth.shift();\n        }\n        let maxBandwidth = 0;\n        for (const bandwidth of this.lastBandwidth) {\n            if (bandwidth.value > maxBandwidth) {\n                maxBandwidth = bandwidth.value;\n            }\n        }\n        return maxBandwidth;\n    }\n    getSmoothInterval() {\n        return SMOOTH_INTERVAL;\n    }\n    getMeasureInterval() {\n        return MEASURE_INTERVAL;\n    }\n}\nexports.BandwidthApproximator = BandwidthApproximator;\n","\"use strict\";\n/**\n * Copyright 2019 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass SegmentsMemoryStorage {\n    constructor(settings) {\n        this.settings = settings;\n        this.cache = new Map();\n    }\n    async storeSegment(segment) {\n        this.cache.set(segment.id, { segment, lastAccessed: performance.now() });\n    }\n    async getSegmentsMap(masterSwarmId) {\n        return this.cache;\n    }\n    async getSegment(id, masterSwarmId) {\n        const cacheItem = this.cache.get(id);\n        if (cacheItem === undefined) {\n            return undefined;\n        }\n        cacheItem.lastAccessed = performance.now();\n        return cacheItem.segment;\n    }\n    async hasSegment(id, masterSwarmId) {\n        return this.cache.has(id);\n    }\n    async clean(masterSwarmId, lockedSementsfilter) {\n        const segmentsToDelete = [];\n        const remainingSegments = [];\n        // Delete old segments\n        const now = performance.now();\n        for (const cachedSegment of this.cache.values()) {\n            if (now - cachedSegment.lastAccessed > this.settings.cachedSegmentExpiration) {\n                segmentsToDelete.push(cachedSegment.segment.id);\n            }\n            else {\n                remainingSegments.push(cachedSegment);\n            }\n        }\n        // Delete segments over cached count\n        let countOverhead = remainingSegments.length - this.settings.cachedSegmentsCount;\n        if (countOverhead > 0) {\n            remainingSegments.sort((a, b) => a.lastAccessed - b.lastAccessed);\n            for (const cachedSegment of remainingSegments) {\n                if ((lockedSementsfilter === undefined) || !lockedSementsfilter(cachedSegment.segment.id)) {\n                    segmentsToDelete.push(cachedSegment.segment.id);\n                    countOverhead--;\n                    if (countOverhead == 0) {\n                        break;\n                    }\n                }\n            }\n        }\n        segmentsToDelete.forEach(id => this.cache.delete(id));\n        return segmentsToDelete.length > 0;\n    }\n    async destroy() {\n        this.cache.clear();\n    }\n}\nexports.SegmentsMemoryStorage = SegmentsMemoryStorage;\n","import window from 'global/window';\n\nvar atob = function atob(s) {\n  return window.atob ? window.atob(s) : Buffer.from(s, 'base64').toString('binary');\n};\n\nexport default function decodeB64ToUint8Array(b64Text) {\n  var decodedString = atob(b64Text);\n  var array = new Uint8Array(decodedString.length);\n\n  for (var i = 0; i < decodedString.length; i++) {\n    array[i] = decodedString.charCodeAt(i);\n  }\n\n  return array;\n}","\"use strict\";\n/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DEFAULT_DOWNLOAD_LATENCY = 1;\nconst DEFAULT_DOWNLOAD_BANDWIDTH = 12500; // bytes per millisecond\nclass HlsJsLoader {\n    constructor(segmentManager) {\n        this.stats = {}; // required for older versions of hls.js\n        this.segmentManager = segmentManager;\n    }\n    async load(context, _config, callbacks) {\n        if (context.type) {\n            try {\n                const result = await this.segmentManager.loadPlaylist(context.url);\n                this.successPlaylist(result, context, callbacks);\n            }\n            catch (e) {\n                this.error(e, context, callbacks);\n            }\n        }\n        else if (context.frag) {\n            try {\n                const result = await this.segmentManager.loadSegment(context.url, (context.rangeStart == undefined) || (context.rangeEnd == undefined)\n                    ? undefined\n                    : { offset: context.rangeStart, length: context.rangeEnd - context.rangeStart });\n                if (result.content !== undefined) {\n                    setTimeout(() => this.successSegment(result.content, result.downloadBandwidth, context, callbacks), 0);\n                }\n            }\n            catch (e) {\n                setTimeout(() => this.error(e, context, callbacks), 0);\n            }\n        }\n        else {\n            console.warn(\"Unknown load request\", context);\n        }\n    }\n    abort(context) {\n        this.segmentManager.abortSegment(context.url, (context.rangeStart == undefined) || (context.rangeEnd == undefined)\n            ? undefined\n            : { offset: context.rangeStart, length: context.rangeEnd - context.rangeStart });\n    }\n    successPlaylist(xhr, context, callbacks) {\n        const now = performance.now();\n        this.stats.trequest = now - 300;\n        this.stats.tfirst = now - 200;\n        this.stats.tload = now;\n        this.stats.loaded = xhr.response.length;\n        callbacks.onSuccess({\n            url: xhr.responseURL,\n            data: xhr.response\n        }, this.stats, context);\n    }\n    successSegment(content, downloadBandwidth, context, callbacks) {\n        const now = performance.now();\n        const downloadTime = content.byteLength / (((downloadBandwidth === undefined) || (downloadBandwidth <= 0)) ? DEFAULT_DOWNLOAD_BANDWIDTH : downloadBandwidth);\n        this.stats.trequest = now - DEFAULT_DOWNLOAD_LATENCY - downloadTime;\n        this.stats.tfirst = now - downloadTime;\n        this.stats.tload = now;\n        this.stats.loaded = content.byteLength;\n        callbacks.onSuccess({\n            url: context.url,\n            data: content\n        }, this.stats, context);\n    }\n    error(error, context, callbacks) {\n        callbacks.onError(error, context);\n    }\n}\nexports.HlsJsLoader = HlsJsLoader;\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction createHlsJsLoaderClass(HlsJsLoader, engine) {\n    function HlsJsLoaderClass() {\n        this.impl = new HlsJsLoader(engine.segmentManager);\n        this.stats = this.impl.stats;\n    }\n\n    HlsJsLoaderClass.prototype.load = function (context, config, callbacks) {\n        this.context = context;\n        this.impl.load(context, config, callbacks);\n    };\n\n    HlsJsLoaderClass.prototype.abort = function () {\n        this.impl.abort(this.context);\n    };\n\n    HlsJsLoaderClass.prototype.destroy = function () {\n        if (this.context) {\n            this.impl.abort(this.context);\n        }\n    };\n\n    HlsJsLoaderClass.getEngine = function () {\n        return engine;\n    };\n\n    return HlsJsLoaderClass;\n}\n\nmodule.exports.createHlsJsLoaderClass = createHlsJsLoaderClass;\n","/**\n * @file stream.js\n */\n\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = /*#__PURE__*/function () {\n  function Stream() {\n    this.listeners = {};\n  }\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  var _proto = Stream.prototype;\n\n  _proto.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n\n    this.listeners[type].push(listener);\n  }\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {boolean} if we could turn it off or not\n   */\n  ;\n\n  _proto.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n    // In Video.js we slice listener functions\n    // on trigger so that it does not mess up the order\n    // while we loop through.\n    //\n    // Here we slice on off so that the loop in trigger\n    // can continue using it's old reference to loop without\n    // messing up the order.\n\n    this.listeners[type] = this.listeners[type].slice(0);\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {string} type the event name\n   */\n  ;\n\n  _proto.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n\n    if (!callbacks) {\n      return;\n    } // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n\n\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  }\n  /**\n   * Destroys the stream and cleans up.\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    this.listeners = {};\n  }\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n  ;\n\n  _proto.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\nexport { Stream as default };","/*! @name m3u8-parser @version 4.6.0 @license Apache-2.0 */\nimport _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';\nimport Stream from '@videojs/vhs-utils/es/stream.js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array.js';\n\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nvar LineStream = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(LineStream, _Stream);\n\n  function LineStream() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.buffer = '';\n    return _this;\n  }\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {string} data the text to process\n   */\n\n\n  var _proto = LineStream.prototype;\n\n  _proto.push = function push(data) {\n    var nextNewline;\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  };\n\n  return LineStream;\n}(Stream);\n\nvar TAB = String.fromCharCode(0x09);\n\nvar parseByterange = function parseByterange(byterangeString) {\n  // optionally match and capture 0+ digits before `@`\n  // optionally match and capture 0+ digits after `@`\n  var match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || '');\n  var result = {};\n\n  if (match[1]) {\n    result.length = parseInt(match[1], 10);\n  }\n\n  if (match[2]) {\n    result.offset = parseInt(match[2], 10);\n  }\n\n  return result;\n};\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\n\n\nvar attributeSeparator = function attributeSeparator() {\n  var key = '[^=]*';\n  var value = '\"[^\"]*\"|[^,]*';\n  var keyvalue = '(?:' + key + ')=(?:' + value + ')';\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n/**\n * Parse attributes from a line given the separator\n *\n * @param {string} attributes the attribute line to parse\n */\n\n\nvar parseAttributes = function parseAttributes(attributes) {\n  // split the string using attributes as the separator\n  var attrs = attributes.split(attributeSeparator());\n  var result = {};\n  var i = attrs.length;\n  var attr;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    } // split the key and value\n\n\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\n\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n\n  return result;\n};\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\n\nvar ParseStream = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(ParseStream, _Stream);\n\n  function ParseStream() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.customParsers = [];\n    _this.tagMappers = [];\n    return _this;\n  }\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {string} line a single line of an M3U8 file to parse\n   */\n\n\n  var _proto = ParseStream.prototype;\n\n  _proto.push = function push(line) {\n    var _this2 = this;\n\n    var match;\n    var event; // strip whitespace\n\n    line = line.trim();\n\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    } // URIs\n\n\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    } // map tags\n\n\n    var newLines = this.tagMappers.reduce(function (acc, mapper) {\n      var mappedLine = mapper(line); // skip if unchanged\n\n      if (mappedLine === line) {\n        return acc;\n      }\n\n      return acc.concat([mappedLine]);\n    }, [line]);\n    newLines.forEach(function (newLine) {\n      for (var i = 0; i < _this2.customParsers.length; i++) {\n        if (_this2.customParsers[i].call(_this2, newLine)) {\n          return;\n        }\n      } // Comments\n\n\n      if (newLine.indexOf('#EXT') !== 0) {\n        _this2.trigger('data', {\n          type: 'comment',\n          text: newLine.slice(1)\n        });\n\n        return;\n      } // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n\n\n      newLine = newLine.replace('\\r', ''); // Tags\n\n      match = /^#EXTM3U/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n\n        return;\n      }\n\n      match = /^#EXTINF:?([0-9\\.]*)?,?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n\n        if (match[2]) {\n          event.title = match[2];\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-BYTERANGE:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = _extends(parseByterange(match[1]), {\n          type: 'tag',\n          tagType: 'byterange'\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MAP:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          var attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n\n          if (attributes.BYTERANGE) {\n            event.byterange = parseByterange(attributes.BYTERANGE);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            var split = event.attributes.RESOLUTION.split('x');\n            var resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n\n            event.attributes.RESOLUTION = resolution;\n          }\n\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-ENDLIST/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\n\n      if (match) {\n        _this2.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n\n        return;\n      }\n\n      match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n\n        if (match[1]) {\n          event.dateTimeString = match[1];\n          event.dateTimeObject = new Date(match[1]);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-KEY:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]); // parse the IV string into a Uint32Array\n\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-START:?(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'start'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n          event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'skip'\n        };\n        event.attributes = parseAttributes(match[1]);\n\n        if (event.attributes.hasOwnProperty('SKIPPED-SEGMENTS')) {\n          event.attributes['SKIPPED-SEGMENTS'] = parseInt(event.attributes['SKIPPED-SEGMENTS'], 10);\n        }\n\n        if (event.attributes.hasOwnProperty('RECENTLY-REMOVED-DATERANGES')) {\n          event.attributes['RECENTLY-REMOVED-DATERANGES'] = event.attributes['RECENTLY-REMOVED-DATERANGES'].split(TAB);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PART:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['DURATION'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['INDEPENDENT', 'GAP'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n\n        if (event.attributes.hasOwnProperty('BYTERANGE')) {\n          event.attributes.byterange = parseByterange(event.attributes.BYTERANGE);\n        }\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'server-control'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['CAN-SKIP-UNTIL', 'PART-HOLD-BACK', 'HOLD-BACK'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['CAN-SKIP-DATERANGES', 'CAN-BLOCK-RELOAD'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part-inf'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['PART-TARGET'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'preload-hint'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['BYTERANGE-START', 'BYTERANGE-LENGTH'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n            var subkey = key === 'BYTERANGE-LENGTH' ? 'length' : 'offset';\n            event.attributes.byterange = event.attributes.byterange || {};\n            event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.\n\n            delete event.attributes[key];\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      }\n\n      match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'rendition-report'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['LAST-MSN', 'LAST-PART'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n          }\n        });\n\n        _this2.trigger('data', event);\n\n        return;\n      } // unknown tag type\n\n\n      _this2.trigger('data', {\n        type: 'tag',\n        data: newLine.slice(4)\n      });\n    });\n  }\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n  ;\n\n  _proto.addParser = function addParser(_ref) {\n    var _this3 = this;\n\n    var expression = _ref.expression,\n        customType = _ref.customType,\n        dataParser = _ref.dataParser,\n        segment = _ref.segment;\n\n    if (typeof dataParser !== 'function') {\n      dataParser = function dataParser(line) {\n        return line;\n      };\n    }\n\n    this.customParsers.push(function (line) {\n      var match = expression.exec(line);\n\n      if (match) {\n        _this3.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType: customType,\n          segment: segment\n        });\n\n        return true;\n      }\n    });\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n  ;\n\n  _proto.addTagMapper = function addTagMapper(_ref2) {\n    var expression = _ref2.expression,\n        map = _ref2.map;\n\n    var mapFn = function mapFn(line) {\n      if (expression.test(line)) {\n        return map(line);\n      }\n\n      return line;\n    };\n\n    this.tagMappers.push(mapFn);\n  };\n\n  return ParseStream;\n}(Stream);\n\nvar camelCase = function camelCase(str) {\n  return str.toLowerCase().replace(/-(\\w)/g, function (a) {\n    return a[1].toUpperCase();\n  });\n};\n\nvar camelCaseKeys = function camelCaseKeys(attributes) {\n  var result = {};\n  Object.keys(attributes).forEach(function (key) {\n    result[camelCase(key)] = attributes[key];\n  });\n  return result;\n}; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration\n// we need this helper because defaults are based upon targetDuration and\n// partTargetDuration being set, but they may not be if SERVER-CONTROL appears before\n// target durations are set.\n\n\nvar setHoldBack = function setHoldBack(manifest) {\n  var serverControl = manifest.serverControl,\n      targetDuration = manifest.targetDuration,\n      partTargetDuration = manifest.partTargetDuration;\n\n  if (!serverControl) {\n    return;\n  }\n\n  var tag = '#EXT-X-SERVER-CONTROL';\n  var hb = 'holdBack';\n  var phb = 'partHoldBack';\n  var minTargetDuration = targetDuration && targetDuration * 3;\n  var minPartDuration = partTargetDuration && partTargetDuration * 2;\n\n  if (targetDuration && !serverControl.hasOwnProperty(hb)) {\n    serverControl[hb] = minTargetDuration;\n    this.trigger('info', {\n      message: tag + \" defaulting HOLD-BACK to targetDuration * 3 (\" + minTargetDuration + \").\"\n    });\n  }\n\n  if (minTargetDuration && serverControl[hb] < minTargetDuration) {\n    this.trigger('warn', {\n      message: tag + \" clamping HOLD-BACK (\" + serverControl[hb] + \") to targetDuration * 3 (\" + minTargetDuration + \")\"\n    });\n    serverControl[hb] = minTargetDuration;\n  } // default no part hold back to part target duration * 3\n\n\n  if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {\n    serverControl[phb] = partTargetDuration * 3;\n    this.trigger('info', {\n      message: tag + \" defaulting PART-HOLD-BACK to partTargetDuration * 3 (\" + serverControl[phb] + \").\"\n    });\n  } // if part hold back is too small default it to part target duration * 2\n\n\n  if (partTargetDuration && serverControl[phb] < minPartDuration) {\n    this.trigger('warn', {\n      message: tag + \" clamping PART-HOLD-BACK (\" + serverControl[phb] + \") to partTargetDuration * 2 (\" + minPartDuration + \").\"\n    });\n    serverControl[phb] = minPartDuration;\n  }\n};\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\n\nvar Parser = /*#__PURE__*/function (_Stream) {\n  _inheritsLoose(Parser, _Stream);\n\n  function Parser() {\n    var _this;\n\n    _this = _Stream.call(this) || this;\n    _this.lineStream = new LineStream();\n    _this.parseStream = new ParseStream();\n\n    _this.lineStream.pipe(_this.parseStream);\n    /* eslint-disable consistent-this */\n\n\n    var self = _assertThisInitialized(_this);\n    /* eslint-enable consistent-this */\n\n\n    var uris = [];\n    var currentUri = {}; // if specified, the active EXT-X-MAP definition\n\n    var currentMap; // if specified, the active decryption key\n\n    var _key;\n\n    var hasParts = false;\n\n    var noop = function noop() {};\n\n    var defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    }; // This is the Widevine UUID from DASH IF IOP. The same exact string is\n    // used in MPDs with Widevine encrypted streams.\n\n    var widevineUuid = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; // group segments into numbered timelines delineated by discontinuities\n\n    var currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\n\n    _this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      segments: []\n    }; // keep track of the last seen segment's byte range end, as segments are not required\n    // to provide the offset, in which case it defaults to the next byte after the\n    // previous segment\n\n    var lastByterangeEnd = 0; // keep track of the last seen part's byte range end.\n\n    var lastPartByterangeEnd = 0;\n\n    _this.on('end', function () {\n      // only add preloadSegment if we don't yet have a uri for it.\n      // and we actually have parts/preloadHints\n      if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) {\n        return;\n      }\n\n      if (!currentUri.map && currentMap) {\n        currentUri.map = currentMap;\n      }\n\n      if (!currentUri.key && _key) {\n        currentUri.key = _key;\n      }\n\n      if (!currentUri.timeline && typeof currentTimeline === 'number') {\n        currentUri.timeline = currentTimeline;\n      }\n\n      _this.manifest.preloadSegment = currentUri;\n    }); // update the manifest with the m3u8 entry from the parse stream\n\n\n    _this.parseStream.on('data', function (entry) {\n      var mediaGroup;\n      var rendition;\n      ({\n        tag: function tag() {\n          // switch based on the tag type\n          (({\n            version: function version() {\n              if (entry.version) {\n                this.manifest.version = entry.version;\n              }\n            },\n            'allow-cache': function allowCache() {\n              this.manifest.allowCache = entry.allowed;\n\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n            byterange: function byterange() {\n              var byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  /*\n                   * From the latest spec (as of this writing):\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2\n                   *\n                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)\n                   *\n                   * \"If o [offset] is not present, the sub-range begins at the next byte\n                   * following the sub-range of the previous media segment.\"\n                   */\n                  entry.offset = lastByterangeEnd;\n                }\n              }\n\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n\n              lastByterangeEnd = byterange.offset + byterange.length;\n            },\n            endlist: function endlist() {\n              this.manifest.endList = true;\n            },\n            inf: function inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n            key: function key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              } // clear the active encryption key\n\n\n              if (entry.attributes.METHOD === 'NONE') {\n                _key = null;\n                return;\n              }\n\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              } // check if the content is encrypted for Widevine\n              // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf\n\n\n              if (entry.attributes.KEYFORMAT === widevineUuid) {\n                var VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];\n\n                if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {\n                  this.trigger('warn', {\n                    message: 'invalid key method provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (entry.attributes.METHOD === 'SAMPLE-AES-CENC') {\n                  this.trigger('warn', {\n                    message: 'SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead'\n                  });\n                }\n\n                if (entry.attributes.URI.substring(0, 23) !== 'data:text/plain;base64,') {\n                  this.trigger('warn', {\n                    message: 'invalid key URI provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === '0x')) {\n                  this.trigger('warn', {\n                    message: 'invalid key ID provided for Widevine'\n                  });\n                  return;\n                } // if Widevine key attributes are valid, store them as `contentProtection`\n                // on the manifest to emulate Widevine tag structure in a DASH mpd\n\n\n                this.manifest.contentProtection = {\n                  'com.widevine.alpha': {\n                    attributes: {\n                      schemeIdUri: entry.attributes.KEYFORMAT,\n                      // remove '0x' from the key id string\n                      keyId: entry.attributes.KEYID.substring(2)\n                    },\n                    // decode the base64-encoded PSSH box\n                    pssh: decodeB64ToUint8Array(entry.attributes.URI.split(',')[1])\n                  }\n                };\n                return;\n              }\n\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              } // setup an encryption key for upcoming segments\n\n\n              _key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                _key.iv = entry.attributes.IV;\n              }\n            },\n            'media-sequence': function mediaSequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.mediaSequence = entry.number;\n            },\n            'discontinuity-sequence': function discontinuitySequence() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n            'playlist-type': function playlistType() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n\n              this.manifest.playlistType = entry.playlistType;\n            },\n            map: function map() {\n              currentMap = {};\n\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n            },\n            'stream-inf': function streamInf() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n\n              _extends(currentUri.attributes, entry.attributes);\n            },\n            media: function media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              } // find the media group, creating defaults as necessary\n\n\n              var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata\n\n              rendition = {\n                default: /yes/i.test(entry.attributes.DEFAULT)\n              };\n\n              if (rendition.default) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              } // insert the new rendition\n\n\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n            discontinuity: function discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n            'program-date-time': function programDateTime() {\n              if (typeof this.manifest.dateTimeString === 'undefined') {\n                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\n                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\n                // to the manifest object\n                // TODO: Consider removing this in future major version\n                this.manifest.dateTimeString = entry.dateTimeString;\n                this.manifest.dateTimeObject = entry.dateTimeObject;\n              }\n\n              currentUri.dateTimeString = entry.dateTimeString;\n              currentUri.dateTimeObject = entry.dateTimeObject;\n            },\n            targetduration: function targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n\n              this.manifest.targetDuration = entry.duration;\n              setHoldBack.call(this, this.manifest);\n            },\n            start: function start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n            'cue-out': function cueOut() {\n              currentUri.cueOut = entry.data;\n            },\n            'cue-out-cont': function cueOutCont() {\n              currentUri.cueOutCont = entry.data;\n            },\n            'cue-in': function cueIn() {\n              currentUri.cueIn = entry.data;\n            },\n            'skip': function skip() {\n              this.manifest.skip = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-SKIP', entry.attributes, ['SKIPPED-SEGMENTS']);\n            },\n            'part': function part() {\n              var _this2 = this;\n\n              hasParts = true; // parts are always specifed before a segment\n\n              var segmentIndex = this.manifest.segments.length;\n              var part = camelCaseKeys(entry.attributes);\n              currentUri.parts = currentUri.parts || [];\n              currentUri.parts.push(part);\n\n              if (part.byterange) {\n                if (!part.byterange.hasOwnProperty('offset')) {\n                  part.byterange.offset = lastPartByterangeEnd;\n                }\n\n                lastPartByterangeEnd = part.byterange.offset + part.byterange.length;\n              }\n\n              var partIndex = currentUri.parts.length - 1;\n              this.warnOnMissingAttributes_(\"#EXT-X-PART #\" + partIndex + \" for segment #\" + segmentIndex, entry.attributes, ['URI', 'DURATION']);\n\n              if (this.manifest.renditionReports) {\n                this.manifest.renditionReports.forEach(function (r, i) {\n                  if (!r.hasOwnProperty('lastPart')) {\n                    _this2.trigger('warn', {\n                      message: \"#EXT-X-RENDITION-REPORT #\" + i + \" lacks required attribute(s): LAST-PART\"\n                    });\n                  }\n                });\n              }\n            },\n            'server-control': function serverControl() {\n              var attrs = this.manifest.serverControl = camelCaseKeys(entry.attributes);\n\n              if (!attrs.hasOwnProperty('canBlockReload')) {\n                attrs.canBlockReload = false;\n                this.trigger('info', {\n                  message: '#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false'\n                });\n              }\n\n              setHoldBack.call(this, this.manifest);\n\n              if (attrs.canSkipDateranges && !attrs.hasOwnProperty('canSkipUntil')) {\n                this.trigger('warn', {\n                  message: '#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set'\n                });\n              }\n            },\n            'preload-hint': function preloadHint() {\n              // parts are always specifed before a segment\n              var segmentIndex = this.manifest.segments.length;\n              var hint = camelCaseKeys(entry.attributes);\n              var isPart = hint.type && hint.type === 'PART';\n              currentUri.preloadHints = currentUri.preloadHints || [];\n              currentUri.preloadHints.push(hint);\n\n              if (hint.byterange) {\n                if (!hint.byterange.hasOwnProperty('offset')) {\n                  // use last part byterange end or zero if not a part.\n                  hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;\n\n                  if (isPart) {\n                    lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;\n                  }\n                }\n              }\n\n              var index = currentUri.preloadHints.length - 1;\n              this.warnOnMissingAttributes_(\"#EXT-X-PRELOAD-HINT #\" + index + \" for segment #\" + segmentIndex, entry.attributes, ['TYPE', 'URI']);\n\n              if (!hint.type) {\n                return;\n              } // search through all preload hints except for the current one for\n              // a duplicate type.\n\n\n              for (var i = 0; i < currentUri.preloadHints.length - 1; i++) {\n                var otherHint = currentUri.preloadHints[i];\n\n                if (!otherHint.type) {\n                  continue;\n                }\n\n                if (otherHint.type === hint.type) {\n                  this.trigger('warn', {\n                    message: \"#EXT-X-PRELOAD-HINT #\" + index + \" for segment #\" + segmentIndex + \" has the same TYPE \" + hint.type + \" as preload hint #\" + i\n                  });\n                }\n              }\n            },\n            'rendition-report': function renditionReport() {\n              var report = camelCaseKeys(entry.attributes);\n              this.manifest.renditionReports = this.manifest.renditionReports || [];\n              this.manifest.renditionReports.push(report);\n              var index = this.manifest.renditionReports.length - 1;\n              var required = ['LAST-MSN', 'URI'];\n\n              if (hasParts) {\n                required.push('LAST-PART');\n              }\n\n              this.warnOnMissingAttributes_(\"#EXT-X-RENDITION-REPORT #\" + index, entry.attributes, required);\n            },\n            'part-inf': function partInf() {\n              this.manifest.partInf = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-PART-INF', entry.attributes, ['PART-TARGET']);\n\n              if (this.manifest.partInf.partTarget) {\n                this.manifest.partTargetDuration = this.manifest.partInf.partTarget;\n              }\n\n              setHoldBack.call(this, this.manifest);\n            }\n          })[entry.tagType] || noop).call(self);\n        },\n        uri: function uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri); // if no explicit duration was declared, use the target duration\n\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          } // annotate with encryption information, if necessary\n\n\n          if (_key) {\n            currentUri.key = _key;\n          }\n\n          currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\n\n          if (currentMap) {\n            currentUri.map = currentMap;\n          } // reset the last byterange end as it needs to be 0 between parts\n\n\n          lastPartByterangeEnd = 0; // prepare for the next URI\n\n          currentUri = {};\n        },\n        comment: function comment() {// comments are not important for playback\n        },\n        custom: function custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n      })[entry.type].call(self);\n    });\n\n    return _this;\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto.warnOnMissingAttributes_ = function warnOnMissingAttributes_(identifier, attributes, required) {\n    var missing = [];\n    required.forEach(function (key) {\n      if (!attributes.hasOwnProperty(key)) {\n        missing.push(key);\n      }\n    });\n\n    if (missing.length) {\n      this.trigger('warn', {\n        message: identifier + \" lacks required attribute(s): \" + missing.join(', ')\n      });\n    }\n  }\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {string} chunk a potentially incomplete portion of the manifest\n   */\n  ;\n\n  _proto.push = function push(chunk) {\n    this.lineStream.push(chunk);\n  }\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n  ;\n\n  _proto.end = function end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n    this.trigger('end');\n  }\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.type         the type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n  ;\n\n  _proto.addParser = function addParser(options) {\n    this.parseStream.addParser(options);\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n  ;\n\n  _proto.addTagMapper = function addTagMapper(options) {\n    this.parseStream.addTagMapper(options);\n  };\n\n  return Parser;\n}(Stream);\n\nexport { LineStream, ParseStream, Parser };\n"],"sourceRoot":""}