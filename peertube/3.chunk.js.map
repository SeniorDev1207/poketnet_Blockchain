{"version":3,"sources":["webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/loader-interface.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/stringly-typed-event-emitter.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/http-media-manager.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/media-peer.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/p2p-media-manager.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/bandwidth-approximator.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/segments-memory-storage.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/hybrid-loader.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/index.ts","webpack:///util (ignored)?e240","webpack:///util (ignored)?5554","webpack:///./common-node (ignored)","webpack:///./lib/client/http-tracker (ignored)","webpack:///./lib/client/udp-tracker (ignored)","webpack:///util (ignored)?2d5f","webpack:///util (ignored)?00bc","webpack:///ws (ignored)","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/segment-manager.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/hlsjs-loader.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/engine.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib/index.ts"],"names":[],"mappings":"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","file":"3.chunk.js","sourcesContent":["/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport type Segment = {\r\n    readonly id: string;\r\n    readonly url: string;\r\n    readonly masterSwarmId: string;\r\n    readonly masterManifestUri: string;\r\n    readonly streamId: string | undefined;\r\n    readonly sequence: string;\r\n    readonly range: string | undefined;\r\n    readonly priority: number;\r\n    data?: ArrayBuffer;\r\n    downloadBandwidth?: number;\r\n    requestUrl?: string;\r\n    responseUrl?: string;\r\n};\r\n\r\nexport enum Events {\r\n    /**\r\n     * Emitted when segment has been downloaded.\r\n     * Args: segment\r\n     */\r\n    SegmentLoaded = \"segment_loaded\",\r\n\r\n    /**\r\n     * Emitted when an error occurred while loading the segment.\r\n     * Args: segment, error\r\n     */\r\n    SegmentError = \"segment_error\",\r\n\r\n    /**\r\n     * Emitted for each segment that does not hit into a new segments queue when the load() method is called.\r\n     * Args: segment\r\n     */\r\n    SegmentAbort = \"segment_abort\",\r\n\r\n    /**\r\n     * Emitted when a peer is connected.\r\n     * Args: peer\r\n     */\r\n    PeerConnect = \"peer_connect\",\r\n\r\n    /**\r\n     * Emitted when a peer is disconnected.\r\n     * Args: peerId\r\n     */\r\n    PeerClose = \"peer_close\",\r\n\r\n    /**\r\n     * Emitted when a segment piece has been downloaded.\r\n     * Args: method (can be \"http\" or \"p2p\" only), bytes\r\n     */\r\n    PieceBytesDownloaded = \"piece_bytes_downloaded\",\r\n\r\n    /**\r\n     * Emitted when a segment piece has been uploaded.\r\n     * Args: method (can be \"p2p\" only), bytes\r\n     */\r\n    PieceBytesUploaded = \"piece_bytes_uploaded\",\r\n}\r\n\r\nexport interface LoaderInterface {\r\n    on: ((eventName: string, listener: (...params: unknown[]) => void) => this) &\r\n        ((eventName: Events.SegmentLoaded, listener: (segment: Segment) => void) => this) &\r\n        ((eventName: Events.SegmentError, listener: (segment: Segment, error: unknown) => void) => this) &\r\n        ((eventName: Events.SegmentAbort, listener: (segment: Segment) => void) => this);\r\n    load: (segments: Segment[], streamSwarmId: string) => void;\r\n    getSegment: (id: string) => Promise<Segment | undefined>;\r\n    getSettings: () => unknown;\r\n    getDetails: () => unknown;\r\n    destroy: () => Promise<void>;\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { EventEmitter } from \"events\";\r\n\r\nexport class STEEmitter<T extends string | symbol> extends EventEmitter {\r\n    public on = (event: T, listener: (...args: any[]) => void): this => super.on(event, listener);\r\n    public emit = (event: T, ...args: any[]): boolean => super.emit(event, ...args);\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Debug from \"debug\";\r\n\r\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\r\nimport { Segment } from \"./loader-interface\";\r\nimport { SegmentValidatorCallback, XhrSetupCallback, SegmentUrlBuilder } from \"./hybrid-loader\";\r\n\r\nexport class HttpMediaManager extends STEEmitter<\"segment-loaded\" | \"segment-error\" | \"bytes-downloaded\"> {\r\n    private xhrRequests = new Map<string, { xhr: XMLHttpRequest; segment: Segment }>();\r\n    private failedSegments = new Map<string, number>();\r\n    private debug = Debug(\"p2pml:http-media-manager\");\r\n\r\n    public constructor(\r\n        readonly settings: {\r\n            httpFailedSegmentTimeout: number;\r\n            httpUseRanges: boolean;\r\n            segmentValidator?: SegmentValidatorCallback;\r\n            xhrSetup?: XhrSetupCallback;\r\n            segmentUrlBuilder?: SegmentUrlBuilder;\r\n        }\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public download = (segment: Segment, downloadedPieces?: ArrayBuffer[]): void => {\r\n        if (this.isDownloading(segment)) {\r\n            return;\r\n        }\r\n\r\n        this.cleanTimedOutFailedSegments();\r\n\r\n        const segmentUrl = this.settings.segmentUrlBuilder ? this.settings.segmentUrlBuilder(segment) : segment.url;\r\n\r\n        this.debug(\"http segment download\", segmentUrl);\r\n\r\n        segment.requestUrl = segmentUrl;\r\n\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", segmentUrl, true);\r\n        xhr.responseType = \"arraybuffer\";\r\n\r\n        if (segment.range) {\r\n            xhr.setRequestHeader(\"Range\", segment.range);\r\n            downloadedPieces = undefined; // TODO: process downloadedPieces for segments with range headers too\r\n        } else if (downloadedPieces !== undefined && this.settings.httpUseRanges) {\r\n            let bytesDownloaded = 0;\r\n            for (const piece of downloadedPieces) {\r\n                bytesDownloaded += piece.byteLength;\r\n            }\r\n\r\n            xhr.setRequestHeader(\"Range\", `bytes=${bytesDownloaded}-`);\r\n\r\n            this.debug(\"continue download from\", bytesDownloaded);\r\n        } else {\r\n            downloadedPieces = undefined;\r\n        }\r\n\r\n        this.setupXhrEvents(xhr, segment, downloadedPieces);\r\n\r\n        if (this.settings.xhrSetup) {\r\n            this.settings.xhrSetup(xhr, segmentUrl);\r\n        }\r\n\r\n        this.xhrRequests.set(segment.id, { xhr, segment });\r\n        xhr.send();\r\n    };\r\n\r\n    public abort = (segment: Segment): void => {\r\n        const request = this.xhrRequests.get(segment.id);\r\n\r\n        if (request) {\r\n            request.xhr.abort();\r\n            this.xhrRequests.delete(segment.id);\r\n            this.debug(\"http segment abort\", segment.id);\r\n        }\r\n    };\r\n\r\n    public isDownloading = (segment: Segment): boolean => {\r\n        return this.xhrRequests.has(segment.id);\r\n    };\r\n\r\n    public isFailed = (segment: Segment): boolean => {\r\n        const time = this.failedSegments.get(segment.id);\r\n        return time !== undefined && time > this.now();\r\n    };\r\n\r\n    public getActiveDownloads = (): ReadonlyMap<string, { segment: Segment }> => {\r\n        return this.xhrRequests;\r\n    };\r\n\r\n    public getActiveDownloadsCount = (): number => {\r\n        return this.xhrRequests.size;\r\n    };\r\n\r\n    public destroy = (): void => {\r\n        this.xhrRequests.forEach((request) => request.xhr.abort());\r\n        this.xhrRequests.clear();\r\n    };\r\n\r\n    private setupXhrEvents = (xhr: XMLHttpRequest, segment: Segment, downloadedPieces?: ArrayBuffer[]) => {\r\n        let prevBytesLoaded = 0;\r\n\r\n        xhr.addEventListener(\"progress\", (event) => {\r\n            const bytesLoaded = event.loaded - prevBytesLoaded;\r\n            this.emit(\"bytes-downloaded\", bytesLoaded);\r\n            prevBytesLoaded = event.loaded;\r\n        });\r\n\r\n        xhr.addEventListener(\"load\", async (event) => {\r\n            if (xhr.status < 200 || xhr.status >= 300) {\r\n                this.segmentFailure(segment, event, xhr);\r\n                return;\r\n            }\r\n\r\n            let data = xhr.response as ArrayBuffer;\r\n\r\n            if (downloadedPieces !== undefined && xhr.status === 206) {\r\n                let bytesDownloaded = 0;\r\n                for (const piece of downloadedPieces) {\r\n                    bytesDownloaded += piece.byteLength;\r\n                }\r\n\r\n                const segmentData = new Uint8Array(bytesDownloaded + data.byteLength);\r\n                let offset = 0;\r\n\r\n                for (const piece of downloadedPieces) {\r\n                    segmentData.set(new Uint8Array(piece), offset);\r\n                    offset += piece.byteLength;\r\n                }\r\n\r\n                segmentData.set(new Uint8Array(data), offset);\r\n                data = segmentData.buffer;\r\n            }\r\n\r\n            await this.segmentDownloadFinished(segment, data, xhr);\r\n        });\r\n\r\n        xhr.addEventListener(\"error\", (event: unknown) => {\r\n            this.segmentFailure(segment, event, xhr);\r\n        });\r\n\r\n        xhr.addEventListener(\"timeout\", (event: unknown) => {\r\n            this.segmentFailure(segment, event, xhr);\r\n        });\r\n    };\r\n\r\n    private segmentDownloadFinished = async (segment: Segment, data: ArrayBuffer, xhr: XMLHttpRequest) => {\r\n        segment.responseUrl = xhr.responseURL === null ? undefined : xhr.responseURL;\r\n\r\n        if (this.settings.segmentValidator) {\r\n            try {\r\n                await this.settings.segmentValidator({ ...segment, data: data }, \"http\");\r\n            } catch (error) {\r\n                this.debug(\"segment validator failed\", error);\r\n                this.segmentFailure(segment, error, xhr);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.xhrRequests.delete(segment.id);\r\n        this.emit(\"segment-loaded\", segment, data);\r\n    };\r\n\r\n    private segmentFailure = (segment: Segment, error: unknown, xhr: XMLHttpRequest) => {\r\n        segment.responseUrl = xhr.responseURL === null ? undefined : xhr.responseURL;\r\n\r\n        this.xhrRequests.delete(segment.id);\r\n        this.failedSegments.set(segment.id, this.now() + this.settings.httpFailedSegmentTimeout);\r\n        this.emit(\"segment-error\", segment, error);\r\n    };\r\n\r\n    private cleanTimedOutFailedSegments = () => {\r\n        const now = this.now();\r\n        const candidates: string[] = [];\r\n\r\n        this.failedSegments.forEach((time, id) => {\r\n            if (time < now) {\r\n                candidates.push(id);\r\n            }\r\n        });\r\n\r\n        candidates.forEach((id) => this.failedSegments.delete(id));\r\n    };\r\n\r\n    private now = () => performance.now();\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-call */\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n\r\nimport Debug from \"debug\";\r\nimport { Buffer } from \"buffer\";\r\n\r\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\r\n\r\nenum MediaPeerCommands {\r\n    SegmentData,\r\n    SegmentAbsent,\r\n    SegmentsMap,\r\n    SegmentRequest,\r\n    CancelSegmentRequest,\r\n}\r\n\r\ntype MediaPeerCommand =\r\n    | {\r\n          c:\r\n              | MediaPeerCommands.SegmentAbsent\r\n              | MediaPeerCommands.SegmentRequest\r\n              | MediaPeerCommands.CancelSegmentRequest;\r\n          i: string;\r\n      }\r\n    | {\r\n          c: MediaPeerCommands.SegmentsMap;\r\n          m: { [key: string]: [string, number[]] };\r\n      }\r\n    | {\r\n          c: MediaPeerCommands.SegmentData;\r\n          i: string;\r\n          s: number;\r\n      };\r\n\r\nexport enum MediaPeerSegmentStatus {\r\n    Loaded,\r\n    LoadingByHttp,\r\n}\r\n\r\nclass DownloadingSegment {\r\n    public bytesDownloaded = 0;\r\n    public pieces: ArrayBuffer[] = [];\r\n    constructor(readonly id: string, readonly size: number) {}\r\n}\r\n\r\nexport class MediaPeer extends STEEmitter<\r\n    | \"connect\"\r\n    | \"close\"\r\n    | \"data-updated\"\r\n    | \"segment-request\"\r\n    | \"segment-absent\"\r\n    | \"segment-loaded\"\r\n    | \"segment-error\"\r\n    | \"segment-timeout\"\r\n    | \"bytes-downloaded\"\r\n    | \"bytes-uploaded\"\r\n> {\r\n    public id: string;\r\n    public remoteAddress = \"\";\r\n    private downloadingSegmentId: string | null = null;\r\n    private downloadingSegment: DownloadingSegment | null = null;\r\n    private segmentsMap = new Map<string, MediaPeerSegmentStatus>();\r\n    private debug = Debug(\"p2pml:media-peer\");\r\n    private timer: ReturnType<typeof setTimeout> | null = null;\r\n\r\n    constructor(\r\n        // eslint-disable-next-line\r\n        readonly peer: any,\r\n        readonly settings: {\r\n            p2pSegmentDownloadTimeout: number;\r\n            webRtcMaxMessageSize: number;\r\n        }\r\n    ) {\r\n        super();\r\n\r\n        this.peer.on(\"connect\", this.onPeerConnect);\r\n        this.peer.on(\"close\", this.onPeerClose);\r\n        this.peer.on(\"error\", this.onPeerError);\r\n        this.peer.on(\"data\", this.onPeerData);\r\n\r\n        this.id = peer.id;\r\n    }\r\n\r\n    private onPeerConnect = () => {\r\n        this.debug(\"peer connect\", this.id, this);\r\n        this.remoteAddress = this.peer.remoteAddress;\r\n        this.emit(\"connect\", this);\r\n    };\r\n\r\n    private onPeerClose = () => {\r\n        this.debug(\"peer close\", this.id, this);\r\n        this.terminateSegmentRequest();\r\n        this.emit(\"close\", this);\r\n    };\r\n\r\n    private onPeerError = (error: unknown) => {\r\n        this.debug(\"peer error\", this.id, error, this);\r\n    };\r\n\r\n    private receiveSegmentPiece = (data: ArrayBuffer): void => {\r\n        if (!this.downloadingSegment) {\r\n            // The segment was not requested or canceled\r\n            this.debug(\"peer segment not requested\", this.id, this);\r\n            return;\r\n        }\r\n\r\n        this.downloadingSegment.bytesDownloaded += data.byteLength;\r\n        this.downloadingSegment.pieces.push(data);\r\n        this.emit(\"bytes-downloaded\", this, data.byteLength);\r\n\r\n        const segmentId = this.downloadingSegment.id;\r\n\r\n        if (this.downloadingSegment.bytesDownloaded === this.downloadingSegment.size) {\r\n            const segmentData = new Uint8Array(this.downloadingSegment.size);\r\n            let offset = 0;\r\n            for (const piece of this.downloadingSegment.pieces) {\r\n                segmentData.set(new Uint8Array(piece), offset);\r\n                offset += piece.byteLength;\r\n            }\r\n\r\n            this.debug(\"peer segment download done\", this.id, segmentId, this);\r\n            this.terminateSegmentRequest();\r\n            this.emit(\"segment-loaded\", this, segmentId, segmentData.buffer);\r\n        } else if (this.downloadingSegment.bytesDownloaded > this.downloadingSegment.size) {\r\n            this.debug(\"peer segment download bytes mismatch\", this.id, segmentId, this);\r\n            this.terminateSegmentRequest();\r\n            this.emit(\"segment-error\", this, segmentId, \"Too many bytes received for segment\");\r\n        }\r\n    };\r\n\r\n    private getJsonCommand = (data: ArrayBuffer) => {\r\n        const bytes = new Uint8Array(data);\r\n\r\n        // Serialized JSON string check by first, second and last characters: '{\" .... }'\r\n        if (bytes[0] === 123 && bytes[1] === 34 && bytes[data.byteLength - 1] === 125) {\r\n            try {\r\n                return JSON.parse(new TextDecoder().decode(data)) as Record<string, unknown>;\r\n            } catch {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    private onPeerData = (data: ArrayBuffer) => {\r\n        const command = this.getJsonCommand(data);\r\n\r\n        if (command === null) {\r\n            this.receiveSegmentPiece(data);\r\n            return;\r\n        }\r\n\r\n        if (this.downloadingSegment) {\r\n            this.debug(\"peer segment download is interrupted by a command\", this.id, this);\r\n\r\n            const segmentId = this.downloadingSegment.id;\r\n            this.terminateSegmentRequest();\r\n            this.emit(\"segment-error\", this, segmentId, \"Segment download is interrupted by a command\");\r\n            return;\r\n        }\r\n\r\n        this.debug(\"peer receive command\", this.id, command, this);\r\n\r\n        switch (command.c) {\r\n            case MediaPeerCommands.SegmentsMap:\r\n                this.segmentsMap = this.createSegmentsMap(command.m);\r\n                this.emit(\"data-updated\");\r\n                break;\r\n\r\n            case MediaPeerCommands.SegmentRequest:\r\n                this.emit(\"segment-request\", this, command.i);\r\n                break;\r\n\r\n            case MediaPeerCommands.SegmentData:\r\n                if (\r\n                    this.downloadingSegmentId &&\r\n                    this.downloadingSegmentId === command.i &&\r\n                    typeof command.s === \"number\" &&\r\n                    command.s >= 0\r\n                ) {\r\n                    this.downloadingSegment = new DownloadingSegment(command.i, command.s);\r\n                    this.cancelResponseTimeoutTimer();\r\n                }\r\n                break;\r\n\r\n            case MediaPeerCommands.SegmentAbsent:\r\n                if (this.downloadingSegmentId && this.downloadingSegmentId === command.i) {\r\n                    this.terminateSegmentRequest();\r\n                    this.segmentsMap.delete(command.i);\r\n                    this.emit(\"segment-absent\", this, command.i);\r\n                }\r\n                break;\r\n\r\n            case MediaPeerCommands.CancelSegmentRequest:\r\n                // TODO: peer stop sending buffer\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    private createSegmentsMap = (segments: unknown) => {\r\n        if (!(segments instanceof Object)) {\r\n            return new Map<string, MediaPeerSegmentStatus>();\r\n        }\r\n\r\n        const segmentsMap = new Map<string, MediaPeerSegmentStatus>();\r\n\r\n        for (const streamSwarmId of Object.keys(segments)) {\r\n            const swarmData = (segments as Record<string, unknown>)[streamSwarmId];\r\n            if (\r\n                !(swarmData instanceof Array) ||\r\n                swarmData.length !== 2 ||\r\n                typeof swarmData[0] !== \"string\" ||\r\n                !(swarmData[1] instanceof Array)\r\n            ) {\r\n                return new Map<string, MediaPeerSegmentStatus>();\r\n            }\r\n\r\n            const segmentsIds = swarmData[0].split(\"|\");\r\n            const segmentsStatuses = swarmData[1] as MediaPeerSegmentStatus[];\r\n\r\n            if (segmentsIds.length !== segmentsStatuses.length) {\r\n                return new Map<string, MediaPeerSegmentStatus>();\r\n            }\r\n\r\n            for (let i = 0; i < segmentsIds.length; i++) {\r\n                const segmentStatus = segmentsStatuses[i];\r\n                if (typeof segmentStatus !== \"number\" || MediaPeerSegmentStatus[segmentStatus] === undefined) {\r\n                    return new Map<string, MediaPeerSegmentStatus>();\r\n                }\r\n\r\n                segmentsMap.set(`${streamSwarmId}+${segmentsIds[i]}`, segmentStatus);\r\n            }\r\n        }\r\n\r\n        return segmentsMap;\r\n    };\r\n\r\n    private sendCommand = (command: MediaPeerCommand): void => {\r\n        this.debug(\"peer send command\", this.id, command, this);\r\n        this.peer.write(JSON.stringify(command));\r\n    };\r\n\r\n    public destroy = (): void => {\r\n        this.debug(\"peer destroy\", this.id, this);\r\n        this.terminateSegmentRequest();\r\n        this.peer.destroy();\r\n    };\r\n\r\n    public getDownloadingSegmentId = (): string | null => {\r\n        return this.downloadingSegmentId;\r\n    };\r\n\r\n    public getSegmentsMap = (): Map<string, MediaPeerSegmentStatus> => {\r\n        return this.segmentsMap;\r\n    };\r\n\r\n    public sendSegmentsMap = (segmentsMap: { [key: string]: [string, number[]] }): void => {\r\n        this.sendCommand({ c: MediaPeerCommands.SegmentsMap, m: segmentsMap });\r\n    };\r\n\r\n    public sendSegmentData = (segmentId: string, data: ArrayBuffer): void => {\r\n        this.sendCommand({\r\n            c: MediaPeerCommands.SegmentData,\r\n            i: segmentId,\r\n            s: data.byteLength,\r\n        });\r\n\r\n        let bytesLeft = data.byteLength;\r\n        while (bytesLeft > 0) {\r\n            const bytesToSend =\r\n                bytesLeft >= this.settings.webRtcMaxMessageSize ? this.settings.webRtcMaxMessageSize : bytesLeft;\r\n            const buffer = Buffer.from(data, data.byteLength - bytesLeft, bytesToSend);\r\n\r\n            this.peer.write(buffer);\r\n            bytesLeft -= bytesToSend;\r\n        }\r\n\r\n        this.emit(\"bytes-uploaded\", this, data.byteLength);\r\n    };\r\n\r\n    public sendSegmentAbsent = (segmentId: string): void => {\r\n        this.sendCommand({ c: MediaPeerCommands.SegmentAbsent, i: segmentId });\r\n    };\r\n\r\n    public requestSegment = (segmentId: string): void => {\r\n        if (this.downloadingSegmentId) {\r\n            throw new Error(\"A segment is already downloading: \" + this.downloadingSegmentId);\r\n        }\r\n\r\n        this.sendCommand({ c: MediaPeerCommands.SegmentRequest, i: segmentId });\r\n        this.downloadingSegmentId = segmentId;\r\n        this.runResponseTimeoutTimer();\r\n    };\r\n\r\n    public cancelSegmentRequest = (): ArrayBuffer[] | undefined => {\r\n        let downloadingSegment: ArrayBuffer[] | undefined;\r\n\r\n        if (this.downloadingSegmentId) {\r\n            const segmentId = this.downloadingSegmentId;\r\n            downloadingSegment = this.downloadingSegment ? this.downloadingSegment.pieces : undefined;\r\n            this.terminateSegmentRequest();\r\n            this.sendCommand({ c: MediaPeerCommands.CancelSegmentRequest, i: segmentId });\r\n        }\r\n\r\n        return downloadingSegment;\r\n    };\r\n\r\n    private runResponseTimeoutTimer = (): void => {\r\n        this.timer = setTimeout(() => {\r\n            this.timer = null;\r\n            if (!this.downloadingSegmentId) {\r\n                return;\r\n            }\r\n            const segmentId = this.downloadingSegmentId;\r\n            this.cancelSegmentRequest();\r\n            this.emit(\"segment-timeout\", this, segmentId); // TODO: send peer not responding event\r\n        }, this.settings.p2pSegmentDownloadTimeout);\r\n    };\r\n\r\n    private cancelResponseTimeoutTimer = (): void => {\r\n        if (this.timer) {\r\n            clearTimeout(this.timer);\r\n            this.timer = null;\r\n        }\r\n    };\r\n\r\n    private terminateSegmentRequest = () => {\r\n        this.downloadingSegmentId = null;\r\n        this.downloadingSegment = null;\r\n        this.cancelResponseTimeoutTimer();\r\n    };\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\n/* eslint-disable @typescript-eslint/no-unsafe-call */\r\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\r\n\r\nimport Debug from \"debug\";\r\nimport Client from \"bittorrent-tracker/client\";\r\nimport { Buffer } from \"buffer\";\r\nimport sha1 from \"sha.js/sha1\";\r\n\r\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\r\nimport { Segment } from \"./loader-interface\";\r\nimport { MediaPeer, MediaPeerSegmentStatus } from \"./media-peer\";\r\nimport { version } from \"./index\";\r\nimport { SegmentsStorage, SegmentValidatorCallback } from \"./hybrid-loader\";\r\n\r\nconst PEER_PROTOCOL_VERSION = 2;\r\nconst PEER_ID_VERSION_STRING = '0.6.2'.replace(/\\d*./g, (v) => `0${parseInt(v, 10) % 100}`.slice(-2)).slice(0, 4);\r\nconst PEER_ID_VERSION_PREFIX = `-WW${PEER_ID_VERSION_STRING}-`; // Using WebTorrent client ID in order to not be banned by websocket trackers\r\n\r\nclass PeerSegmentRequest {\r\n    constructor(readonly peerId: string, readonly segment: Segment) {}\r\n}\r\n\r\nfunction generatePeerId(): ArrayBuffer {\r\n    const PEER_ID_SYMBOLS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    const PEER_ID_LENGTH = 20;\r\n\r\n    let peerId = PEER_ID_VERSION_PREFIX;\r\n\r\n    for (let i = 0; i < PEER_ID_LENGTH - PEER_ID_VERSION_PREFIX.length; i++) {\r\n        peerId += PEER_ID_SYMBOLS.charAt(Math.floor(Math.random() * PEER_ID_SYMBOLS.length));\r\n    }\r\n\r\n    return new TextEncoder().encode(peerId).buffer;\r\n}\r\n\r\nexport class P2PMediaManager extends STEEmitter<\r\n    | \"peer-connected\"\r\n    | \"peer-closed\"\r\n    | \"peer-data-updated\"\r\n    | \"segment-loaded\"\r\n    | \"segment-error\"\r\n    | \"bytes-downloaded\"\r\n    | \"bytes-uploaded\"\r\n    | \"tracker-update\"\r\n> {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    private trackerClient: any = null;\r\n    private peers = new Map<string, MediaPeer>();\r\n    private peerCandidates = new Map<string, MediaPeer[]>();\r\n    private peerSegmentRequests = new Map<string, PeerSegmentRequest>();\r\n    private streamSwarmId: string | null = null;\r\n    private readonly peerId: ArrayBuffer;\r\n    private debug = Debug(\"p2pml:p2p-media-manager\");\r\n    private pendingTrackerClient: {\r\n        isDestroyed: boolean;\r\n    } | null = null;\r\n    private masterSwarmId?: string;\r\n\r\n    public constructor(\r\n        private segmentsStorage: SegmentsStorage,\r\n        private settings: {\r\n            useP2P: boolean;\r\n            trackerAnnounce: string[];\r\n            p2pSegmentDownloadTimeout: number;\r\n            segmentValidator?: SegmentValidatorCallback;\r\n            webRtcMaxMessageSize: number;\r\n            rtcConfig?: RTCConfiguration;\r\n            peerRequestsPerAnnounce: number;\r\n        }\r\n    ) {\r\n        super();\r\n\r\n        this.peerId = settings.useP2P ? generatePeerId() : new ArrayBuffer(0);\r\n\r\n        if (this.debug.enabled) {\r\n            this.debug(\"peer ID\", this.getPeerId(), new TextDecoder().decode(this.peerId));\r\n        }\r\n    }\r\n\r\n    public getPeers = (): Map<string, MediaPeer> => {\r\n        return this.peers;\r\n    };\r\n\r\n    public getPeerId = (): string => {\r\n        return Buffer.from(this.peerId).toString(\"hex\");\r\n    };\r\n\r\n    public setStreamSwarmId = (streamSwarmId: string, masterSwarmId: string): void => {\r\n        if (this.streamSwarmId === streamSwarmId) {\r\n            return;\r\n        }\r\n\r\n        this.destroy(true);\r\n\r\n        this.streamSwarmId = streamSwarmId;\r\n        this.masterSwarmId = masterSwarmId;\r\n        this.debug(\"stream swarm ID\", this.streamSwarmId);\r\n\r\n        this.pendingTrackerClient = {\r\n            isDestroyed: false,\r\n        };\r\n\r\n        const pendingTrackerClient = this.pendingTrackerClient;\r\n\r\n        // TODO: native browser 'crypto.subtle' implementation doesn't work in Chrome in insecure pages\r\n        // TODO: Edge doesn't support SHA-1. Change to SHA-256 once Edge support is required.\r\n        // const infoHash = await crypto.subtle.digest(\"SHA-1\", new TextEncoder().encode(PEER_PROTOCOL_VERSION + this.streamSwarmId));\r\n\r\n        const infoHash = new sha1().update(`${PEER_PROTOCOL_VERSION}${this.streamSwarmId}`).digest();\r\n        \r\n\r\n        // destroy may be called while waiting for the hash to be calculated\r\n        if (!pendingTrackerClient.isDestroyed) {\r\n            this.pendingTrackerClient = null;\r\n            this.createClient(infoHash);\r\n        } else if (this.trackerClient !== null) {\r\n            this.trackerClient.destroy();\r\n            this.trackerClient = null;\r\n        }\r\n    };\r\n\r\n    private createClient = (infoHash: ArrayBuffer): void => {\r\n        if (!this.settings.useP2P) {\r\n            return;\r\n        }\r\n\r\n        const clientOptions = {\r\n            infoHash: Buffer.from(infoHash, 0, 20),\r\n            peerId: Buffer.from(this.peerId, 0, 20),\r\n            announce: this.settings.trackerAnnounce,\r\n            rtcConfig: this.settings.rtcConfig,\r\n            port: 6881, // a dummy value allows running in Node.js environment\r\n            getAnnounceOpts: () => {\r\n                return { numwant: this.settings.peerRequestsPerAnnounce };\r\n            },\r\n        };\r\n\r\n        let oldTrackerClient = this.trackerClient;\r\n\r\n        this.trackerClient = new Client(clientOptions);\r\n        this.trackerClient.on(\"error\", this.onTrackerError);\r\n        this.trackerClient.on(\"warning\", this.onTrackerWarning);\r\n        this.trackerClient.on(\"update\", this.onTrackerUpdate);\r\n        this.trackerClient.on(\"peer\", this.onTrackerPeer);\r\n\r\n        this.trackerClient.start();\r\n\r\n        if (oldTrackerClient !== null) {\r\n            oldTrackerClient.destroy();\r\n            oldTrackerClient = null;\r\n        }\r\n    };\r\n\r\n    private onTrackerError = (error: unknown) => {\r\n        this.debug(\"tracker error\", error);\r\n    };\r\n\r\n    private onTrackerWarning = (warning: unknown) => {\r\n        this.debug(\"tracker warning\", warning);\r\n    };\r\n\r\n    private onTrackerUpdate = (data: unknown): void => {\r\n        this.debug(\"tracker update\", data);\r\n        this.emit(\"tracker-update\", data);\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    private onTrackerPeer = (trackerPeer: any): void => {\r\n        this.debug(\"tracker peer\", trackerPeer.id, trackerPeer);\r\n\r\n        if (this.peers.has(trackerPeer.id)) {\r\n            this.debug(\"tracker peer already connected\", trackerPeer.id, trackerPeer);\r\n            trackerPeer.destroy();\r\n            return;\r\n        }\r\n\r\n        const peer = new MediaPeer(trackerPeer, this.settings);\r\n\r\n        peer.on(\"connect\", this.onPeerConnect);\r\n        peer.on(\"close\", this.onPeerClose);\r\n        peer.on(\"data-updated\", this.onPeerDataUpdated);\r\n        peer.on(\"segment-request\", this.onSegmentRequest);\r\n        peer.on(\"segment-loaded\", this.onSegmentLoaded);\r\n        peer.on(\"segment-absent\", this.onSegmentAbsent);\r\n        peer.on(\"segment-error\", this.onSegmentError);\r\n        peer.on(\"segment-timeout\", this.onSegmentTimeout);\r\n        peer.on(\"bytes-downloaded\", this.onPieceBytesDownloaded);\r\n        peer.on(\"bytes-uploaded\", this.onPieceBytesUploaded);\r\n\r\n        let peerCandidatesById = this.peerCandidates.get(peer.id);\r\n\r\n        if (!peerCandidatesById) {\r\n            peerCandidatesById = [];\r\n            this.peerCandidates.set(peer.id, peerCandidatesById);\r\n        }\r\n\r\n        peerCandidatesById.push(peer);\r\n    };\r\n\r\n    public download = (segment: Segment): boolean => {\r\n        if (this.isDownloading(segment)) {\r\n            return false;\r\n        }\r\n\r\n        const candidates: MediaPeer[] = [];\r\n\r\n        for (const peer of this.peers.values()) {\r\n            if (\r\n                peer.getDownloadingSegmentId() === null &&\r\n                peer.getSegmentsMap().get(segment.id) === MediaPeerSegmentStatus.Loaded\r\n            ) {\r\n                candidates.push(peer);\r\n            }\r\n        }\r\n\r\n        if (candidates.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        const peer = candidates[Math.floor(Math.random() * candidates.length)];\r\n        peer.requestSegment(segment.id);\r\n        this.peerSegmentRequests.set(segment.id, new PeerSegmentRequest(peer.id, segment));\r\n        return true;\r\n    };\r\n\r\n    public abort = (segment: Segment): ArrayBuffer[] | undefined => {\r\n        let downloadingSegment: ArrayBuffer[] | undefined;\r\n        const peerSegmentRequest = this.peerSegmentRequests.get(segment.id);\r\n        if (peerSegmentRequest) {\r\n            const peer = this.peers.get(peerSegmentRequest.peerId);\r\n            if (peer) {\r\n                downloadingSegment = peer.cancelSegmentRequest();\r\n            }\r\n            this.peerSegmentRequests.delete(segment.id);\r\n        }\r\n        return downloadingSegment;\r\n    };\r\n\r\n    public isDownloading = (segment: Segment): boolean => {\r\n        return this.peerSegmentRequests.has(segment.id);\r\n    };\r\n\r\n    public getActiveDownloadsCount = (): number => {\r\n        return this.peerSegmentRequests.size;\r\n    };\r\n\r\n    public destroy = (swarmChange = false): void => {\r\n        this.streamSwarmId = null;\r\n\r\n        if (this.trackerClient) {\r\n            this.trackerClient.stop();\r\n            if (swarmChange) {\r\n                // Don't destroy trackerClient to reuse its WebSocket connection to the tracker server\r\n                this.trackerClient.removeAllListeners(\"error\");\r\n                this.trackerClient.removeAllListeners(\"warning\");\r\n                this.trackerClient.removeAllListeners(\"update\");\r\n                this.trackerClient.removeAllListeners(\"peer\");\r\n            } else {\r\n                this.trackerClient.destroy();\r\n                this.trackerClient = null;\r\n            }\r\n        }\r\n\r\n        if (this.pendingTrackerClient) {\r\n            this.pendingTrackerClient.isDestroyed = true;\r\n            this.pendingTrackerClient = null;\r\n        }\r\n\r\n        this.peers.forEach((peer) => peer.destroy());\r\n        this.peers.clear();\r\n\r\n        this.peerSegmentRequests.clear();\r\n\r\n        for (const peerCandidateById of this.peerCandidates.values()) {\r\n            for (const peerCandidate of peerCandidateById) {\r\n                peerCandidate.destroy();\r\n            }\r\n        }\r\n        this.peerCandidates.clear();\r\n    };\r\n\r\n    public sendSegmentsMapToAll = (segmentsMap: { [key: string]: [string, number[]] }): void => {\r\n        this.peers.forEach((peer) => peer.sendSegmentsMap(segmentsMap));\r\n    };\r\n\r\n    public sendSegmentsMap = (peerId: string, segmentsMap: { [key: string]: [string, number[]] }): void => {\r\n        const peer = this.peers.get(peerId);\r\n        if (peer) {\r\n            peer.sendSegmentsMap(segmentsMap);\r\n        }\r\n    };\r\n\r\n    public getOverallSegmentsMap = (): Map<string, MediaPeerSegmentStatus> => {\r\n        const overallSegmentsMap = new Map<string, MediaPeerSegmentStatus>();\r\n\r\n        for (const peer of this.peers.values()) {\r\n            for (const [segmentId, segmentStatus] of peer.getSegmentsMap()) {\r\n                if (segmentStatus === MediaPeerSegmentStatus.Loaded) {\r\n                    overallSegmentsMap.set(segmentId, MediaPeerSegmentStatus.Loaded);\r\n                } else if (!overallSegmentsMap.get(segmentId)) {\r\n                    overallSegmentsMap.set(segmentId, MediaPeerSegmentStatus.LoadingByHttp);\r\n                }\r\n            }\r\n        }\r\n\r\n        return overallSegmentsMap;\r\n    };\r\n\r\n    private onPieceBytesDownloaded = (peer: MediaPeer, bytes: number) => {\r\n        this.emit(\"bytes-downloaded\", bytes, peer.id);\r\n    };\r\n\r\n    private onPieceBytesUploaded = (peer: MediaPeer, bytes: number) => {\r\n        this.emit(\"bytes-uploaded\", bytes, peer.id);\r\n    };\r\n\r\n    private onPeerConnect = (peer: MediaPeer) => {\r\n        const connectedPeer = this.peers.get(peer.id);\r\n\r\n        if (connectedPeer) {\r\n            this.debug(\"tracker peer already connected (in peer connect)\", peer.id, peer);\r\n            peer.destroy();\r\n            return;\r\n        }\r\n\r\n        // First peer with the ID connected\r\n        this.peers.set(peer.id, peer);\r\n\r\n        // Destroy all other peer candidates\r\n        const peerCandidatesById = this.peerCandidates.get(peer.id);\r\n        if (peerCandidatesById) {\r\n            for (const peerCandidate of peerCandidatesById) {\r\n                if (peerCandidate !== peer) {\r\n                    peerCandidate.destroy();\r\n                }\r\n            }\r\n\r\n            this.peerCandidates.delete(peer.id);\r\n        }\r\n\r\n        this.emit(\"peer-connected\", { id: peer.id, remoteAddress: peer.remoteAddress });\r\n    };\r\n\r\n    private onPeerClose = (peer: MediaPeer) => {\r\n        if (this.peers.get(peer.id) !== peer) {\r\n            // Try to delete the peer candidate\r\n\r\n            const peerCandidatesById = this.peerCandidates.get(peer.id);\r\n            if (!peerCandidatesById) {\r\n                return;\r\n            }\r\n\r\n            const index = peerCandidatesById.indexOf(peer);\r\n            if (index !== -1) {\r\n                peerCandidatesById.splice(index, 1);\r\n            }\r\n\r\n            if (peerCandidatesById.length === 0) {\r\n                this.peerCandidates.delete(peer.id);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        for (const [key, value] of this.peerSegmentRequests) {\r\n            if (value.peerId === peer.id) {\r\n                this.peerSegmentRequests.delete(key);\r\n            }\r\n        }\r\n\r\n        this.peers.delete(peer.id);\r\n        this.emit(\"peer-data-updated\");\r\n        this.emit(\"peer-closed\", peer.id);\r\n    };\r\n\r\n    private onPeerDataUpdated = () => {\r\n        this.emit(\"peer-data-updated\");\r\n    };\r\n\r\n    private onSegmentRequest = async (peer: MediaPeer, segmentId: string) => {\r\n        if (this.masterSwarmId === undefined) {\r\n            return;\r\n        }\r\n\r\n        const segment = await this.segmentsStorage.getSegment(segmentId, this.masterSwarmId);\r\n        if (segment && segment.data) {\r\n            peer.sendSegmentData(segmentId, segment.data);\r\n        } else {\r\n            peer.sendSegmentAbsent(segmentId);\r\n        }\r\n    };\r\n\r\n    private onSegmentLoaded = async (peer: MediaPeer, segmentId: string, data: ArrayBuffer) => {\r\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n        if (!peerSegmentRequest) {\r\n            return;\r\n        }\r\n\r\n        const segment = peerSegmentRequest.segment;\r\n\r\n        if (this.settings.segmentValidator) {\r\n            try {\r\n                await this.settings.segmentValidator({ ...segment, data: data }, \"p2p\", peer.id);\r\n            } catch (error) {\r\n                this.debug(\"segment validator failed\", error);\r\n                this.peerSegmentRequests.delete(segmentId);\r\n                this.emit(\"segment-error\", segment, error, peer.id);\r\n                this.onPeerClose(peer);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.peerSegmentRequests.delete(segmentId);\r\n        this.emit(\"segment-loaded\", segment, data, peer.id);\r\n    };\r\n\r\n    private onSegmentAbsent = (peer: MediaPeer, segmentId: string) => {\r\n        this.peerSegmentRequests.delete(segmentId);\r\n        this.emit(\"peer-data-updated\");\r\n    };\r\n\r\n    private onSegmentError = (peer: MediaPeer, segmentId: string, description: string) => {\r\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n        if (peerSegmentRequest) {\r\n            this.peerSegmentRequests.delete(segmentId);\r\n            this.emit(\"segment-error\", peerSegmentRequest.segment, description, peer.id);\r\n        }\r\n    };\r\n\r\n    private onSegmentTimeout = (peer: MediaPeer, segmentId: string) => {\r\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\r\n        if (peerSegmentRequest) {\r\n            this.peerSegmentRequests.delete(segmentId);\r\n            peer.destroy();\r\n            if (this.peers.delete(peerSegmentRequest.peerId)) {\r\n                this.emit(\"peer-data-updated\");\r\n            }\r\n        }\r\n    };\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst SMOOTH_INTERVAL = 15 * 1000;\r\nconst MEASURE_INTERVAL = 60 * 1000;\r\n\r\nclass NumberWithTime {\r\n    constructor(readonly value: number, readonly timeStamp: number) {}\r\n}\r\n\r\nexport class BandwidthApproximator {\r\n    private lastBytes: NumberWithTime[] = [];\r\n    private currentBytesSum = 0;\r\n    private lastBandwidth: NumberWithTime[] = [];\r\n\r\n    public addBytes = (bytes: number, timeStamp: number): void => {\r\n        this.lastBytes.push(new NumberWithTime(bytes, timeStamp));\r\n        this.currentBytesSum += bytes;\r\n\r\n        while (timeStamp - this.lastBytes[0].timeStamp > SMOOTH_INTERVAL) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.currentBytesSum -= this.lastBytes.shift()!.value;\r\n        }\r\n\r\n        const interval = Math.min(SMOOTH_INTERVAL, timeStamp);\r\n        this.lastBandwidth.push(new NumberWithTime(this.currentBytesSum / interval, timeStamp));\r\n    };\r\n\r\n    // in bytes per millisecond\r\n    public getBandwidth = (timeStamp: number): number => {\r\n        while (this.lastBandwidth.length !== 0 && timeStamp - this.lastBandwidth[0].timeStamp > MEASURE_INTERVAL) {\r\n            this.lastBandwidth.shift();\r\n        }\r\n\r\n        let maxBandwidth = 0;\r\n        for (const bandwidth of this.lastBandwidth) {\r\n            if (bandwidth.value > maxBandwidth) {\r\n                maxBandwidth = bandwidth.value;\r\n            }\r\n        }\r\n\r\n        return maxBandwidth;\r\n    };\r\n\r\n    public getSmoothInterval = (): number => {\r\n        return SMOOTH_INTERVAL;\r\n    };\r\n\r\n    public getMeasureInterval = (): number => {\r\n        return MEASURE_INTERVAL;\r\n    };\r\n}\r\n","/**\r\n * Copyright 2019 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Segment } from \"./loader-interface\";\r\nimport { SegmentsStorage } from \"./hybrid-loader\";\r\n\r\nexport class SegmentsMemoryStorage implements SegmentsStorage {\r\n    private cache = new Map<string, { segment: Segment; lastAccessed: number }>();\r\n\r\n    constructor(\r\n        private settings: {\r\n            cachedSegmentExpiration: number;\r\n            cachedSegmentsCount: number;\r\n        }\r\n    ) {}\r\n\r\n    public storeSegment = async (segment: Segment): Promise<void> => {\r\n        this.cache.set(segment.id, { segment, lastAccessed: performance.now() });\r\n    };\r\n\r\n    public getSegmentsMap = async (): Promise<Map<string, { segment: Segment }>> => {\r\n        return this.cache;\r\n    };\r\n\r\n    public getSegment = async (id: string): Promise<Segment | undefined> => {\r\n        const cacheItem = this.cache.get(id);\r\n\r\n        if (cacheItem === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        cacheItem.lastAccessed = performance.now();\r\n        return cacheItem.segment;\r\n    };\r\n\r\n    public hasSegment = async (id: string): Promise<boolean> => {\r\n        return this.cache.has(id);\r\n    };\r\n\r\n    public clean = async (masterSwarmId: string, lockedSegmentsFilter?: (id: string) => boolean): Promise<boolean> => {\r\n        const segmentsToDelete: string[] = [];\r\n        const remainingSegments: { segment: Segment; lastAccessed: number }[] = [];\r\n\r\n        // Delete old segments\r\n        const now = performance.now();\r\n\r\n        for (const cachedSegment of this.cache.values()) {\r\n            if (now - cachedSegment.lastAccessed > this.settings.cachedSegmentExpiration) {\r\n                segmentsToDelete.push(cachedSegment.segment.id);\r\n            } else {\r\n                remainingSegments.push(cachedSegment);\r\n            }\r\n        }\r\n\r\n        // Delete segments over cached count\r\n        let countOverhead = remainingSegments.length - this.settings.cachedSegmentsCount;\r\n        if (countOverhead > 0) {\r\n            remainingSegments.sort((a, b) => a.lastAccessed - b.lastAccessed);\r\n\r\n            for (const cachedSegment of remainingSegments) {\r\n                if (lockedSegmentsFilter === undefined || !lockedSegmentsFilter(cachedSegment.segment.id)) {\r\n                    segmentsToDelete.push(cachedSegment.segment.id);\r\n                    countOverhead--;\r\n                    if (countOverhead === 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        segmentsToDelete.forEach((id) => this.cache.delete(id));\r\n        return segmentsToDelete.length > 0;\r\n    };\r\n\r\n    public destroy = async (): Promise<void> => {\r\n        this.cache.clear();\r\n    };\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport Debug from \"debug\";\r\nimport { EventEmitter } from \"events\";\r\nimport Peer from \"simple-peer\";\r\n\r\nimport { LoaderInterface, Events, Segment } from \"./loader-interface\";\r\nimport { HttpMediaManager } from \"./http-media-manager\";\r\nimport { P2PMediaManager } from \"./p2p-media-manager\";\r\nimport { MediaPeerSegmentStatus } from \"./media-peer\";\r\nimport { BandwidthApproximator } from \"./bandwidth-approximator\";\r\nimport { SegmentsMemoryStorage } from \"./segments-memory-storage\";\r\n\r\nconst defaultSettings: HybridLoaderSettings = {\r\n    cachedSegmentExpiration: 5 * 60 * 1000,\r\n    cachedSegmentsCount: 30,\r\n\r\n    useP2P: true,\r\n    consumeOnly: false,\r\n\r\n    requiredSegmentsPriority: 1,\r\n\r\n    simultaneousHttpDownloads: 2,\r\n    httpDownloadProbability: 0.1,\r\n    httpDownloadProbabilityInterval: 1000,\r\n    httpDownloadProbabilitySkipIfNoPeers: false,\r\n    httpFailedSegmentTimeout: 10000,\r\n    httpDownloadMaxPriority: 20,\r\n    httpDownloadInitialTimeout: 0,\r\n    httpDownloadInitialTimeoutPerSegment: 4000,\r\n    httpUseRanges: false,\r\n\r\n    simultaneousP2PDownloads: 3,\r\n    p2pDownloadMaxPriority: 20,\r\n    p2pSegmentDownloadTimeout: 60000,\r\n\r\n    webRtcMaxMessageSize: 64 * 1024 - 1,\r\n    trackerAnnounce: [\"wss://tracker.novage.com.ua\", \"wss://tracker.openwebtorrent.com\"],\r\n    peerRequestsPerAnnounce: 10,\r\n    rtcConfig: (Peer as { config: RTCConfiguration }).config,\r\n};\r\n\r\nexport class HybridLoader extends EventEmitter implements LoaderInterface {\r\n    private readonly debug = Debug(\"p2pml:hybrid-loader\");\r\n    private readonly debugSegments = Debug(\"p2pml:hybrid-loader-segments\");\r\n    private readonly httpManager: HttpMediaManager;\r\n    private readonly p2pManager: P2PMediaManager;\r\n    private segmentsStorage: SegmentsStorage;\r\n    private segmentsQueue: Segment[] = [];\r\n    private readonly bandwidthApproximator = new BandwidthApproximator();\r\n    private readonly settings: HybridLoaderSettings;\r\n    private httpRandomDownloadInterval: ReturnType<typeof setInterval> | undefined;\r\n    private httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n    private masterSwarmId?: string;\r\n\r\n    public static isSupported = (): boolean => {\r\n        return window.RTCPeerConnection.prototype.createDataChannel !== undefined;\r\n    };\r\n\r\n    public constructor(settings: Partial<HybridLoaderSettings> = {}) {\r\n        super();\r\n\r\n        \r\n\r\n        this.settings = { ...defaultSettings, ...settings };\r\n\r\n        const { bufferedSegmentsCount } = settings as Record<string, unknown>;\r\n\r\n        if (typeof bufferedSegmentsCount === \"number\") {\r\n            if (settings.p2pDownloadMaxPriority === undefined) {\r\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\r\n            }\r\n\r\n            if (settings.httpDownloadMaxPriority === undefined) {\r\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\r\n            }\r\n        }\r\n\r\n        this.debug.enabled = true\r\n        this.debugSegments.enabled = true\r\n\r\n        this.segmentsStorage =\r\n            this.settings.segmentsStorage === undefined\r\n                ? new SegmentsMemoryStorage(this.settings)\r\n                : this.settings.segmentsStorage;\r\n\r\n        this.debug(\"loader settings\", this.settings);\r\n        \r\n        this.httpManager = this.createHttpManager();\r\n        this.httpManager.on(\"segment-loaded\", this.onSegmentLoaded);\r\n        this.httpManager.on(\"segment-error\", this.onSegmentError);\r\n        this.httpManager.on(\"bytes-downloaded\", (bytes: number) => this.onPieceBytesDownloaded(\"http\", bytes));\r\n\r\n        this.p2pManager = this.createP2PManager();\r\n        this.p2pManager.on(\"segment-loaded\", this.onSegmentLoaded);\r\n        this.p2pManager.on(\"segment-error\", this.onSegmentError);\r\n        this.p2pManager.on(\"peer-data-updated\", async () => {\r\n\r\n            if (this.masterSwarmId === undefined) {\r\n                return;\r\n            }\r\n\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        });\r\n        this.p2pManager.on(\"bytes-downloaded\", (bytes: number, peerId: string) =>\r\n            this.onPieceBytesDownloaded(\"p2p\", bytes, peerId)\r\n        );\r\n        this.p2pManager.on(\"bytes-uploaded\", (bytes: number, peerId: string) =>\r\n            this.onPieceBytesUploaded(\"p2p\", bytes, peerId)\r\n        );\r\n        this.p2pManager.on(\"peer-connected\", this.onPeerConnect);\r\n        this.p2pManager.on(\"peer-closed\", this.onPeerClose);\r\n        this.p2pManager.on(\"tracker-update\", this.onTrackerUpdate);\r\n\r\n    }\r\n\r\n    private createHttpManager = () => {\r\n        return new HttpMediaManager(this.settings);\r\n    };\r\n\r\n    private createP2PManager = () => {\r\n        return new P2PMediaManager(this.segmentsStorage, this.settings);\r\n    };\r\n\r\n    public load = async (segments: Segment[], streamSwarmId: string): Promise<void> => {\r\n        if (this.httpRandomDownloadInterval === undefined) {\r\n            // Do once on first call\r\n            this.httpRandomDownloadInterval = setInterval(\r\n                this.downloadRandomSegmentOverHttp,\r\n                this.settings.httpDownloadProbabilityInterval\r\n            );\r\n\r\n            if (\r\n                this.settings.httpDownloadInitialTimeout > 0 &&\r\n                this.settings.httpDownloadInitialTimeoutPerSegment > 0\r\n            ) {\r\n                // Initialize initial HTTP download timeout (i.e. download initial segments over P2P)\r\n                this.debugSegments(\r\n                    \"enable initial HTTP download timeout\",\r\n                    this.settings.httpDownloadInitialTimeout,\r\n                    \"per segment\",\r\n                    this.settings.httpDownloadInitialTimeoutPerSegment\r\n                );\r\n                this.httpDownloadInitialTimeoutTimestamp = this.now();\r\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment + 100);\r\n            }\r\n        }\r\n\r\n        if (segments.length > 0) {\r\n            this.masterSwarmId = segments[0].masterSwarmId;\r\n        }\r\n\r\n\r\n        if (this.masterSwarmId !== undefined) {\r\n            this.p2pManager.setStreamSwarmId(streamSwarmId, this.masterSwarmId);\r\n        }\r\n\r\n        this.debug(\"load segments\");\r\n\r\n        let updateSegmentsMap = false;\r\n\r\n        // stop all http requests and p2p downloads for segments that are not in the new load\r\n        for (const segment of this.segmentsQueue) {\r\n            if (!segments.find((f) => f.url === segment.url)) {\r\n                this.debug(\"remove segment\", segment.url);\r\n                if (this.httpManager.isDownloading(segment)) {\r\n                    updateSegmentsMap = true;\r\n                    this.httpManager.abort(segment);\r\n                } else {\r\n                    this.p2pManager.abort(segment);\r\n                }\r\n                this.emit(Events.SegmentAbort, segment);\r\n            }\r\n        }\r\n\r\n        if (this.debug.enabled) {\r\n            for (const segment of segments) {\r\n                if (!this.segmentsQueue.find((f) => f.url === segment.url)) {\r\n                    this.debug(\"add segment\", segment.url);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.segmentsQueue = segments;\r\n\r\n        if (this.masterSwarmId === undefined) {\r\n            return;\r\n        }\r\n\r\n        let storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n        updateSegmentsMap = this.processSegmentsQueue(storageSegments) || updateSegmentsMap;\r\n\r\n        if (await this.cleanSegmentsStorage()) {\r\n            storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            updateSegmentsMap = true;\r\n        }\r\n\r\n        if (updateSegmentsMap && !this.settings.consumeOnly) {\r\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n        }\r\n    };\r\n\r\n    public getSegment = async (id: string): Promise<Segment | undefined> => {\r\n        return this.masterSwarmId === undefined ? undefined : this.segmentsStorage.getSegment(id, this.masterSwarmId);\r\n    };\r\n\r\n    public getSettings = (): HybridLoaderSettings => {\r\n        return this.settings;\r\n    };\r\n\r\n    public getDetails = (): { peerId: string } => {\r\n        return {\r\n            peerId: this.p2pManager.getPeerId(),\r\n        };\r\n    };\r\n\r\n    public destroy = async (): Promise<void> => {\r\n        if (this.httpRandomDownloadInterval !== undefined) {\r\n            clearInterval(this.httpRandomDownloadInterval);\r\n            this.httpRandomDownloadInterval = undefined;\r\n        }\r\n\r\n        this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n\r\n        this.segmentsQueue = [];\r\n        this.httpManager.destroy();\r\n        this.p2pManager.destroy();\r\n        this.masterSwarmId = undefined;\r\n        await this.segmentsStorage.destroy();\r\n    };\r\n\r\n    private processInitialSegmentTimeout = async () => {\r\n        if (this.httpRandomDownloadInterval === undefined) {\r\n            return; // Instance destroyed\r\n        }\r\n\r\n        if (this.masterSwarmId !== undefined) {\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n\r\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        }\r\n\r\n        if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\r\n            // Set one more timeout for a next segment\r\n            setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment);\r\n        }\r\n    };\r\n\r\n    private processSegmentsQueue = (storageSegments: Map<string, { segment: Segment }>) => {\r\n        this.debugSegments(\r\n            \"process segments queue. priority\",\r\n            this.segmentsQueue.length > 0 ? this.segmentsQueue[0].priority : 0\r\n        );\r\n\r\n        if (this.masterSwarmId === undefined || this.segmentsQueue.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        let updateSegmentsMap = false;\r\n        let segmentsMap: Map<string, MediaPeerSegmentStatus> | undefined;\r\n\r\n        let httpAllowed = true;\r\n\r\n        if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\r\n            let firstNotDownloadePriority: number | undefined;\r\n\r\n            for (const segment of this.segmentsQueue) {\r\n                if (!storageSegments.has(segment.id)) {\r\n                    firstNotDownloadePriority = segment.priority;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            const httpTimeout = this.now() - this.httpDownloadInitialTimeoutTimestamp;\r\n            httpAllowed =\r\n                httpTimeout >= this.settings.httpDownloadInitialTimeout ||\r\n                (firstNotDownloadePriority !== undefined &&\r\n                    httpTimeout > this.settings.httpDownloadInitialTimeoutPerSegment &&\r\n                    firstNotDownloadePriority <= 0);\r\n\r\n            if (httpAllowed) {\r\n                this.debugSegments(\"cancel initial HTTP download timeout - timed out\");\r\n                this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this.segmentsQueue.length; index++) {\r\n            const segment = this.segmentsQueue[index];\r\n\r\n            if (storageSegments.has(segment.id) || this.httpManager.isDownloading(segment)) {\r\n                continue;\r\n            }\r\n\r\n            if (\r\n                segment.priority <= this.settings.requiredSegmentsPriority &&\r\n                httpAllowed &&\r\n                !this.httpManager.isFailed(segment)\r\n            ) {\r\n                // Download required segments over HTTP\r\n                if (this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads) {\r\n                    // Not enough HTTP download resources. Abort one of the HTTP downloads.\r\n                    for (let i = this.segmentsQueue.length - 1; i > index; i--) {\r\n                        const segmentToAbort = this.segmentsQueue[i];\r\n                        if (this.httpManager.isDownloading(segmentToAbort)) {\r\n                            this.debugSegments(\"cancel HTTP download\", segmentToAbort.priority, segmentToAbort.url);\r\n                            this.httpManager.abort(segmentToAbort);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.httpManager.getActiveDownloadsCount() < this.settings.simultaneousHttpDownloads) {\r\n                    // Abort P2P download of the required segment if any and force HTTP download\r\n                    const downloadedPieces = this.p2pManager.abort(segment);\r\n                    this.httpManager.download(segment, downloadedPieces);\r\n                    this.debugSegments(\"HTTP download (priority)\", segment.priority, segment.url);\r\n                    updateSegmentsMap = true;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (this.p2pManager.isDownloading(segment)) {\r\n                continue;\r\n            }\r\n\r\n            if (segment.priority <= this.settings.requiredSegmentsPriority) {\r\n                // Download required segments over P2P\r\n                segmentsMap = segmentsMap ? segmentsMap : this.p2pManager.getOverallSegmentsMap();\r\n\r\n                if (segmentsMap.get(segment.id) !== MediaPeerSegmentStatus.Loaded) {\r\n                    continue;\r\n                }\r\n\r\n                if (this.p2pManager.getActiveDownloadsCount() >= this.settings.simultaneousP2PDownloads) {\r\n                    // Not enough P2P download resources. Abort one of the P2P downloads.\r\n                    for (let i = this.segmentsQueue.length - 1; i > index; i--) {\r\n                        const segmentToAbort = this.segmentsQueue[i];\r\n                        if (this.p2pManager.isDownloading(segmentToAbort)) {\r\n                            this.debugSegments(\"cancel P2P download\", segmentToAbort.priority, segmentToAbort.url);\r\n                            this.p2pManager.abort(segmentToAbort);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads) {\r\n                    if (this.p2pManager.download(segment)) {\r\n                        this.debugSegments(\"P2P download (priority)\", segment.priority, segment.url);\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (\r\n                this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads &&\r\n                segment.priority <= this.settings.p2pDownloadMaxPriority\r\n            ) {\r\n                if (this.p2pManager.download(segment)) {\r\n                    this.debugSegments(\"P2P download\", segment.priority, segment.url);\r\n                }\r\n            }\r\n        }\r\n\r\n        return updateSegmentsMap;\r\n    };\r\n\r\n    private downloadRandomSegmentOverHttp = async () => {\r\n        if (\r\n            this.masterSwarmId === undefined ||\r\n            this.httpRandomDownloadInterval === undefined ||\r\n            this.httpDownloadInitialTimeoutTimestamp !== -Infinity ||\r\n            this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads ||\r\n            (this.settings.httpDownloadProbabilitySkipIfNoPeers && this.p2pManager.getPeers().size === 0) ||\r\n            this.settings.consumeOnly\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n        const segmentsMap = this.p2pManager.getOverallSegmentsMap();\r\n\r\n        const pendingQueue = this.segmentsQueue.filter(\r\n            (s) =>\r\n                !this.p2pManager.isDownloading(s) &&\r\n                !this.httpManager.isDownloading(s) &&\r\n                !segmentsMap.has(s.id) &&\r\n                !this.httpManager.isFailed(s) &&\r\n                s.priority <= this.settings.httpDownloadMaxPriority &&\r\n                !storageSegments.has(s.id)\r\n        );\r\n\r\n        if (pendingQueue.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (Math.random() > this.settings.httpDownloadProbability * pendingQueue.length) {\r\n            return;\r\n        }\r\n\r\n        const segment = pendingQueue[Math.floor(Math.random() * pendingQueue.length)];\r\n        this.debugSegments(\"HTTP download (random)\", segment.priority, segment.url);\r\n        this.httpManager.download(segment);\r\n        this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n    };\r\n\r\n    private onPieceBytesDownloaded = (method: \"http\" | \"p2p\", bytes: number, peerId?: string) => {\r\n        this.bandwidthApproximator.addBytes(bytes, this.now());\r\n        this.emit(Events.PieceBytesDownloaded, method, bytes, peerId);\r\n    };\r\n\r\n    private onPieceBytesUploaded = (method: \"p2p\", bytes: number, peerId?: string) => {\r\n        this.emit(Events.PieceBytesUploaded, method, bytes, peerId);\r\n    };\r\n\r\n    private onSegmentLoaded = async (segment: Segment, data: ArrayBuffer, peerId?: string) => {\r\n        this.debugSegments(\"segment loaded\", segment.id, segment.url);\r\n\r\n        if (this.masterSwarmId === undefined) {\r\n            return;\r\n        }\r\n\r\n        segment.data = data;\r\n        segment.downloadBandwidth = this.bandwidthApproximator.getBandwidth(this.now());\r\n\r\n        await this.segmentsStorage.storeSegment(segment);\r\n        this.emit(Events.SegmentLoaded, segment, peerId);\r\n\r\n        const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n\r\n        this.processSegmentsQueue(storageSegments);\r\n        if (!this.settings.consumeOnly) {\r\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n        }\r\n    };\r\n\r\n    private onSegmentError = async (segment: Segment, details: unknown, peerId?: string) => {\r\n        this.debugSegments(\"segment error\", segment.id, segment.url, peerId, details);\r\n        this.emit(Events.SegmentError, segment, details, peerId);\r\n        if (this.masterSwarmId !== undefined) {\r\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n            }\r\n        }\r\n    };\r\n\r\n    private getStreamSwarmId = (segment: Segment) => {\r\n        return segment.streamId === undefined ? segment.masterSwarmId : `${segment.masterSwarmId}+${segment.streamId}`;\r\n    };\r\n\r\n    private createSegmentsMap = (storageSegments: Map<string, { segment: Segment }>) => {\r\n        const segmentsMap: { [key: string]: [string, number[]] } = {};\r\n\r\n        const addSegmentToMap = (segment: Segment, status: MediaPeerSegmentStatus) => {\r\n            const streamSwarmId = this.getStreamSwarmId(segment);\r\n            const segmentId = segment.sequence;\r\n\r\n            let segmentsIdsAndStatuses = segmentsMap[streamSwarmId];\r\n            if (segmentsIdsAndStatuses === undefined) {\r\n                segmentsIdsAndStatuses = [\"\", []];\r\n                segmentsMap[streamSwarmId] = segmentsIdsAndStatuses;\r\n            }\r\n            const segmentsStatuses = segmentsIdsAndStatuses[1];\r\n            segmentsIdsAndStatuses[0] += segmentsStatuses.length === 0 ? segmentId : `|${segmentId}`;\r\n            segmentsStatuses.push(status);\r\n        };\r\n\r\n        for (const storageSegment of storageSegments.values()) {\r\n            addSegmentToMap(storageSegment.segment, MediaPeerSegmentStatus.Loaded);\r\n        }\r\n\r\n        for (const download of this.httpManager.getActiveDownloads().values()) {\r\n            addSegmentToMap(download.segment, MediaPeerSegmentStatus.LoadingByHttp);\r\n        }\r\n\r\n        return segmentsMap;\r\n    };\r\n\r\n    private onPeerConnect = async (peer: { id: string }) => {\r\n\r\n\r\n        this.emit(Events.PeerConnect, peer);\r\n        if (!this.settings.consumeOnly && this.masterSwarmId !== undefined) {\r\n            this.p2pManager.sendSegmentsMap(\r\n                peer.id,\r\n                this.createSegmentsMap(await this.segmentsStorage.getSegmentsMap(this.masterSwarmId))\r\n            );\r\n        }\r\n    };\r\n\r\n    private onPeerClose = (peerId: string) => {\r\n        this.emit(Events.PeerClose, peerId);\r\n    };\r\n\r\n    private onTrackerUpdate = async (data: { incomplete?: number }) => {\r\n        if (\r\n            this.httpDownloadInitialTimeoutTimestamp !== -Infinity &&\r\n            data.incomplete !== undefined &&\r\n            data.incomplete <= 1\r\n        ) {\r\n            this.debugSegments(\"cancel initial HTTP download timeout - no peers\");\r\n\r\n            this.httpDownloadInitialTimeoutTimestamp = -Infinity;\r\n\r\n            if (this.masterSwarmId !== undefined) {\r\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\r\n\r\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\r\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    private cleanSegmentsStorage = async (): Promise<boolean> => {\r\n        if (this.masterSwarmId === undefined) {\r\n            return false;\r\n        }\r\n\r\n        return this.segmentsStorage.clean(\r\n            this.masterSwarmId,\r\n            (id: string) => this.segmentsQueue.find((queueSegment) => queueSegment.id === id) !== undefined\r\n        );\r\n    };\r\n\r\n    private now = () => {\r\n        return performance.now();\r\n    };\r\n}\r\n\r\nexport interface SegmentsStorage {\r\n    storeSegment: (segment: Segment) => Promise<void>;\r\n    getSegmentsMap: (masterSwarmId: string) => Promise<Map<string, { segment: Segment }>>;\r\n    getSegment: (id: string, masterSwarmId: string) => Promise<Segment | undefined>;\r\n    clean: (masterSwarmId: string, lockedSegmentsFilter?: (id: string) => boolean) => Promise<boolean>;\r\n    destroy: () => Promise<void>;\r\n}\r\n\r\nexport type SegmentValidatorCallback = (segment: Segment, method: \"http\" | \"p2p\", peerId?: string) => Promise<void>;\r\nexport type XhrSetupCallback = (xhr: XMLHttpRequest, url: string) => void;\r\nexport type SegmentUrlBuilder = (segment: Segment) => string;\r\n\r\nexport type HybridLoaderSettings = {\r\n    /**\r\n     * Segment lifetime in cache. The segment is deleted from the cache if the last access time is greater than this value (in milliseconds).\r\n     */\r\n    cachedSegmentExpiration: number;\r\n\r\n    /**\r\n     * Max number of segments that can be stored in the cache.\r\n     */\r\n    cachedSegmentsCount: number;\r\n\r\n    /**\r\n     * Enable/Disable peers interaction.\r\n     */\r\n    useP2P: boolean;\r\n\r\n    /**\r\n     * The peer will not upload segments data to the P2P network but still download from others.\r\n     */\r\n    consumeOnly: boolean;\r\n\r\n    /**\r\n     * The maximum priority of the segments to be downloaded (if not available) as quickly as possible (i.e. via HTTP method).\r\n     */\r\n    requiredSegmentsPriority: number;\r\n\r\n    /**\r\n     * Max number of simultaneous downloads from HTTP source.\r\n     */\r\n    simultaneousHttpDownloads: number;\r\n\r\n    /**\r\n     * Probability of downloading remaining not downloaded segment in the segments queue via HTTP.\r\n     */\r\n    httpDownloadProbability: number;\r\n\r\n    /**\r\n     * Interval of the httpDownloadProbability check (in milliseconds).\r\n     */\r\n    httpDownloadProbabilityInterval: number;\r\n\r\n    /**\r\n     * Don't download segments over HTTP randomly when there is no peers.\r\n     */\r\n    httpDownloadProbabilitySkipIfNoPeers: boolean;\r\n\r\n    /**\r\n     * Timeout before trying to load segment again via HTTP after failed attempt (in milliseconds).\r\n     */\r\n    httpFailedSegmentTimeout: number;\r\n\r\n    /**\r\n     * Segments with higher priority will not be downloaded over HTTP.\r\n     */\r\n    httpDownloadMaxPriority: number;\r\n\r\n    /**\r\n     * Try to download initial segments over P2P if the value is > 0.\r\n     * But HTTP download will be forcibly enabled if there is no peers on tracker or\r\n     * single sequential segment P2P download is timed out (see httpDownloadInitialTimeoutPerSegment).\r\n     */\r\n    httpDownloadInitialTimeout: number;\r\n\r\n    /**\r\n     * Use HTTP ranges requests where it is possible.\r\n     * Allows to continue (and not start over) aborted P2P downloads over HTTP.\r\n     */\r\n    httpUseRanges: boolean;\r\n\r\n    /**\r\n     * If initial HTTP download timeout is enabled (see httpDownloadInitialTimeout)\r\n     * this parameter sets additional timeout for a single sequential segment download\r\n     * over P2P. It will cancel initial HTTP download timeout mode if a segment download is timed out.\r\n     */\r\n    httpDownloadInitialTimeoutPerSegment: number;\r\n\r\n    /**\r\n     * Max number of simultaneous downloads from peers.\r\n     */\r\n    simultaneousP2PDownloads: number;\r\n\r\n    /**\r\n     * Segments with higher priority will not be downloaded over P2P.\r\n     */\r\n    p2pDownloadMaxPriority: number;\r\n\r\n    /**\r\n     * Timeout to download a segment from a peer. If exceeded the peer is dropped.\r\n     */\r\n    p2pSegmentDownloadTimeout: number;\r\n\r\n    /**\r\n     * Max WebRTC message size. 64KiB - 1B should work with most of recent browsers. Set it to 16KiB for older browsers support.\r\n     */\r\n    webRtcMaxMessageSize: number;\r\n\r\n    /**\r\n     * Torrent trackers (announcers) to use.\r\n     */\r\n    trackerAnnounce: string[];\r\n\r\n    /**\r\n     * Number of requested peers in each announce for each tracker. Maximum is 10.\r\n     */\r\n    peerRequestsPerAnnounce: number;\r\n\r\n    /**\r\n     * An RTCConfiguration dictionary providing options to configure WebRTC connections.\r\n     */\r\n    rtcConfig: RTCConfiguration;\r\n\r\n    /**\r\n     * Segment validation callback - validates the data after it has been downloaded.\r\n     */\r\n    segmentValidator?: SegmentValidatorCallback;\r\n\r\n    /**\r\n     * XMLHttpRequest setup callback. Handle it when you need additional setup for requests made by the library.\r\n     */\r\n    xhrSetup?: XhrSetupCallback;\r\n\r\n    /**\r\n     * Allow to modify the segment URL before HTTP request.\r\n     */\r\n    segmentUrlBuilder?: SegmentUrlBuilder;\r\n\r\n    /**\r\n     * A storage for the downloaded segments.\r\n     * By default the segments are stored in JavaScript memory.\r\n     */\r\n    segmentsStorage?: SegmentsStorage;\r\n};\r\n","/**\r\n * @license Apache-2.0\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nexport const version = \"0.6.2\";\r\nexport * from \"./loader-interface\";\r\nexport * from \"./hybrid-loader\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        p2pml: Record<string, unknown>;\r\n    }\r\n}\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { Events, Segment, LoaderInterface, XhrSetupCallback } from \"../../p2p-media-loader-core/lib\";\r\nimport { Manifest, Parser } from \"m3u8-parser\";\r\nimport { AssetsStorage } from \"./engine\";\r\n\r\nconst defaultSettings: SegmentManagerSettings = {\r\n    forwardSegmentCount: 20,\r\n    swarmId: undefined,\r\n    assetsStorage: undefined,\r\n};\r\n\r\nexport type ByteRange = { length: number; offset: number } | undefined;\r\n\r\nexport class SegmentManager {\r\n    private readonly loader: LoaderInterface;\r\n    private masterPlaylist: Playlist | null = null;\r\n    private readonly variantPlaylists = new Map<string, Playlist>();\r\n    private segmentRequest: SegmentRequest | null = null;\r\n    private playQueue: {\r\n        segmentSequence: number;\r\n        segmentUrl: string;\r\n        segmentByteRange: ByteRange;\r\n        playPosition?: {\r\n            start: number;\r\n            duration: number;\r\n        };\r\n    }[] = [];\r\n    private readonly settings: SegmentManagerSettings;\r\n\r\n    public constructor(loader: LoaderInterface, settings: Partial<SegmentManagerSettings> = {}) {\r\n        this.settings = { ...defaultSettings, ...settings };\r\n\r\n        this.loader = loader;\r\n        this.loader.on(Events.SegmentLoaded, this.onSegmentLoaded);\r\n        this.loader.on(Events.SegmentError, this.onSegmentError);\r\n        this.loader.on(Events.SegmentAbort, this.onSegmentAbort);\r\n    }\r\n\r\n    public getSettings(): SegmentManagerSettings {\r\n        return this.settings;\r\n    }\r\n\r\n    public processPlaylist(requestUrl: string, content: string, responseUrl: string): void {\r\n        const parser = new Parser();\r\n        parser.push(content);\r\n        parser.end();\r\n\r\n        const playlist = new Playlist(requestUrl, responseUrl, parser.manifest);\r\n\r\n        if (playlist.manifest.playlists) {\r\n            this.masterPlaylist = playlist;\r\n\r\n            for (const [key, variantPlaylist] of this.variantPlaylists) {\r\n                const { streamSwarmId, found, index } = this.getStreamSwarmId(variantPlaylist.requestUrl);\r\n                if (!found) {\r\n                    this.variantPlaylists.delete(key);\r\n                } else {\r\n                    variantPlaylist.streamSwarmId = streamSwarmId;\r\n                    variantPlaylist.streamId = \"V\" + index.toString();\r\n                }\r\n            }\r\n        } else {\r\n            const { streamSwarmId, found, index } = this.getStreamSwarmId(requestUrl);\r\n\r\n            if (found || this.masterPlaylist === null) {\r\n                // do not add audio and subtitles to variants\r\n                playlist.streamSwarmId = streamSwarmId;\r\n                playlist.streamId = this.masterPlaylist === null ? undefined : \"V\" + index.toString();\r\n                this.variantPlaylists.set(requestUrl, playlist);\r\n                this.updateSegments();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async loadPlaylist(url: string): Promise<{ response: string; responseURL: string, getResponseHeader : any }> {\r\n        const assetsStorage = this.settings.assetsStorage;\r\n        let xhr: { response: string; responseURL: string, getResponseHeader : any } | undefined;\r\n\r\n        if (assetsStorage !== undefined) {\r\n            let masterSwarmId: string | undefined;\r\n            masterSwarmId = this.getMasterSwarmId();\r\n            if (masterSwarmId === undefined) {\r\n                masterSwarmId = url.split(\"?\")[0];\r\n            }\r\n            const asset = await assetsStorage.getAsset(url, undefined, masterSwarmId);\r\n\r\n            if (asset !== undefined) {\r\n                xhr = {\r\n                    responseURL: asset.responseUri,\r\n                    response: asset.data as string,\r\n                    getResponseHeader : null\r\n                };\r\n            } else {\r\n                xhr = await this.loadContent(url, \"text\");\r\n                void assetsStorage.storeAsset({\r\n                    masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : url,\r\n                    masterSwarmId: masterSwarmId,\r\n                    requestUri: url,\r\n                    responseUri: xhr.responseURL,\r\n                    data: xhr.response,\r\n                });\r\n            }\r\n        } else {\r\n            xhr = await this.loadContent(url, \"text\");\r\n        }\r\n\r\n        this.processPlaylist(url, xhr.response, xhr.responseURL);\r\n        return xhr;\r\n    }\r\n\r\n    public async loadSegment(\r\n        url: string,\r\n        byteRange: ByteRange\r\n    ): Promise<{ content: ArrayBuffer | undefined; downloadBandwidth?: number }> {\r\n        const segmentLocation = this.getSegmentLocation(url, byteRange);\r\n        const byteRangeString = byteRangeToString(byteRange);\r\n\r\n\r\n        if (!segmentLocation) {\r\n            let content: ArrayBuffer | undefined;\r\n\r\n            // Not a segment from variants; usually can be: init, audio or subtitles segment, encription key etc.\r\n            const assetsStorage = this.settings.assetsStorage;\r\n            if (assetsStorage !== undefined) {\r\n                let masterManifestUri = this.masterPlaylist?.requestUrl;\r\n\r\n                let masterSwarmId: string | undefined;\r\n                masterSwarmId = this.getMasterSwarmId();\r\n\r\n                if (masterSwarmId === undefined && this.variantPlaylists.size === 1) {\r\n                    const result = this.variantPlaylists.values().next();\r\n                    if (!result.done) {\r\n                        // always true\r\n                        masterSwarmId = result.value.requestUrl.split(\"?\")[0];\r\n                    }\r\n                }\r\n\r\n                if (masterManifestUri === undefined && this.variantPlaylists.size === 1) {\r\n                    const result = this.variantPlaylists.values().next();\r\n                    if (!result.done) {\r\n                        // always true\r\n                        masterManifestUri = result.value.requestUrl;\r\n                    }\r\n                }\r\n\r\n                if (masterSwarmId !== undefined && masterManifestUri !== undefined) {\r\n                    const asset = await assetsStorage.getAsset(url, byteRangeString, masterSwarmId);\r\n                    if (asset !== undefined) {\r\n                        content = asset.data as ArrayBuffer;\r\n                    } else {\r\n                        const xhr = await this.loadContent(url, \"arraybuffer\", byteRangeString);\r\n                        content = xhr.response as ArrayBuffer;\r\n\r\n                        void assetsStorage.storeAsset({\r\n                            masterManifestUri: masterManifestUri,\r\n                            masterSwarmId: masterSwarmId,\r\n                            requestUri: url,\r\n                            requestRange: byteRangeString,\r\n                            responseUri: xhr.responseURL,\r\n                            data: content,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (content === undefined) {\r\n\r\n                const xhr = await this.loadContent(url, \"arraybuffer\", byteRangeString);\r\n                content = xhr.response as ArrayBuffer;\r\n            }\r\n\r\n            return { content, downloadBandwidth: 0 };\r\n        }\r\n\r\n        const segmentSequence =\r\n            (segmentLocation.playlist.manifest.mediaSequence ? segmentLocation.playlist.manifest.mediaSequence : 0) +\r\n            segmentLocation.segmentIndex;\r\n\r\n        if (this.playQueue.length > 0) {\r\n            const previousSegment = this.playQueue[this.playQueue.length - 1];\r\n            if (previousSegment.segmentSequence !== segmentSequence - 1) {\r\n                // Reset play queue in case of segment loading out of sequence\r\n                this.playQueue = [];\r\n            }\r\n        }\r\n\r\n        if (this.segmentRequest) {\r\n            this.segmentRequest.onError(\"Cancel segment request: simultaneous segment requests are not supported\");\r\n        }\r\n\r\n        const promise = new Promise<{ content: ArrayBuffer | undefined; downloadBandwidth?: number }>(\r\n            (resolve, reject) => {\r\n                this.segmentRequest = new SegmentRequest(\r\n                    url,\r\n                    byteRange,\r\n                    segmentSequence,\r\n                    segmentLocation.playlist.requestUrl,\r\n                    (content: ArrayBuffer | undefined, downloadBandwidth?: number) =>\r\n                        resolve({ content, downloadBandwidth }),\r\n                    (error) => reject(error)\r\n                );\r\n            }\r\n        );\r\n\r\n\r\n        this.playQueue.push({ segmentUrl: url, segmentByteRange: byteRange, segmentSequence: segmentSequence });\r\n        void this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, true);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public setPlayingSegment(url: string, byteRange: ByteRange, start: number, duration: number): void {\r\n        const urlIndex = this.playQueue.findIndex(\r\n            (segment) => segment.segmentUrl === url && compareByteRanges(segment.segmentByteRange, byteRange)\r\n        );\r\n\r\n        if (urlIndex >= 0) {\r\n            this.playQueue = this.playQueue.slice(urlIndex);\r\n            this.playQueue[0].playPosition = { start, duration };\r\n            this.updateSegments();\r\n        }\r\n    }\r\n\r\n    public setPlayingSegmentByCurrentTime(playheadPosition: number): void {\r\n\r\n        if (this.playQueue.length === 0 || !this.playQueue[0].playPosition) {\r\n            return;\r\n        }\r\n\r\n        const currentSegmentPosition = this.playQueue[0].playPosition;\r\n        const segmentEndTime = currentSegmentPosition.start + currentSegmentPosition.duration;\r\n\r\n        if (segmentEndTime - playheadPosition < 0.2) {\r\n            // means that current segment is (almost) finished playing\r\n            // remove it from queue\r\n\r\n            this.playQueue = this.playQueue.slice(1);\r\n            this.updateSegments();\r\n        }\r\n    }\r\n\r\n    public abortSegment(url: string, byteRange: ByteRange): void {\r\n        if (\r\n            this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === url &&\r\n            compareByteRanges(this.segmentRequest.segmentByteRange, byteRange)\r\n        ) {\r\n            this.segmentRequest.onSuccess(undefined, 0);\r\n            this.segmentRequest = null;\r\n        }\r\n    }\r\n\r\n    public async destroy(): Promise<void> {\r\n\r\n        if (this.segmentRequest) {\r\n            this.segmentRequest.onError(\"Loading aborted: object destroyed\");\r\n            this.segmentRequest = null;\r\n        }\r\n\r\n        this.masterPlaylist = null;\r\n        this.variantPlaylists.clear();\r\n        this.playQueue = [];\r\n\r\n        if (this.settings.assetsStorage !== undefined) {\r\n            await this.settings.assetsStorage.destroy();\r\n        }\r\n\r\n        await this.loader.destroy();\r\n    }\r\n\r\n    private updateSegments(): void {\r\n        if (!this.segmentRequest) {\r\n            return;\r\n        }\r\n\r\n        const segmentLocation = this.getSegmentLocation(\r\n            this.segmentRequest.segmentUrl,\r\n            this.segmentRequest.segmentByteRange\r\n        );\r\n        if (segmentLocation) {\r\n            void this.loadSegments(segmentLocation.playlist, segmentLocation.segmentIndex, false);\r\n        }\r\n    }\r\n\r\n    private onSegmentLoaded = (segment: Segment) => {\r\n        if (\r\n            this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === segment.url &&\r\n            byteRangeToString(this.segmentRequest.segmentByteRange) === segment.range\r\n        ) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.segmentRequest.onSuccess(segment.data!.slice(0), segment.downloadBandwidth);\r\n            this.segmentRequest = null;\r\n        }\r\n    };\r\n\r\n    private onSegmentError = (segment: Segment, error: unknown) => {\r\n\r\n        if (\r\n            this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === segment.url &&\r\n            byteRangeToString(this.segmentRequest.segmentByteRange) === segment.range\r\n        ) {\r\n            this.segmentRequest.onError(error);\r\n            this.segmentRequest = null;\r\n        }\r\n    };\r\n\r\n    private onSegmentAbort = (segment: Segment) => {\r\n\r\n        if (\r\n            this.segmentRequest &&\r\n            this.segmentRequest.segmentUrl === segment.url &&\r\n            byteRangeToString(this.segmentRequest.segmentByteRange) === segment.range\r\n        ) {\r\n            this.segmentRequest.onError(\"Loading aborted: internal abort\");\r\n            this.segmentRequest = null;\r\n        }\r\n    };\r\n\r\n    private getSegmentLocation(\r\n        url: string,\r\n        byteRange: ByteRange\r\n    ): { playlist: Playlist; segmentIndex: number } | undefined {\r\n        for (const playlist of this.variantPlaylists.values()) {\r\n            const segmentIndex = playlist.getSegmentIndex(url, byteRange);\r\n            if (segmentIndex >= 0) {\r\n                return { playlist: playlist, segmentIndex: segmentIndex };\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    private async loadSegments(playlist: Playlist, segmentIndex: number, requestFirstSegment: boolean) {\r\n        const segments: Segment[] = [];\r\n        const playlistSegments = playlist.manifest.segments;\r\n        const initialSequence = playlist.manifest.mediaSequence ?? 0;\r\n        let loadSegmentId: string | null = null;\r\n\r\n        let priority = Math.max(0, this.playQueue.length - 1);\r\n\r\n        const masterSwarmId = this.getMasterSwarmId();\r\n\r\n        for (\r\n            let i = segmentIndex;\r\n            i < playlistSegments.length && segments.length < this.settings.forwardSegmentCount;\r\n            ++i\r\n        ) {\r\n            const segment = playlist.manifest.segments[i];\r\n\r\n            const url = playlist.getSegmentAbsoluteUrl(segment.uri);\r\n            const byteRange: ByteRange = segment.byteRange;\r\n            const id = this.getSegmentId(playlist, initialSequence + i);\r\n            segments.push({\r\n                id: id,\r\n                url: url,\r\n                masterSwarmId: masterSwarmId !== undefined ? masterSwarmId : playlist.streamSwarmId,\r\n                masterManifestUri: this.masterPlaylist !== null ? this.masterPlaylist.requestUrl : playlist.requestUrl,\r\n                streamId: playlist.streamId,\r\n                sequence: (initialSequence + i).toString(),\r\n                range: byteRangeToString(byteRange),\r\n                priority: priority++,\r\n            });\r\n            if (requestFirstSegment && !loadSegmentId) {\r\n                loadSegmentId = id;\r\n            }\r\n        }\r\n\r\n        this.loader.load(segments, playlist.streamSwarmId);\r\n\r\n        if (loadSegmentId) {\r\n            const segment = await this.loader.getSegment(loadSegmentId);\r\n            if (segment) {\r\n                // Segment already loaded by loader\r\n                this.onSegmentLoaded(segment);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getSegmentId(playlist: Playlist, segmentSequence: number): string {\r\n        return `${playlist.streamSwarmId}+${segmentSequence}`;\r\n    }\r\n\r\n    private getMasterSwarmId() {\r\n        const settingsSwarmId =\r\n            this.settings.swarmId && this.settings.swarmId.length !== 0 ? this.settings.swarmId : undefined;\r\n        if (settingsSwarmId !== undefined) {\r\n            return settingsSwarmId;\r\n        }\r\n\r\n        return this.masterPlaylist !== null ? this.masterPlaylist.requestUrl.split(\"?\")[0] : undefined;\r\n    }\r\n\r\n    private getStreamSwarmId(playlistUrl: string): { streamSwarmId: string; found: boolean; index: number } {\r\n        const masterSwarmId = this.getMasterSwarmId();\r\n\r\n        if (this.masterPlaylist && this.masterPlaylist.manifest.playlists && masterSwarmId) {\r\n            for (let i = 0; i < this.masterPlaylist.manifest.playlists.length; ++i) {\r\n                const url = new URL(\r\n                    this.masterPlaylist.manifest.playlists[i].uri,\r\n                    this.masterPlaylist.responseUrl\r\n                ).toString();\r\n                if (url === playlistUrl) {\r\n                    return { streamSwarmId: `${masterSwarmId}+V${i}`, found: true, index: i };\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            streamSwarmId: masterSwarmId ?? playlistUrl.split(\"?\")[0],\r\n            found: false,\r\n            index: -1,\r\n        };\r\n    }\r\n\r\n    private async loadContent(\r\n        url: string,\r\n        responseType: XMLHttpRequestResponseType,\r\n        range?: string\r\n    ): Promise<XMLHttpRequest> {\r\n        return new Promise<XMLHttpRequest>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(\"GET\", url, true);\r\n            xhr.responseType = responseType;\r\n\r\n            if (range) {\r\n                xhr.setRequestHeader(\"Range\", range);\r\n            }\r\n\r\n            xhr.addEventListener(\"readystatechange\", () => {\r\n                if (xhr.readyState !== 4) return;\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(xhr);\r\n                } else {\r\n\r\n                    reject(xhr.statusText);\r\n                }\r\n            });\r\n\r\n            const xhrSetup = (this.loader.getSettings() as { xhrSetup?: XhrSetupCallback }).xhrSetup;\r\n            if (xhrSetup) {\r\n                xhrSetup(xhr, url);\r\n            }\r\n\r\n            xhr.send();\r\n        });\r\n    }\r\n}\r\n\r\nclass Playlist {\r\n    public streamSwarmId = \"\";\r\n    public streamId?: string;\r\n\r\n    public constructor(readonly requestUrl: string, readonly responseUrl: string, readonly manifest: Manifest) {}\r\n\r\n    public getSegmentIndex(url: string, byteRange: ByteRange): number {\r\n        for (let i = 0; i < this.manifest.segments.length; ++i) {\r\n            const segment = this.manifest.segments[i];\r\n            const segmentUrl = this.getSegmentAbsoluteUrl(segment.uri);\r\n\r\n            if (url === segmentUrl && compareByteRanges(segment.byteRange, byteRange)) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    public getSegmentAbsoluteUrl(segmentUrl: string): string {\r\n        return new URL(segmentUrl, this.responseUrl).toString();\r\n    }\r\n}\r\n\r\nclass SegmentRequest {\r\n    public constructor(\r\n        readonly segmentUrl: string,\r\n        readonly segmentByteRange: ByteRange,\r\n        readonly segmentSequence: number,\r\n        readonly playlistRequestUrl: string,\r\n        readonly onSuccess: (content: ArrayBuffer | undefined, downloadBandwidth: number | undefined) => void,\r\n        readonly onError: (error: unknown) => void\r\n    ) {}\r\n}\r\n\r\nexport interface SegmentManagerSettings {\r\n    /**\r\n     * Number of segments for building up predicted forward segments sequence; used to predownload and share via P2P\r\n     */\r\n    forwardSegmentCount: number;\r\n\r\n    /**\r\n     * Override default swarm ID that is used to identify unique media stream with trackers (manifest URL without\r\n     * query parameters is used as the swarm ID if the parameter is not specified)\r\n     */\r\n    swarmId?: string;\r\n\r\n    /**\r\n     * A storage for the downloaded assets: manifests, subtitles, init segments, DRM assets etc. By default the assets are not stored.\r\n     */\r\n    assetsStorage?: AssetsStorage;\r\n}\r\n\r\nfunction compareByteRanges(b1: ByteRange, b2: ByteRange) {\r\n    return b1 === undefined ? b2 === undefined : b2 !== undefined && b1.length === b2.length && b1.offset === b2.offset;\r\n}\r\n\r\nfunction byteRangeToString(byteRange: ByteRange): string | undefined {\r\n    if (byteRange === undefined) {\r\n        return undefined;\r\n    }\r\n\r\n    const end = byteRange.offset + byteRange.length - 1;\r\n\r\n    return `bytes=${byteRange.offset}-${end}`;\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\r\nimport { SegmentManager } from \"./segment-manager\";\r\nimport type { LoaderCallbacks, LoaderConfiguration, LoaderContext, FragmentLoaderContext, PlaylistLoaderContext } from \"hls.js/src/types/loader\";\r\nimport { LoadStats } from \"hls.js/src/loader/load-stats\";\r\n\r\nconst DEFAULT_DOWNLOAD_LATENCY = 1;\r\nconst DEFAULT_DOWNLOAD_BANDWIDTH = 12500; // bytes per millisecond\r\n\r\nexport class HlsJsLoader {\r\n    private segmentManager: SegmentManager;\r\n\r\n    public constructor(segmentManager: SegmentManager) {\r\n        this.segmentManager = segmentManager;\r\n    }\r\n\r\n    public async load(\r\n        context: any,\r\n        _config: LoaderConfiguration,\r\n        callbacks: LoaderCallbacks<FragmentLoaderContext | PlaylistLoaderContext>,\r\n        stats : LoadStats\r\n    ): Promise<void> {\r\n\r\n        if (((context as unknown) as { type: unknown }).type) {\r\n\r\n            try {\r\n                const result = await this.segmentManager.loadPlaylist(context.url);\r\n                this.successPlaylist(result, context, callbacks, stats);\r\n            } catch (e) {\r\n                this.error(e, context, callbacks);\r\n            }\r\n\r\n        } \r\n        else if (((context as unknown) as { frag: unknown }).frag) {\r\n\r\n            try {\r\n                const result = await this.segmentManager.loadSegment(\r\n                    \r\n                    context.url,\r\n                    context.rangeStart === undefined || context.rangeEnd === undefined\r\n                        ? undefined\r\n                        : { offset: context.rangeStart, length: context.rangeEnd - context.rangeStart }\r\n                );\r\n\r\n\r\n                const { content } = result;\r\n\r\n                if (content !== undefined) {\r\n                    setTimeout(() => this.successSegment(content, result.downloadBandwidth, context, callbacks, stats), 0);\r\n                }\r\n\r\n            } catch (e) {\r\n\r\n\r\n                setTimeout(() => this.error(e, context, callbacks), 0);\r\n            }\r\n\r\n        } else {\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public abort(context: FragmentLoaderContext | PlaylistLoaderContext): void {\r\n\r\n        this.segmentManager.abortSegment(\r\n            context.url,\r\n            context.rangeStart === undefined || context.rangeEnd === undefined\r\n                ? undefined\r\n                : { offset: context.rangeStart, length: context.rangeEnd - context.rangeStart }\r\n        );\r\n\r\n    }\r\n\r\n    private successPlaylist(\r\n        xhr: { response: string; responseURL: string, getResponseHeader : any },\r\n        context: PlaylistLoaderContext,\r\n        callbacks: LoaderCallbacks<PlaylistLoaderContext>,\r\n        stats : LoadStats\r\n    ): void {\r\n\r\n        stats.total = xhr.response.length;\r\n        stats.loaded += xhr.response.length;\r\n        /*const stats = {\r\n            trequest: now - 300,\r\n            tfirst: now - 200,\r\n            tload: now - 1,\r\n            tparsed: now,\r\n            loaded: xhr.response.length,\r\n            total: xhr.response.length,\r\n        };*/\r\n\r\n        \r\n        callbacks.onSuccess(\r\n            {\r\n                url: xhr.responseURL,\r\n                data: xhr.response,\r\n            },\r\n            \r\n            stats,\r\n            context,\r\n            undefined\r\n        );\r\n    }\r\n\r\n    private successSegment(\r\n        content: ArrayBuffer,\r\n        downloadBandwidth: number | undefined,\r\n        context: FragmentLoaderContext,\r\n        callbacks: LoaderCallbacks<FragmentLoaderContext>,\r\n        stats : LoadStats\r\n    ): void {\r\n\r\n\r\n        stats.loaded += content.byteLength\r\n        stats.bwEstimate = downloadBandwidth || DEFAULT_DOWNLOAD_BANDWIDTH\r\n\r\n\r\n        if (callbacks?.onProgress)\r\n            callbacks.onProgress(stats, context, content, undefined)\r\n\r\n        callbacks.onSuccess(\r\n            {\r\n                url: context.url,\r\n                data: content,\r\n            },\r\n            stats,\r\n            context,\r\n            undefined\r\n        );\r\n    }\r\n\r\n    private error(\r\n        error: { code: number; text: string },\r\n        context: FragmentLoaderContext | PlaylistLoaderContext,\r\n        callbacks: LoaderCallbacks<FragmentLoaderContext | PlaylistLoaderContext>\r\n    ): void {\r\n\r\n        callbacks.onError(error, context, undefined);\r\n    }\r\n}\r\n","/**\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport { EventEmitter } from \"events\";\r\nimport { Events, LoaderInterface, HybridLoader, HybridLoaderSettings } from \"../../p2p-media-loader-core/lib\";\r\nimport { SegmentManager, ByteRange, SegmentManagerSettings } from \"./segment-manager\";\r\nimport { HlsJsLoader } from \"./hlsjs-loader\";\r\nimport type { LoaderCallbacks, LoaderOnProgress, LoaderConfiguration, LoaderContext, FragmentLoaderContext, PlaylistLoaderContext } from \"hls.js/src/types/loader\";\r\nimport { LoadStats } from \"hls.js/src/loader/load-stats\";\r\n\r\nexport interface HlsJsEngineSettings {\r\n    loader: Partial<HybridLoaderSettings>;\r\n    segments: Partial<SegmentManagerSettings>;\r\n}\r\n\r\nexport class Engine extends EventEmitter {\r\n    public static isSupported(): boolean {\r\n        return HybridLoader.isSupported();\r\n    }\r\n\r\n    private readonly loader: LoaderInterface;\r\n    private readonly segmentManager: SegmentManager;\r\n\r\n    public constructor(settings: Partial<HlsJsEngineSettings> = {}) {\r\n        super();\r\n\r\n        this.loader = new HybridLoader(settings.loader);\r\n        this.segmentManager = new SegmentManager(this.loader, settings.segments);\r\n\r\n        Object.keys(Events)\r\n            .map((eventKey) => Events[eventKey as keyof typeof Events])\r\n            .forEach((event) => this.loader.on(event, (...args: unknown[]) => this.emit(event, ...args)));\r\n    }\r\n\r\n   \r\n    public createLoaderClass(): new () => unknown {\r\n        const engine = this; // eslint-disable-line @typescript-eslint/no-this-alias\r\n        return class {\r\n            private impl: HlsJsLoader;\r\n            private context: FragmentLoaderContext | PlaylistLoaderContext | any;\r\n            private stats: LoadStats;\r\n            constructor() {\r\n                this.context = null;\r\n                this.impl = new HlsJsLoader(engine.segmentManager);\r\n                this.stats = new LoadStats()\r\n            }\r\n\r\n            public abortInternal(callbacks: LoaderCallbacks<LoaderContext>){\r\n\r\n                if (this.context) {\r\n                   this.impl.abort(this.context);\r\n                }\r\n                \r\n                if (callbacks?.onAbort) {\r\n                    callbacks.onAbort(this.stats, this.context, undefined);\r\n                }\r\n            }\r\n\r\n            load = async (\r\n                context: FragmentLoaderContext,\r\n                config: LoaderConfiguration,\r\n                callbacks: LoaderCallbacks<LoaderContext>\r\n            ) => {\r\n\r\n\r\n\r\n                if (this.stats.loading.start) {\r\n                    throw new Error('Loader can only be used once.');\r\n                }\r\n\r\n                this.context = context;\r\n\r\n                this.stats.bwEstimate = 12500\r\n\r\n                this.stats.loading.start =  performance.now()\r\n\r\n                await this.impl.load(context, config, callbacks, this.stats);\r\n\r\n                this.stats.loading.first =  performance.now()\r\n                this.stats.loading.end =    performance.now()\r\n\r\n                this.stats.chunkCount++\r\n                \r\n\r\n                \r\n                //? this.stats.bwEstimate = this.loader.bandwidthApproximator.getBandwidth(this.now());\r\n            };\r\n\r\n            abort = (callbacks: LoaderCallbacks<LoaderContext>) => {\r\n                this.abortInternal(callbacks)\r\n            };\r\n\r\n            destroy = (callbacks: LoaderCallbacks<LoaderContext>) => {\r\n\r\n                this.abortInternal(callbacks)\r\n            };\r\n\r\n            getCacheAge = function(){\r\n                return 100000\r\n            }\r\n\r\n            static getEngine = () => {\r\n                return engine;\r\n            };\r\n        };\r\n    }\r\n\r\n    public async destroy(): Promise<void> {\r\n        await this.segmentManager.destroy();\r\n    }\r\n\r\n    public getSettings(): {\r\n        segments: SegmentManagerSettings;\r\n        loader: unknown;\r\n    } {\r\n        return {\r\n            segments: this.segmentManager.getSettings(),\r\n            loader: this.loader.getSettings(),\r\n        };\r\n    }\r\n\r\n    public getDetails(): unknown {\r\n        return {\r\n            loader: this.loader.getDetails(),\r\n        };\r\n    }\r\n\r\n    public setPlayingSegment(url: string, byteRange: ByteRange, start: number, duration: number): void {\r\n        this.segmentManager.setPlayingSegment(url, byteRange, start, duration);\r\n    }\r\n\r\n    public setPlayingSegmentByCurrentTime(playheadPosition: number): void {\r\n        this.segmentManager.setPlayingSegmentByCurrentTime(playheadPosition);\r\n    }\r\n}\r\n\r\nexport interface Asset {\r\n    masterSwarmId: string;\r\n    masterManifestUri: string;\r\n    requestUri: string;\r\n    requestRange?: string;\r\n    responseUri: string;\r\n    data: ArrayBuffer | string;\r\n}\r\n\r\nexport interface AssetsStorage {\r\n    storeAsset(asset: Asset): Promise<void>;\r\n    getAsset(requestUri: string, requestRange: string | undefined, masterSwarmId: string): Promise<Asset | undefined>;\r\n    destroy(): Promise<void>;\r\n}\r\n","/**\r\n * @license Apache-2.0\r\n * Copyright 2018 Novage LLC.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/* eslint-disable */\r\n\r\nexport const version = \"0.6.2\";\r\nexport * from \"./engine\";\r\nexport * from \"./segment-manager\";\r\n\r\nimport { Engine } from \"./engine\";\r\n\r\ndeclare const videojs: any;\r\n\r\ndeclare global {\r\n    interface Window {\r\n        p2pml: Record<string, unknown>;\r\n    }\r\n}\r\n\r\nexport function initHlsJsPlayer(player: any): void {\r\n\r\n\r\n\r\n    if (player && player.config && player.config.loader && typeof player.config.loader.getEngine === \"function\") {\r\n\r\n        initHlsJsEvents(player, player.config.loader.getEngine());\r\n    }\r\n}\r\n\r\nexport function initClapprPlayer(player: any): void {\r\n    player.on(\"play\", () => {\r\n        const playback = player.core.getCurrentPlayback();\r\n        if (playback._hls && !playback._hls._p2pm_linitialized) {\r\n            playback._hls._p2pm_linitialized = true;\r\n            initHlsJsPlayer(player.core.getCurrentPlayback()._hls);\r\n        }\r\n    });\r\n}\r\n\r\nexport function initFlowplayerHlsJsPlayer(player: any): void {\r\n    player.on(\"ready\", () => initHlsJsPlayer(player.engine.hlsjs ?? player.engine.hls));\r\n}\r\n\r\nexport function initVideoJsContribHlsJsPlayer(player: any): void {\r\n    player.ready(() => {\r\n        const options = player.tech_.options_;\r\n        if (\r\n            options &&\r\n            options.hlsjsConfig &&\r\n            options.hlsjsConfig.loader &&\r\n            typeof options.hlsjsConfig.loader.getEngine === \"function\"\r\n        ) {\r\n            initHlsJsEvents(player.tech_, options.hlsjsConfig.loader.getEngine());\r\n        }\r\n    });\r\n}\r\n\r\nexport function initVideoJsHlsJsPlugin(): void {\r\n    if (videojs == undefined || videojs.Html5Hlsjs == undefined) {\r\n        return;\r\n    }\r\n\r\n    videojs.Html5Hlsjs.addHook(\"beforeinitialize\", (videojsPlayer: any, hlsjs: any) => {\r\n        if (hlsjs.config && hlsjs.config.loader && typeof hlsjs.config.loader.getEngine === \"function\") {\r\n            initHlsJsEvents(hlsjs, hlsjs.config.loader.getEngine());\r\n        }\r\n    });\r\n}\r\n\r\nexport function initMediaElementJsPlayer(mediaElement: any): void {\r\n    mediaElement.addEventListener(\"hlsFragChanged\", (event: any) => {\r\n\r\n\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            const engine: Engine = hls.config.loader.getEngine();\r\n\r\n            if (event.data && event.data.length > 1) {\r\n                const frag = event.data[1].frag;\r\n\r\n                const byteRange =\r\n                    frag.byteRange.length !== 2\r\n                        ? undefined\r\n                        : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\r\n                engine.setPlayingSegment(frag.url, byteRange, frag.start, frag.duration);\r\n            }\r\n        }\r\n    });\r\n    mediaElement.addEventListener(\"hlsDestroying\", async () => {\r\n\r\n        console.log('hlsDestroying')\r\n\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            const engine: Engine = hls.config.loader.getEngine();\r\n            await engine.destroy();\r\n        }\r\n    });\r\n    mediaElement.addEventListener(\"hlsError\", (event: any) => {\r\n\r\n        const hls = mediaElement.hlsPlayer;\r\n        if (hls && hls.config && hls.config.loader && typeof hls.config.loader.getEngine === \"function\") {\r\n            if (event.data !== undefined && event.data.details === \"bufferStalledError\") {\r\n                const engine: Engine = hls.config.loader.getEngine();\r\n                engine.setPlayingSegmentByCurrentTime(hls.media.currentTime);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function initJwPlayer(player: any, hlsjsConfig: any): void {\r\n    const iid = setInterval(() => {\r\n        if (player.hls && player.hls.config) {\r\n            clearInterval(iid);\r\n            Object.assign(player.hls.config, hlsjsConfig);\r\n            initHlsJsPlayer(player.hls);\r\n        }\r\n    }, 200);\r\n}\r\n\r\nfunction initHlsJsEvents(player: any, engine: Engine): void {\r\n\r\n    player.on(\"hlsFragChanged\", (_event: string, data: any) => {\r\n\r\n\r\n        const frag = data.frag;\r\n        const byteRange =\r\n            frag.byteRange.length !== 2\r\n                ? undefined\r\n                : { offset: frag.byteRange[0], length: frag.byteRange[1] - frag.byteRange[0] };\r\n        engine.setPlayingSegment(frag.url, byteRange, frag.start, frag.duration);\r\n    });\r\n\r\n    player.on(\"hlsDestroying\", async () => {\r\n        await engine.destroy();\r\n    });\r\n\r\n    player.on(\"hlsError\", (_event: string, errorData: { details: string }) => {\r\n        if (errorData.details === \"bufferStalledError\") {\r\n\r\n\r\n            const htmlMediaElement = (player.media === undefined\r\n                ? player.el_ // videojs-contrib-hlsjs\r\n                : player.media) as HTMLMediaElement | undefined; // all others\r\n            if (htmlMediaElement) {\r\n                engine.setPlayingSegmentByCurrentTime(htmlMediaElement.currentTime);\r\n            }\r\n        }\r\n    });\r\n\r\n}\r\n"],"sourceRoot":""}