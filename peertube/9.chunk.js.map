{"version":3,"sources":["webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/bandwidth-approximator.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/http-media-manager.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/hybrid-loader.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/index.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/loader-interface.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/media-peer.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/p2p-media-manager.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/segments-memory-storage.ts","webpack:///./src/assets/player/p2p-media-loader/core/p2p-media-loader-master/p2p-media-loader-core/lib/stringly-typed-event-emitter.ts","webpack:///./src/assets/player/p2p-media-loader/hls-plugin.ts","webpack:///./src/assets/player/p2p-media-loader/p2p-media-loader-plugin.ts"],"names":[],"mappings":"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","file":"9.chunk.js","sourcesContent":["/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SMOOTH_INTERVAL = 15 * 1000;\nconst MEASURE_INTERVAL = 60 * 1000;\n\nclass NumberWithTime {\n    constructor(readonly value: number, readonly timeStamp: number) {}\n}\n\nexport class BandwidthApproximator {\n    private lastBytes: NumberWithTime[] = [];\n    private currentBytesSum = 0;\n    private lastBandwidth: NumberWithTime[] = [];\n\n    public addBytes = (bytes: number, timeStamp: number): void => {\n        this.lastBytes.push(new NumberWithTime(bytes, timeStamp));\n        this.currentBytesSum += bytes;\n\n        while (timeStamp - this.lastBytes[0].timeStamp > SMOOTH_INTERVAL) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.currentBytesSum -= this.lastBytes.shift()!.value;\n        }\n\n        const interval = Math.min(SMOOTH_INTERVAL, timeStamp);\n        this.lastBandwidth.push(new NumberWithTime(this.currentBytesSum / interval, timeStamp));\n    };\n\n    // in bytes per millisecond\n    public getBandwidth = (timeStamp: number): number => {\n        while (this.lastBandwidth.length !== 0 && timeStamp - this.lastBandwidth[0].timeStamp > MEASURE_INTERVAL) {\n            this.lastBandwidth.shift();\n        }\n\n        let maxBandwidth = 0;\n        for (const bandwidth of this.lastBandwidth) {\n            if (bandwidth.value > maxBandwidth) {\n                maxBandwidth = bandwidth.value;\n            }\n        }\n\n        return maxBandwidth;\n    };\n\n    public getSmoothInterval = (): number => {\n        return SMOOTH_INTERVAL;\n    };\n\n    public getMeasureInterval = (): number => {\n        return MEASURE_INTERVAL;\n    };\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Debug from \"debug\";\n\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\nimport { Segment } from \"./loader-interface\";\nimport { SegmentValidatorCallback, XhrSetupCallback, SegmentUrlBuilder } from \"./hybrid-loader\";\n\nexport class HttpMediaManager extends STEEmitter<\"segment-loaded\" | \"segment-error\" | \"bytes-downloaded\"> {\n    private xhrRequests = new Map<string, { xhr: XMLHttpRequest; segment: Segment }>();\n    private failedSegments = new Map<string, number>();\n    private debug = Debug(\"p2pml:http-media-manager\");\n\n    public constructor(\n        readonly settings: {\n            httpFailedSegmentTimeout: number;\n            httpUseRanges: boolean;\n            segmentValidator?: SegmentValidatorCallback;\n            xhrSetup?: XhrSetupCallback;\n            segmentUrlBuilder?: SegmentUrlBuilder;\n        }\n    ) {\n        super();\n    }\n\n    public download = (segment: Segment, downloadedPieces?: ArrayBuffer[]): void => {\n        if (this.isDownloading(segment)) {\n            return;\n        }\n\n        this.cleanTimedOutFailedSegments();\n\n        const segmentUrl = this.settings.segmentUrlBuilder ? this.settings.segmentUrlBuilder(segment) : segment.url;\n\n        this.debug(\"http segment download\", segmentUrl);\n\n        segment.requestUrl = segmentUrl;\n\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", segmentUrl, true);\n        xhr.responseType = \"arraybuffer\";\n\n        if (segment.range) {\n            xhr.setRequestHeader(\"Range\", segment.range);\n            downloadedPieces = undefined; // TODO: process downloadedPieces for segments with range headers too\n        } else if (downloadedPieces !== undefined && this.settings.httpUseRanges) {\n            let bytesDownloaded = 0;\n            for (const piece of downloadedPieces) {\n                bytesDownloaded += piece.byteLength;\n            }\n\n            xhr.setRequestHeader(\"Range\", `bytes=${bytesDownloaded}-`);\n\n            this.debug(\"continue download from\", bytesDownloaded);\n        } else {\n            downloadedPieces = undefined;\n        }\n\n        this.setupXhrEvents(xhr, segment, downloadedPieces);\n\n        if (this.settings.xhrSetup) {\n            this.settings.xhrSetup(xhr, segmentUrl);\n        }\n\n        this.xhrRequests.set(segment.id, { xhr, segment });\n        xhr.send();\n    };\n\n    public abort = (segment: Segment): void => {\n        const request = this.xhrRequests.get(segment.id);\n\n        if (request) {\n            request.xhr.abort();\n            this.xhrRequests.delete(segment.id);\n            this.debug(\"http segment abort\", segment.id);\n        }\n    };\n\n    public isDownloading = (segment: Segment): boolean => {\n        return this.xhrRequests.has(segment.id);\n    };\n\n    public isFailed = (segment: Segment): boolean => {\n        const time = this.failedSegments.get(segment.id);\n        return time !== undefined && time > this.now();\n    };\n\n    public getActiveDownloads = (): ReadonlyMap<string, { segment: Segment }> => {\n        return this.xhrRequests;\n    };\n\n    public getActiveDownloadsCount = (): number => {\n        return this.xhrRequests.size;\n    };\n\n    public destroy = (): void => {\n        this.xhrRequests.forEach((request) => request.xhr.abort());\n        this.xhrRequests.clear();\n    };\n\n    private setupXhrEvents = (xhr: XMLHttpRequest, segment: Segment, downloadedPieces?: ArrayBuffer[]) => {\n        let prevBytesLoaded = 0;\n\n        xhr.addEventListener(\"progress\", (event) => {\n            const bytesLoaded = event.loaded - prevBytesLoaded;\n            this.emit(\"bytes-downloaded\", bytesLoaded);\n            prevBytesLoaded = event.loaded;\n        });\n\n        xhr.addEventListener(\"load\", async (event) => {\n            if (xhr.status < 200 || xhr.status >= 300) {\n                this.segmentFailure(segment, event, xhr);\n                return;\n            }\n\n            let data = xhr.response as ArrayBuffer;\n\n            if (downloadedPieces !== undefined && xhr.status === 206) {\n                let bytesDownloaded = 0;\n                for (const piece of downloadedPieces) {\n                    bytesDownloaded += piece.byteLength;\n                }\n\n                const segmentData = new Uint8Array(bytesDownloaded + data.byteLength);\n                let offset = 0;\n\n                for (const piece of downloadedPieces) {\n                    segmentData.set(new Uint8Array(piece), offset);\n                    offset += piece.byteLength;\n                }\n\n                segmentData.set(new Uint8Array(data), offset);\n                data = segmentData.buffer;\n            }\n\n            await this.segmentDownloadFinished(segment, data, xhr);\n        });\n\n        xhr.addEventListener(\"error\", (event: unknown) => {\n            this.segmentFailure(segment, event, xhr);\n        });\n\n        xhr.addEventListener(\"timeout\", (event: unknown) => {\n            this.segmentFailure(segment, event, xhr);\n        });\n    };\n\n    private segmentDownloadFinished = async (segment: Segment, data: ArrayBuffer, xhr: XMLHttpRequest) => {\n        segment.responseUrl = xhr.responseURL === null ? undefined : xhr.responseURL;\n\n        if (this.settings.segmentValidator) {\n            try {\n                await this.settings.segmentValidator({ ...segment, data: data }, \"http\");\n            } catch (error) {\n                this.debug(\"segment validator failed\", error);\n                this.segmentFailure(segment, error, xhr);\n                return;\n            }\n        }\n\n        this.xhrRequests.delete(segment.id);\n        this.emit(\"segment-loaded\", segment, data);\n    };\n\n    private segmentFailure = (segment: Segment, error: unknown, xhr: XMLHttpRequest) => {\n        segment.responseUrl = xhr.responseURL === null ? undefined : xhr.responseURL;\n\n        this.xhrRequests.delete(segment.id);\n        this.failedSegments.set(segment.id, this.now() + this.settings.httpFailedSegmentTimeout);\n        this.emit(\"segment-error\", segment, error);\n    };\n\n    private cleanTimedOutFailedSegments = () => {\n        const now = this.now();\n        const candidates: string[] = [];\n\n        this.failedSegments.forEach((time, id) => {\n            if (time < now) {\n                candidates.push(id);\n            }\n        });\n\n        candidates.forEach((id) => this.failedSegments.delete(id));\n    };\n\n    private now = () => performance.now();\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Debug from \"debug\";\nimport { EventEmitter } from \"events\";\nimport Peer from \"simple-peer\";\n\nimport { LoaderInterface, Events, Segment } from \"./loader-interface\";\nimport { HttpMediaManager } from \"./http-media-manager\";\nimport { P2PMediaManager } from \"./p2p-media-manager\";\nimport { MediaPeerSegmentStatus } from \"./media-peer\";\nimport { BandwidthApproximator } from \"./bandwidth-approximator\";\nimport { SegmentsMemoryStorage } from \"./segments-memory-storage\";\n\nconst defaultSettings: HybridLoaderSettings = {\n    cachedSegmentExpiration: 5 * 60 * 1000,\n    cachedSegmentsCount: 30,\n\n    useP2P: true,\n    consumeOnly: false,\n\n    requiredSegmentsPriority: 1,\n\n    simultaneousHttpDownloads: 2,\n    httpDownloadProbability: 0.1,\n    httpDownloadProbabilityInterval: 1000,\n    httpDownloadProbabilitySkipIfNoPeers: false,\n    httpFailedSegmentTimeout: 10000,\n    httpDownloadMaxPriority: 20,\n    httpDownloadInitialTimeout: 0,\n    httpDownloadInitialTimeoutPerSegment: 4000,\n    httpUseRanges: false,\n\n    simultaneousP2PDownloads: 3,\n    p2pDownloadMaxPriority: 20,\n    p2pSegmentDownloadTimeout: 60000,\n\n    webRtcMaxMessageSize: 64 * 1024 - 1,\n    trackerAnnounce: [\"wss://tracker.novage.com.ua\", \"wss://tracker.openwebtorrent.com\"],\n    peerRequestsPerAnnounce: 10,\n    rtcConfig: (Peer as { config: RTCConfiguration }).config,\n};\n\nexport class HybridLoader extends EventEmitter implements LoaderInterface {\n    private readonly debug = Debug(\"p2pml:hybrid-loader\");\n    private readonly debugSegments = Debug(\"p2pml:hybrid-loader-segments\");\n    private readonly httpManager: HttpMediaManager;\n    private readonly p2pManager: P2PMediaManager;\n    private segmentsStorage: SegmentsStorage;\n    private segmentsQueue: Segment[] = [];\n    private readonly bandwidthApproximator = new BandwidthApproximator();\n    private readonly settings: HybridLoaderSettings;\n    private httpRandomDownloadInterval: ReturnType<typeof setInterval> | undefined;\n    private httpDownloadInitialTimeoutTimestamp = -Infinity;\n    private masterSwarmId?: string;\n\n    public static isSupported = (): boolean => {\n        return window.RTCPeerConnection.prototype.createDataChannel !== undefined;\n    };\n\n    public constructor(settings: Partial<HybridLoaderSettings> = {}) {\n        super();\n\n        this.settings = { ...defaultSettings, ...settings };\n\n        const { bufferedSegmentsCount } = settings as Record<string, unknown>;\n\n        if (typeof bufferedSegmentsCount === \"number\") {\n            if (settings.p2pDownloadMaxPriority === undefined) {\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\n            }\n\n            if (settings.httpDownloadMaxPriority === undefined) {\n                this.settings.p2pDownloadMaxPriority = bufferedSegmentsCount;\n            }\n        }\n\n        this.segmentsStorage =\n            this.settings.segmentsStorage === undefined\n                ? new SegmentsMemoryStorage(this.settings)\n                : this.settings.segmentsStorage;\n\n        this.debug(\"loader settings\", this.settings);\n\n        this.httpManager = this.createHttpManager();\n        this.httpManager.on(\"segment-loaded\", this.onSegmentLoaded);\n        this.httpManager.on(\"segment-error\", this.onSegmentError);\n        this.httpManager.on(\"bytes-downloaded\", (bytes: number) => this.onPieceBytesDownloaded(\"http\", bytes));\n\n        this.p2pManager = this.createP2PManager();\n        this.p2pManager.on(\"segment-loaded\", this.onSegmentLoaded);\n        this.p2pManager.on(\"segment-error\", this.onSegmentError);\n        this.p2pManager.on(\"peer-data-updated\", async () => {\n            if (this.masterSwarmId === undefined) {\n                return;\n            }\n\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n            }\n        });\n        this.p2pManager.on(\"bytes-downloaded\", (bytes: number, peerId: string) =>\n            this.onPieceBytesDownloaded(\"p2p\", bytes, peerId)\n        );\n        this.p2pManager.on(\"bytes-uploaded\", (bytes: number, peerId: string) =>\n            this.onPieceBytesUploaded(\"p2p\", bytes, peerId)\n        );\n        this.p2pManager.on(\"peer-connected\", this.onPeerConnect);\n        this.p2pManager.on(\"peer-closed\", this.onPeerClose);\n        this.p2pManager.on(\"tracker-update\", this.onTrackerUpdate);\n    }\n\n    private createHttpManager = () => {\n        return new HttpMediaManager(this.settings);\n    };\n\n    private createP2PManager = () => {\n        return new P2PMediaManager(this.segmentsStorage, this.settings);\n    };\n\n    public load = async (segments: Segment[], streamSwarmId: string): Promise<void> => {\n        if (this.httpRandomDownloadInterval === undefined) {\n            // Do once on first call\n            this.httpRandomDownloadInterval = setInterval(\n                this.downloadRandomSegmentOverHttp,\n                this.settings.httpDownloadProbabilityInterval\n            );\n\n            if (\n                this.settings.httpDownloadInitialTimeout > 0 &&\n                this.settings.httpDownloadInitialTimeoutPerSegment > 0\n            ) {\n                // Initialize initial HTTP download timeout (i.e. download initial segments over P2P)\n                this.debugSegments(\n                    \"enable initial HTTP download timeout\",\n                    this.settings.httpDownloadInitialTimeout,\n                    \"per segment\",\n                    this.settings.httpDownloadInitialTimeoutPerSegment\n                );\n                this.httpDownloadInitialTimeoutTimestamp = this.now();\n                setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment + 100);\n            }\n        }\n\n        if (segments.length > 0) {\n            this.masterSwarmId = segments[0].masterSwarmId;\n        }\n\n        if (this.masterSwarmId !== undefined) {\n            this.p2pManager.setStreamSwarmId(streamSwarmId, this.masterSwarmId);\n        }\n\n        this.debug(\"load segments\");\n\n        let updateSegmentsMap = false;\n\n        // stop all http requests and p2p downloads for segments that are not in the new load\n        for (const segment of this.segmentsQueue) {\n            if (!segments.find((f) => f.url === segment.url)) {\n                this.debug(\"remove segment\", segment.url);\n                if (this.httpManager.isDownloading(segment)) {\n                    updateSegmentsMap = true;\n                    this.httpManager.abort(segment);\n                } else {\n                    this.p2pManager.abort(segment);\n                }\n                this.emit(Events.SegmentAbort, segment);\n            }\n        }\n\n        if (this.debug.enabled) {\n            for (const segment of segments) {\n                if (!this.segmentsQueue.find((f) => f.url === segment.url)) {\n                    this.debug(\"add segment\", segment.url);\n                }\n            }\n        }\n\n        this.segmentsQueue = segments;\n\n        if (this.masterSwarmId === undefined) {\n            return;\n        }\n\n        let storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n        updateSegmentsMap = this.processSegmentsQueue(storageSegments) || updateSegmentsMap;\n\n        if (await this.cleanSegmentsStorage()) {\n            storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            updateSegmentsMap = true;\n        }\n\n        if (updateSegmentsMap && !this.settings.consumeOnly) {\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n        }\n    };\n\n    public getSegment = async (id: string): Promise<Segment | undefined> => {\n        return this.masterSwarmId === undefined ? undefined : this.segmentsStorage.getSegment(id, this.masterSwarmId);\n    };\n\n    public getSettings = (): HybridLoaderSettings => {\n        return this.settings;\n    };\n\n    public getDetails = (): { peerId: string } => {\n        return {\n            peerId: this.p2pManager.getPeerId(),\n        };\n    };\n\n    public destroy = async (): Promise<void> => {\n        if (this.httpRandomDownloadInterval !== undefined) {\n            clearInterval(this.httpRandomDownloadInterval);\n            this.httpRandomDownloadInterval = undefined;\n        }\n\n        this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n\n        this.segmentsQueue = [];\n        this.httpManager.destroy();\n        this.p2pManager.destroy();\n        this.masterSwarmId = undefined;\n        await this.segmentsStorage.destroy();\n    };\n\n    private processInitialSegmentTimeout = async () => {\n        if (this.httpRandomDownloadInterval === undefined) {\n            return; // Instance destroyed\n        }\n\n        if (this.masterSwarmId !== undefined) {\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n            }\n        }\n\n        if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\n            // Set one more timeout for a next segment\n            setTimeout(this.processInitialSegmentTimeout, this.settings.httpDownloadInitialTimeoutPerSegment);\n        }\n    };\n\n    private processSegmentsQueue = (storageSegments: Map<string, { segment: Segment }>) => {\n        this.debugSegments(\n            \"process segments queue. priority\",\n            this.segmentsQueue.length > 0 ? this.segmentsQueue[0].priority : 0\n        );\n\n        if (this.masterSwarmId === undefined || this.segmentsQueue.length === 0) {\n            return false;\n        }\n\n        let updateSegmentsMap = false;\n        let segmentsMap: Map<string, MediaPeerSegmentStatus> | undefined;\n\n        let httpAllowed = true;\n\n        if (this.httpDownloadInitialTimeoutTimestamp !== -Infinity) {\n            let firstNotDownloadePriority: number | undefined;\n\n            for (const segment of this.segmentsQueue) {\n                if (!storageSegments.has(segment.id)) {\n                    firstNotDownloadePriority = segment.priority;\n                    break;\n                }\n            }\n\n            const httpTimeout = this.now() - this.httpDownloadInitialTimeoutTimestamp;\n            httpAllowed =\n                httpTimeout >= this.settings.httpDownloadInitialTimeout ||\n                (firstNotDownloadePriority !== undefined &&\n                    httpTimeout > this.settings.httpDownloadInitialTimeoutPerSegment &&\n                    firstNotDownloadePriority <= 0);\n\n            if (httpAllowed) {\n                this.debugSegments(\"cancel initial HTTP download timeout - timed out\");\n                this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n            }\n        }\n\n        for (let index = 0; index < this.segmentsQueue.length; index++) {\n            const segment = this.segmentsQueue[index];\n\n            if (storageSegments.has(segment.id) || this.httpManager.isDownloading(segment)) {\n                continue;\n            }\n\n            if (\n                segment.priority <= this.settings.requiredSegmentsPriority &&\n                httpAllowed &&\n                !this.httpManager.isFailed(segment)\n            ) {\n                // Download required segments over HTTP\n                if (this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads) {\n                    // Not enough HTTP download resources. Abort one of the HTTP downloads.\n                    for (let i = this.segmentsQueue.length - 1; i > index; i--) {\n                        const segmentToAbort = this.segmentsQueue[i];\n                        if (this.httpManager.isDownloading(segmentToAbort)) {\n                            this.debugSegments(\"cancel HTTP download\", segmentToAbort.priority, segmentToAbort.url);\n                            this.httpManager.abort(segmentToAbort);\n                            break;\n                        }\n                    }\n                }\n\n                if (this.httpManager.getActiveDownloadsCount() < this.settings.simultaneousHttpDownloads) {\n                    // Abort P2P download of the required segment if any and force HTTP download\n                    const downloadedPieces = this.p2pManager.abort(segment);\n                    this.httpManager.download(segment, downloadedPieces);\n                    this.debugSegments(\"HTTP download (priority)\", segment.priority, segment.url);\n                    updateSegmentsMap = true;\n                    continue;\n                }\n            }\n\n            if (this.p2pManager.isDownloading(segment)) {\n                continue;\n            }\n\n            if (segment.priority <= this.settings.requiredSegmentsPriority) {\n                // Download required segments over P2P\n                segmentsMap = segmentsMap ? segmentsMap : this.p2pManager.getOverallSegmentsMap();\n\n                if (segmentsMap.get(segment.id) !== MediaPeerSegmentStatus.Loaded) {\n                    continue;\n                }\n\n                if (this.p2pManager.getActiveDownloadsCount() >= this.settings.simultaneousP2PDownloads) {\n                    // Not enough P2P download resources. Abort one of the P2P downloads.\n                    for (let i = this.segmentsQueue.length - 1; i > index; i--) {\n                        const segmentToAbort = this.segmentsQueue[i];\n                        if (this.p2pManager.isDownloading(segmentToAbort)) {\n                            this.debugSegments(\"cancel P2P download\", segmentToAbort.priority, segmentToAbort.url);\n                            this.p2pManager.abort(segmentToAbort);\n                            break;\n                        }\n                    }\n                }\n\n                if (this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads) {\n                    if (this.p2pManager.download(segment)) {\n                        this.debugSegments(\"P2P download (priority)\", segment.priority, segment.url);\n                        continue;\n                    }\n                }\n\n                continue;\n            }\n\n            if (\n                this.p2pManager.getActiveDownloadsCount() < this.settings.simultaneousP2PDownloads &&\n                segment.priority <= this.settings.p2pDownloadMaxPriority\n            ) {\n                if (this.p2pManager.download(segment)) {\n                    this.debugSegments(\"P2P download\", segment.priority, segment.url);\n                }\n            }\n        }\n\n        return updateSegmentsMap;\n    };\n\n    private downloadRandomSegmentOverHttp = async () => {\n        if (\n            this.masterSwarmId === undefined ||\n            this.httpRandomDownloadInterval === undefined ||\n            this.httpDownloadInitialTimeoutTimestamp !== -Infinity ||\n            this.httpManager.getActiveDownloadsCount() >= this.settings.simultaneousHttpDownloads ||\n            (this.settings.httpDownloadProbabilitySkipIfNoPeers && this.p2pManager.getPeers().size === 0) ||\n            this.settings.consumeOnly\n        ) {\n            return;\n        }\n\n        const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n        const segmentsMap = this.p2pManager.getOverallSegmentsMap();\n\n        const pendingQueue = this.segmentsQueue.filter(\n            (s) =>\n                !this.p2pManager.isDownloading(s) &&\n                !this.httpManager.isDownloading(s) &&\n                !segmentsMap.has(s.id) &&\n                !this.httpManager.isFailed(s) &&\n                s.priority <= this.settings.httpDownloadMaxPriority &&\n                !storageSegments.has(s.id)\n        );\n\n        if (pendingQueue.length === 0) {\n            return;\n        }\n\n        if (Math.random() > this.settings.httpDownloadProbability * pendingQueue.length) {\n            return;\n        }\n\n        const segment = pendingQueue[Math.floor(Math.random() * pendingQueue.length)];\n        this.debugSegments(\"HTTP download (random)\", segment.priority, segment.url);\n        this.httpManager.download(segment);\n        this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n    };\n\n    private onPieceBytesDownloaded = (method: \"http\" | \"p2p\", bytes: number, peerId?: string) => {\n        this.bandwidthApproximator.addBytes(bytes, this.now());\n        this.emit(Events.PieceBytesDownloaded, method, bytes, peerId);\n    };\n\n    private onPieceBytesUploaded = (method: \"p2p\", bytes: number, peerId?: string) => {\n        this.emit(Events.PieceBytesUploaded, method, bytes, peerId);\n    };\n\n    private onSegmentLoaded = async (segment: Segment, data: ArrayBuffer, peerId?: string) => {\n        this.debugSegments(\"segment loaded\", segment.id, segment.url);\n\n        if (this.masterSwarmId === undefined) {\n            return;\n        }\n\n        segment.data = data;\n        segment.downloadBandwidth = this.bandwidthApproximator.getBandwidth(this.now());\n\n        await this.segmentsStorage.storeSegment(segment);\n        this.emit(Events.SegmentLoaded, segment, peerId);\n\n        const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n\n        this.processSegmentsQueue(storageSegments);\n        if (!this.settings.consumeOnly) {\n            this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n        }\n    };\n\n    private onSegmentError = async (segment: Segment, details: unknown, peerId?: string) => {\n        this.debugSegments(\"segment error\", segment.id, segment.url, peerId, details);\n        this.emit(Events.SegmentError, segment, details, peerId);\n        if (this.masterSwarmId !== undefined) {\n            const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n            if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n            }\n        }\n    };\n\n    private getStreamSwarmId = (segment: Segment) => {\n        return segment.streamId === undefined ? segment.masterSwarmId : `${segment.masterSwarmId}+${segment.streamId}`;\n    };\n\n    private createSegmentsMap = (storageSegments: Map<string, { segment: Segment }>) => {\n        const segmentsMap: { [key: string]: [string, number[]] } = {};\n\n        const addSegmentToMap = (segment: Segment, status: MediaPeerSegmentStatus) => {\n            const streamSwarmId = this.getStreamSwarmId(segment);\n            const segmentId = segment.sequence;\n\n            let segmentsIdsAndStatuses = segmentsMap[streamSwarmId];\n            if (segmentsIdsAndStatuses === undefined) {\n                segmentsIdsAndStatuses = [\"\", []];\n                segmentsMap[streamSwarmId] = segmentsIdsAndStatuses;\n            }\n            const segmentsStatuses = segmentsIdsAndStatuses[1];\n            segmentsIdsAndStatuses[0] += segmentsStatuses.length === 0 ? segmentId : `|${segmentId}`;\n            segmentsStatuses.push(status);\n        };\n\n        for (const storageSegment of storageSegments.values()) {\n            addSegmentToMap(storageSegment.segment, MediaPeerSegmentStatus.Loaded);\n        }\n\n        for (const download of this.httpManager.getActiveDownloads().values()) {\n            addSegmentToMap(download.segment, MediaPeerSegmentStatus.LoadingByHttp);\n        }\n\n        return segmentsMap;\n    };\n\n    private onPeerConnect = async (peer: { id: string }) => {\n        this.emit(Events.PeerConnect, peer);\n        if (!this.settings.consumeOnly && this.masterSwarmId !== undefined) {\n            this.p2pManager.sendSegmentsMap(\n                peer.id,\n                this.createSegmentsMap(await this.segmentsStorage.getSegmentsMap(this.masterSwarmId))\n            );\n        }\n    };\n\n    private onPeerClose = (peerId: string) => {\n        this.emit(Events.PeerClose, peerId);\n    };\n\n    private onTrackerUpdate = async (data: { incomplete?: number }) => {\n        if (\n            this.httpDownloadInitialTimeoutTimestamp !== -Infinity &&\n            data.incomplete !== undefined &&\n            data.incomplete <= 1\n        ) {\n            this.debugSegments(\"cancel initial HTTP download timeout - no peers\");\n\n            this.httpDownloadInitialTimeoutTimestamp = -Infinity;\n\n            if (this.masterSwarmId !== undefined) {\n                const storageSegments = await this.segmentsStorage.getSegmentsMap(this.masterSwarmId);\n\n                if (this.processSegmentsQueue(storageSegments) && !this.settings.consumeOnly) {\n                    this.p2pManager.sendSegmentsMapToAll(this.createSegmentsMap(storageSegments));\n                }\n            }\n        }\n    };\n\n    private cleanSegmentsStorage = async (): Promise<boolean> => {\n        if (this.masterSwarmId === undefined) {\n            return false;\n        }\n\n        return this.segmentsStorage.clean(\n            this.masterSwarmId,\n            (id: string) => this.segmentsQueue.find((queueSegment) => queueSegment.id === id) !== undefined\n        );\n    };\n\n    private now = () => {\n        return performance.now();\n    };\n}\n\nexport interface SegmentsStorage {\n    storeSegment: (segment: Segment) => Promise<void>;\n    getSegmentsMap: (masterSwarmId: string) => Promise<Map<string, { segment: Segment }>>;\n    getSegment: (id: string, masterSwarmId: string) => Promise<Segment | undefined>;\n    clean: (masterSwarmId: string, lockedSegmentsFilter?: (id: string) => boolean) => Promise<boolean>;\n    destroy: () => Promise<void>;\n}\n\nexport type SegmentValidatorCallback = (segment: Segment, method: \"http\" | \"p2p\", peerId?: string) => Promise<void>;\nexport type XhrSetupCallback = (xhr: XMLHttpRequest, url: string) => void;\nexport type SegmentUrlBuilder = (segment: Segment) => string;\n\nexport type HybridLoaderSettings = {\n    /**\n     * Segment lifetime in cache. The segment is deleted from the cache if the last access time is greater than this value (in milliseconds).\n     */\n    cachedSegmentExpiration: number;\n\n    /**\n     * Max number of segments that can be stored in the cache.\n     */\n    cachedSegmentsCount: number;\n\n    /**\n     * Enable/Disable peers interaction.\n     */\n    useP2P: boolean;\n\n    /**\n     * The peer will not upload segments data to the P2P network but still download from others.\n     */\n    consumeOnly: boolean;\n\n    /**\n     * The maximum priority of the segments to be downloaded (if not available) as quickly as possible (i.e. via HTTP method).\n     */\n    requiredSegmentsPriority: number;\n\n    /**\n     * Max number of simultaneous downloads from HTTP source.\n     */\n    simultaneousHttpDownloads: number;\n\n    /**\n     * Probability of downloading remaining not downloaded segment in the segments queue via HTTP.\n     */\n    httpDownloadProbability: number;\n\n    /**\n     * Interval of the httpDownloadProbability check (in milliseconds).\n     */\n    httpDownloadProbabilityInterval: number;\n\n    /**\n     * Don't download segments over HTTP randomly when there is no peers.\n     */\n    httpDownloadProbabilitySkipIfNoPeers: boolean;\n\n    /**\n     * Timeout before trying to load segment again via HTTP after failed attempt (in milliseconds).\n     */\n    httpFailedSegmentTimeout: number;\n\n    /**\n     * Segments with higher priority will not be downloaded over HTTP.\n     */\n    httpDownloadMaxPriority: number;\n\n    /**\n     * Try to download initial segments over P2P if the value is > 0.\n     * But HTTP download will be forcibly enabled if there is no peers on tracker or\n     * single sequential segment P2P download is timed out (see httpDownloadInitialTimeoutPerSegment).\n     */\n    httpDownloadInitialTimeout: number;\n\n    /**\n     * Use HTTP ranges requests where it is possible.\n     * Allows to continue (and not start over) aborted P2P downloads over HTTP.\n     */\n    httpUseRanges: boolean;\n\n    /**\n     * If initial HTTP download timeout is enabled (see httpDownloadInitialTimeout)\n     * this parameter sets additional timeout for a single sequential segment download\n     * over P2P. It will cancel initial HTTP download timeout mode if a segment download is timed out.\n     */\n    httpDownloadInitialTimeoutPerSegment: number;\n\n    /**\n     * Max number of simultaneous downloads from peers.\n     */\n    simultaneousP2PDownloads: number;\n\n    /**\n     * Segments with higher priority will not be downloaded over P2P.\n     */\n    p2pDownloadMaxPriority: number;\n\n    /**\n     * Timeout to download a segment from a peer. If exceeded the peer is dropped.\n     */\n    p2pSegmentDownloadTimeout: number;\n\n    /**\n     * Max WebRTC message size. 64KiB - 1B should work with most of recent browsers. Set it to 16KiB for older browsers support.\n     */\n    webRtcMaxMessageSize: number;\n\n    /**\n     * Torrent trackers (announcers) to use.\n     */\n    trackerAnnounce: string[];\n\n    /**\n     * Number of requested peers in each announce for each tracker. Maximum is 10.\n     */\n    peerRequestsPerAnnounce: number;\n\n    /**\n     * An RTCConfiguration dictionary providing options to configure WebRTC connections.\n     */\n    rtcConfig: RTCConfiguration;\n\n    /**\n     * Segment validation callback - validates the data after it has been downloaded.\n     */\n    segmentValidator?: SegmentValidatorCallback;\n\n    /**\n     * XMLHttpRequest setup callback. Handle it when you need additional setup for requests made by the library.\n     */\n    xhrSetup?: XhrSetupCallback;\n\n    /**\n     * Allow to modify the segment URL before HTTP request.\n     */\n    segmentUrlBuilder?: SegmentUrlBuilder;\n\n    /**\n     * A storage for the downloaded segments.\n     * By default the segments are stored in JavaScript memory.\n     */\n    segmentsStorage?: SegmentsStorage;\n};\n","/**\n * @license Apache-2.0\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const version = \"0.6.2\";\nexport * from \"./loader-interface\";\nexport * from \"./hybrid-loader\";\n\ndeclare global {\n    interface Window {\n        p2pml: Record<string, unknown>;\n    }\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type Segment = {\n    readonly id: string;\n    readonly url: string;\n    readonly masterSwarmId: string;\n    readonly masterManifestUri: string;\n    readonly streamId: string | undefined;\n    readonly sequence: string;\n    readonly range: string | undefined;\n    readonly priority: number;\n    data?: ArrayBuffer;\n    downloadBandwidth?: number;\n    requestUrl?: string;\n    responseUrl?: string;\n};\n\nexport enum Events {\n    /**\n     * Emitted when segment has been downloaded.\n     * Args: segment\n     */\n    SegmentLoaded = \"segment_loaded\",\n\n    /**\n     * Emitted when an error occurred while loading the segment.\n     * Args: segment, error\n     */\n    SegmentError = \"segment_error\",\n\n    /**\n     * Emitted for each segment that does not hit into a new segments queue when the load() method is called.\n     * Args: segment\n     */\n    SegmentAbort = \"segment_abort\",\n\n    /**\n     * Emitted when a peer is connected.\n     * Args: peer\n     */\n    PeerConnect = \"peer_connect\",\n\n    /**\n     * Emitted when a peer is disconnected.\n     * Args: peerId\n     */\n    PeerClose = \"peer_close\",\n\n    /**\n     * Emitted when a segment piece has been downloaded.\n     * Args: method (can be \"http\" or \"p2p\" only), bytes\n     */\n    PieceBytesDownloaded = \"piece_bytes_downloaded\",\n\n    /**\n     * Emitted when a segment piece has been uploaded.\n     * Args: method (can be \"p2p\" only), bytes\n     */\n    PieceBytesUploaded = \"piece_bytes_uploaded\",\n}\n\nexport interface LoaderInterface {\n    on: ((eventName: string, listener: (...params: unknown[]) => void) => this) &\n        ((eventName: Events.SegmentLoaded, listener: (segment: Segment) => void) => this) &\n        ((eventName: Events.SegmentError, listener: (segment: Segment, error: unknown) => void) => this) &\n        ((eventName: Events.SegmentAbort, listener: (segment: Segment) => void) => this);\n    load: (segments: Segment[], streamSwarmId: string) => void;\n    getSegment: (id: string) => Promise<Segment | undefined>;\n    getSettings: () => unknown;\n    getDetails: () => unknown;\n    destroy: () => Promise<void>;\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n\nimport Debug from \"debug\";\nimport { Buffer } from \"buffer\";\n\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\n\nenum MediaPeerCommands {\n    SegmentData,\n    SegmentAbsent,\n    SegmentsMap,\n    SegmentRequest,\n    CancelSegmentRequest,\n}\n\ntype MediaPeerCommand =\n    | {\n          c:\n              | MediaPeerCommands.SegmentAbsent\n              | MediaPeerCommands.SegmentRequest\n              | MediaPeerCommands.CancelSegmentRequest;\n          i: string;\n      }\n    | {\n          c: MediaPeerCommands.SegmentsMap;\n          m: { [key: string]: [string, number[]] };\n      }\n    | {\n          c: MediaPeerCommands.SegmentData;\n          i: string;\n          s: number;\n      };\n\nexport enum MediaPeerSegmentStatus {\n    Loaded,\n    LoadingByHttp,\n}\n\nclass DownloadingSegment {\n    public bytesDownloaded = 0;\n    public pieces: ArrayBuffer[] = [];\n    constructor(readonly id: string, readonly size: number) {}\n}\n\nexport class MediaPeer extends STEEmitter<\n    | \"connect\"\n    | \"close\"\n    | \"data-updated\"\n    | \"segment-request\"\n    | \"segment-absent\"\n    | \"segment-loaded\"\n    | \"segment-error\"\n    | \"segment-timeout\"\n    | \"bytes-downloaded\"\n    | \"bytes-uploaded\"\n> {\n    public id: string;\n    public remoteAddress = \"\";\n    private downloadingSegmentId: string | null = null;\n    private downloadingSegment: DownloadingSegment | null = null;\n    private segmentsMap = new Map<string, MediaPeerSegmentStatus>();\n    private debug = Debug(\"p2pml:media-peer\");\n    private timer: ReturnType<typeof setTimeout> | null = null;\n\n    constructor(\n        // eslint-disable-next-line\n        readonly peer: any,\n        readonly settings: {\n            p2pSegmentDownloadTimeout: number;\n            webRtcMaxMessageSize: number;\n        }\n    ) {\n        super();\n\n        this.peer.on(\"connect\", this.onPeerConnect);\n        this.peer.on(\"close\", this.onPeerClose);\n        this.peer.on(\"error\", this.onPeerError);\n        this.peer.on(\"data\", this.onPeerData);\n\n        this.id = peer.id;\n    }\n\n    private onPeerConnect = () => {\n        this.debug(\"peer connect\", this.id, this);\n        this.remoteAddress = this.peer.remoteAddress;\n        this.emit(\"connect\", this);\n    };\n\n    private onPeerClose = () => {\n        this.debug(\"peer close\", this.id, this);\n        this.terminateSegmentRequest();\n        this.emit(\"close\", this);\n    };\n\n    private onPeerError = (error: unknown) => {\n        this.debug(\"peer error\", this.id, error, this);\n    };\n\n    private receiveSegmentPiece = (data: ArrayBuffer): void => {\n        if (!this.downloadingSegment) {\n            // The segment was not requested or canceled\n            this.debug(\"peer segment not requested\", this.id, this);\n            return;\n        }\n\n        this.downloadingSegment.bytesDownloaded += data.byteLength;\n        this.downloadingSegment.pieces.push(data);\n        this.emit(\"bytes-downloaded\", this, data.byteLength);\n\n        const segmentId = this.downloadingSegment.id;\n\n        if (this.downloadingSegment.bytesDownloaded === this.downloadingSegment.size) {\n            const segmentData = new Uint8Array(this.downloadingSegment.size);\n            let offset = 0;\n            for (const piece of this.downloadingSegment.pieces) {\n                segmentData.set(new Uint8Array(piece), offset);\n                offset += piece.byteLength;\n            }\n\n            this.debug(\"peer segment download done\", this.id, segmentId, this);\n            this.terminateSegmentRequest();\n            this.emit(\"segment-loaded\", this, segmentId, segmentData.buffer);\n        } else if (this.downloadingSegment.bytesDownloaded > this.downloadingSegment.size) {\n            this.debug(\"peer segment download bytes mismatch\", this.id, segmentId, this);\n            this.terminateSegmentRequest();\n            this.emit(\"segment-error\", this, segmentId, \"Too many bytes received for segment\");\n        }\n    };\n\n    private getJsonCommand = (data: ArrayBuffer) => {\n        const bytes = new Uint8Array(data);\n\n        // Serialized JSON string check by first, second and last characters: '{\" .... }'\n        if (bytes[0] === 123 && bytes[1] === 34 && bytes[data.byteLength - 1] === 125) {\n            try {\n                return JSON.parse(new TextDecoder().decode(data)) as Record<string, unknown>;\n            } catch {\n                return null;\n            }\n        }\n\n        return null;\n    };\n\n    private onPeerData = (data: ArrayBuffer) => {\n        const command = this.getJsonCommand(data);\n\n        if (command === null) {\n            this.receiveSegmentPiece(data);\n            return;\n        }\n\n        if (this.downloadingSegment) {\n            this.debug(\"peer segment download is interrupted by a command\", this.id, this);\n\n            const segmentId = this.downloadingSegment.id;\n            this.terminateSegmentRequest();\n            this.emit(\"segment-error\", this, segmentId, \"Segment download is interrupted by a command\");\n            return;\n        }\n\n        this.debug(\"peer receive command\", this.id, command, this);\n\n        switch (command.c) {\n            case MediaPeerCommands.SegmentsMap:\n                this.segmentsMap = this.createSegmentsMap(command.m);\n                this.emit(\"data-updated\");\n                break;\n\n            case MediaPeerCommands.SegmentRequest:\n                this.emit(\"segment-request\", this, command.i);\n                break;\n\n            case MediaPeerCommands.SegmentData:\n                if (\n                    this.downloadingSegmentId &&\n                    this.downloadingSegmentId === command.i &&\n                    typeof command.s === \"number\" &&\n                    command.s >= 0\n                ) {\n                    this.downloadingSegment = new DownloadingSegment(command.i, command.s);\n                    this.cancelResponseTimeoutTimer();\n                }\n                break;\n\n            case MediaPeerCommands.SegmentAbsent:\n                if (this.downloadingSegmentId && this.downloadingSegmentId === command.i) {\n                    this.terminateSegmentRequest();\n                    this.segmentsMap.delete(command.i);\n                    this.emit(\"segment-absent\", this, command.i);\n                }\n                break;\n\n            case MediaPeerCommands.CancelSegmentRequest:\n                // TODO: peer stop sending buffer\n                break;\n\n            default:\n                break;\n        }\n    };\n\n    private createSegmentsMap = (segments: unknown) => {\n        if (!(segments instanceof Object)) {\n            return new Map<string, MediaPeerSegmentStatus>();\n        }\n\n        const segmentsMap = new Map<string, MediaPeerSegmentStatus>();\n\n        for (const streamSwarmId of Object.keys(segments)) {\n            const swarmData = (segments as Record<string, unknown>)[streamSwarmId];\n            if (\n                !(swarmData instanceof Array) ||\n                swarmData.length !== 2 ||\n                typeof swarmData[0] !== \"string\" ||\n                !(swarmData[1] instanceof Array)\n            ) {\n                return new Map<string, MediaPeerSegmentStatus>();\n            }\n\n            const segmentsIds = swarmData[0].split(\"|\");\n            const segmentsStatuses = swarmData[1] as MediaPeerSegmentStatus[];\n\n            if (segmentsIds.length !== segmentsStatuses.length) {\n                return new Map<string, MediaPeerSegmentStatus>();\n            }\n\n            for (let i = 0; i < segmentsIds.length; i++) {\n                const segmentStatus = segmentsStatuses[i];\n                if (typeof segmentStatus !== \"number\" || MediaPeerSegmentStatus[segmentStatus] === undefined) {\n                    return new Map<string, MediaPeerSegmentStatus>();\n                }\n\n                segmentsMap.set(`${streamSwarmId}+${segmentsIds[i]}`, segmentStatus);\n            }\n        }\n\n        return segmentsMap;\n    };\n\n    private sendCommand = (command: MediaPeerCommand): void => {\n        this.debug(\"peer send command\", this.id, command, this);\n        this.peer.write(JSON.stringify(command));\n    };\n\n    public destroy = (): void => {\n        this.debug(\"peer destroy\", this.id, this);\n        this.terminateSegmentRequest();\n        this.peer.destroy();\n    };\n\n    public getDownloadingSegmentId = (): string | null => {\n        return this.downloadingSegmentId;\n    };\n\n    public getSegmentsMap = (): Map<string, MediaPeerSegmentStatus> => {\n        return this.segmentsMap;\n    };\n\n    public sendSegmentsMap = (segmentsMap: { [key: string]: [string, number[]] }): void => {\n        this.sendCommand({ c: MediaPeerCommands.SegmentsMap, m: segmentsMap });\n    };\n\n    public sendSegmentData = (segmentId: string, data: ArrayBuffer): void => {\n        this.sendCommand({\n            c: MediaPeerCommands.SegmentData,\n            i: segmentId,\n            s: data.byteLength,\n        });\n\n        let bytesLeft = data.byteLength;\n        while (bytesLeft > 0) {\n            const bytesToSend =\n                bytesLeft >= this.settings.webRtcMaxMessageSize ? this.settings.webRtcMaxMessageSize : bytesLeft;\n            const buffer = Buffer.from(data, data.byteLength - bytesLeft, bytesToSend);\n\n            this.peer.write(buffer);\n            bytesLeft -= bytesToSend;\n        }\n\n        this.emit(\"bytes-uploaded\", this, data.byteLength);\n    };\n\n    public sendSegmentAbsent = (segmentId: string): void => {\n        this.sendCommand({ c: MediaPeerCommands.SegmentAbsent, i: segmentId });\n    };\n\n    public requestSegment = (segmentId: string): void => {\n        if (this.downloadingSegmentId) {\n            throw new Error(\"A segment is already downloading: \" + this.downloadingSegmentId);\n        }\n\n        this.sendCommand({ c: MediaPeerCommands.SegmentRequest, i: segmentId });\n        this.downloadingSegmentId = segmentId;\n        this.runResponseTimeoutTimer();\n    };\n\n    public cancelSegmentRequest = (): ArrayBuffer[] | undefined => {\n        let downloadingSegment: ArrayBuffer[] | undefined;\n\n        if (this.downloadingSegmentId) {\n            const segmentId = this.downloadingSegmentId;\n            downloadingSegment = this.downloadingSegment ? this.downloadingSegment.pieces : undefined;\n            this.terminateSegmentRequest();\n            this.sendCommand({ c: MediaPeerCommands.CancelSegmentRequest, i: segmentId });\n        }\n\n        return downloadingSegment;\n    };\n\n    private runResponseTimeoutTimer = (): void => {\n        this.timer = setTimeout(() => {\n            this.timer = null;\n            if (!this.downloadingSegmentId) {\n                return;\n            }\n            const segmentId = this.downloadingSegmentId;\n            this.cancelSegmentRequest();\n            this.emit(\"segment-timeout\", this, segmentId); // TODO: send peer not responding event\n        }, this.settings.p2pSegmentDownloadTimeout);\n    };\n\n    private cancelResponseTimeoutTimer = (): void => {\n        if (this.timer) {\n            clearTimeout(this.timer);\n            this.timer = null;\n        }\n    };\n\n    private terminateSegmentRequest = () => {\n        this.downloadingSegmentId = null;\n        this.downloadingSegment = null;\n        this.cancelResponseTimeoutTimer();\n    };\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport Debug from \"debug\";\nimport Client from \"bittorrent-tracker/client\";\nimport { Buffer } from \"buffer\";\nimport sha1 from \"sha.js/sha1\";\n\nimport { STEEmitter } from \"./stringly-typed-event-emitter\";\nimport { Segment } from \"./loader-interface\";\nimport { MediaPeer, MediaPeerSegmentStatus } from \"./media-peer\";\nimport { version } from \"./index\";\nimport { SegmentsStorage, SegmentValidatorCallback } from \"./hybrid-loader\";\n\nconst PEER_PROTOCOL_VERSION = 2;\nconst PEER_ID_VERSION_STRING = version.replace(/\\d*./g, (v) => `0${parseInt(v, 10) % 100}`.slice(-2)).slice(0, 4);\nconst PEER_ID_VERSION_PREFIX = `-WW${PEER_ID_VERSION_STRING}-`; // Using WebTorrent client ID in order to not be banned by websocket trackers\n\nclass PeerSegmentRequest {\n    constructor(readonly peerId: string, readonly segment: Segment) {}\n}\n\nfunction generatePeerId(): ArrayBuffer {\n    const PEER_ID_SYMBOLS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const PEER_ID_LENGTH = 20;\n\n    let peerId = PEER_ID_VERSION_PREFIX;\n\n    for (let i = 0; i < PEER_ID_LENGTH - PEER_ID_VERSION_PREFIX.length; i++) {\n        peerId += PEER_ID_SYMBOLS.charAt(Math.floor(Math.random() * PEER_ID_SYMBOLS.length));\n    }\n\n    return new TextEncoder().encode(peerId).buffer;\n}\n\nexport class P2PMediaManager extends STEEmitter<\n    | \"peer-connected\"\n    | \"peer-closed\"\n    | \"peer-data-updated\"\n    | \"segment-loaded\"\n    | \"segment-error\"\n    | \"bytes-downloaded\"\n    | \"bytes-uploaded\"\n    | \"tracker-update\"\n> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private trackerClient: any = null;\n    private peers = new Map<string, MediaPeer>();\n    private peerCandidates = new Map<string, MediaPeer[]>();\n    private peerSegmentRequests = new Map<string, PeerSegmentRequest>();\n    private streamSwarmId: string | null = null;\n    private readonly peerId: ArrayBuffer;\n    private debug = Debug(\"p2pml:p2p-media-manager\");\n    private pendingTrackerClient: {\n        isDestroyed: boolean;\n    } | null = null;\n    private masterSwarmId?: string;\n\n    public constructor(\n        private segmentsStorage: SegmentsStorage,\n        private settings: {\n            useP2P: boolean;\n            trackerAnnounce: string[];\n            p2pSegmentDownloadTimeout: number;\n            segmentValidator?: SegmentValidatorCallback;\n            webRtcMaxMessageSize: number;\n            rtcConfig?: RTCConfiguration;\n            peerRequestsPerAnnounce: number;\n        }\n    ) {\n        super();\n\n        this.peerId = settings.useP2P ? generatePeerId() : new ArrayBuffer(0);\n\n        if (this.debug.enabled) {\n            this.debug(\"peer ID\", this.getPeerId(), new TextDecoder().decode(this.peerId));\n        }\n    }\n\n    public getPeers = (): Map<string, MediaPeer> => {\n        return this.peers;\n    };\n\n    public getPeerId = (): string => {\n        return Buffer.from(this.peerId).toString(\"hex\");\n    };\n\n    public setStreamSwarmId = (streamSwarmId: string, masterSwarmId: string): void => {\n        if (this.streamSwarmId === streamSwarmId) {\n            return;\n        }\n\n        this.destroy(true);\n\n        this.streamSwarmId = streamSwarmId;\n        this.masterSwarmId = masterSwarmId;\n        this.debug(\"stream swarm ID\", this.streamSwarmId);\n\n        this.pendingTrackerClient = {\n            isDestroyed: false,\n        };\n\n        const pendingTrackerClient = this.pendingTrackerClient;\n\n        // TODO: native browser 'crypto.subtle' implementation doesn't work in Chrome in insecure pages\n        // TODO: Edge doesn't support SHA-1. Change to SHA-256 once Edge support is required.\n        // const infoHash = await crypto.subtle.digest(\"SHA-1\", new TextEncoder().encode(PEER_PROTOCOL_VERSION + this.streamSwarmId));\n\n        const infoHash = new sha1().update(`${PEER_PROTOCOL_VERSION}${this.streamSwarmId}`).digest();\n\n        // destroy may be called while waiting for the hash to be calculated\n        if (!pendingTrackerClient.isDestroyed) {\n            this.pendingTrackerClient = null;\n            this.createClient(infoHash);\n        } else if (this.trackerClient !== null) {\n            this.trackerClient.destroy();\n            this.trackerClient = null;\n        }\n    };\n\n    private createClient = (infoHash: ArrayBuffer): void => {\n        if (!this.settings.useP2P) {\n            return;\n        }\n\n        const clientOptions = {\n            infoHash: Buffer.from(infoHash, 0, 20),\n            peerId: Buffer.from(this.peerId, 0, 20),\n            announce: this.settings.trackerAnnounce,\n            rtcConfig: this.settings.rtcConfig,\n            port: 6881, // a dummy value allows running in Node.js environment\n            getAnnounceOpts: () => {\n                return { numwant: this.settings.peerRequestsPerAnnounce };\n            },\n        };\n\n        let oldTrackerClient = this.trackerClient;\n\n        this.trackerClient = new Client(clientOptions);\n        this.trackerClient.on(\"error\", this.onTrackerError);\n        this.trackerClient.on(\"warning\", this.onTrackerWarning);\n        this.trackerClient.on(\"update\", this.onTrackerUpdate);\n        this.trackerClient.on(\"peer\", this.onTrackerPeer);\n\n        this.trackerClient.start();\n\n        if (oldTrackerClient !== null) {\n            oldTrackerClient.destroy();\n            oldTrackerClient = null;\n        }\n    };\n\n    private onTrackerError = (error: unknown) => {\n        this.debug(\"tracker error\", error);\n    };\n\n    private onTrackerWarning = (warning: unknown) => {\n        this.debug(\"tracker warning\", warning);\n    };\n\n    private onTrackerUpdate = (data: unknown): void => {\n        this.debug(\"tracker update\", data);\n        this.emit(\"tracker-update\", data);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private onTrackerPeer = (trackerPeer: any): void => {\n        this.debug(\"tracker peer\", trackerPeer.id, trackerPeer);\n\n        if (this.peers.has(trackerPeer.id)) {\n            this.debug(\"tracker peer already connected\", trackerPeer.id, trackerPeer);\n            trackerPeer.destroy();\n            return;\n        }\n\n        const peer = new MediaPeer(trackerPeer, this.settings);\n\n        peer.on(\"connect\", this.onPeerConnect);\n        peer.on(\"close\", this.onPeerClose);\n        peer.on(\"data-updated\", this.onPeerDataUpdated);\n        peer.on(\"segment-request\", this.onSegmentRequest);\n        peer.on(\"segment-loaded\", this.onSegmentLoaded);\n        peer.on(\"segment-absent\", this.onSegmentAbsent);\n        peer.on(\"segment-error\", this.onSegmentError);\n        peer.on(\"segment-timeout\", this.onSegmentTimeout);\n        peer.on(\"bytes-downloaded\", this.onPieceBytesDownloaded);\n        peer.on(\"bytes-uploaded\", this.onPieceBytesUploaded);\n\n        let peerCandidatesById = this.peerCandidates.get(peer.id);\n\n        if (!peerCandidatesById) {\n            peerCandidatesById = [];\n            this.peerCandidates.set(peer.id, peerCandidatesById);\n        }\n\n        peerCandidatesById.push(peer);\n    };\n\n    public download = (segment: Segment): boolean => {\n        if (this.isDownloading(segment)) {\n            return false;\n        }\n\n        const candidates: MediaPeer[] = [];\n\n        for (const peer of this.peers.values()) {\n            if (\n                peer.getDownloadingSegmentId() === null &&\n                peer.getSegmentsMap().get(segment.id) === MediaPeerSegmentStatus.Loaded\n            ) {\n                candidates.push(peer);\n            }\n        }\n\n        if (candidates.length === 0) {\n            return false;\n        }\n\n        const peer = candidates[Math.floor(Math.random() * candidates.length)];\n        peer.requestSegment(segment.id);\n        this.peerSegmentRequests.set(segment.id, new PeerSegmentRequest(peer.id, segment));\n        return true;\n    };\n\n    public abort = (segment: Segment): ArrayBuffer[] | undefined => {\n        let downloadingSegment: ArrayBuffer[] | undefined;\n        const peerSegmentRequest = this.peerSegmentRequests.get(segment.id);\n        if (peerSegmentRequest) {\n            const peer = this.peers.get(peerSegmentRequest.peerId);\n            if (peer) {\n                downloadingSegment = peer.cancelSegmentRequest();\n            }\n            this.peerSegmentRequests.delete(segment.id);\n        }\n        return downloadingSegment;\n    };\n\n    public isDownloading = (segment: Segment): boolean => {\n        return this.peerSegmentRequests.has(segment.id);\n    };\n\n    public getActiveDownloadsCount = (): number => {\n        return this.peerSegmentRequests.size;\n    };\n\n    public destroy = (swarmChange = false): void => {\n        this.streamSwarmId = null;\n\n        if (this.trackerClient) {\n            this.trackerClient.stop();\n            if (swarmChange) {\n                // Don't destroy trackerClient to reuse its WebSocket connection to the tracker server\n                this.trackerClient.removeAllListeners(\"error\");\n                this.trackerClient.removeAllListeners(\"warning\");\n                this.trackerClient.removeAllListeners(\"update\");\n                this.trackerClient.removeAllListeners(\"peer\");\n            } else {\n                this.trackerClient.destroy();\n                this.trackerClient = null;\n            }\n        }\n\n        if (this.pendingTrackerClient) {\n            this.pendingTrackerClient.isDestroyed = true;\n            this.pendingTrackerClient = null;\n        }\n\n        this.peers.forEach((peer) => peer.destroy());\n        this.peers.clear();\n\n        this.peerSegmentRequests.clear();\n\n        for (const peerCandidateById of this.peerCandidates.values()) {\n            for (const peerCandidate of peerCandidateById) {\n                peerCandidate.destroy();\n            }\n        }\n        this.peerCandidates.clear();\n    };\n\n    public sendSegmentsMapToAll = (segmentsMap: { [key: string]: [string, number[]] }): void => {\n        this.peers.forEach((peer) => peer.sendSegmentsMap(segmentsMap));\n    };\n\n    public sendSegmentsMap = (peerId: string, segmentsMap: { [key: string]: [string, number[]] }): void => {\n        const peer = this.peers.get(peerId);\n        if (peer) {\n            peer.sendSegmentsMap(segmentsMap);\n        }\n    };\n\n    public getOverallSegmentsMap = (): Map<string, MediaPeerSegmentStatus> => {\n        const overallSegmentsMap = new Map<string, MediaPeerSegmentStatus>();\n\n        for (const peer of this.peers.values()) {\n            for (const [segmentId, segmentStatus] of peer.getSegmentsMap()) {\n                if (segmentStatus === MediaPeerSegmentStatus.Loaded) {\n                    overallSegmentsMap.set(segmentId, MediaPeerSegmentStatus.Loaded);\n                } else if (!overallSegmentsMap.get(segmentId)) {\n                    overallSegmentsMap.set(segmentId, MediaPeerSegmentStatus.LoadingByHttp);\n                }\n            }\n        }\n\n        return overallSegmentsMap;\n    };\n\n    private onPieceBytesDownloaded = (peer: MediaPeer, bytes: number) => {\n        this.emit(\"bytes-downloaded\", bytes, peer.id);\n    };\n\n    private onPieceBytesUploaded = (peer: MediaPeer, bytes: number) => {\n        this.emit(\"bytes-uploaded\", bytes, peer.id);\n    };\n\n    private onPeerConnect = (peer: MediaPeer) => {\n        const connectedPeer = this.peers.get(peer.id);\n\n        if (connectedPeer) {\n            this.debug(\"tracker peer already connected (in peer connect)\", peer.id, peer);\n            peer.destroy();\n            return;\n        }\n\n        // First peer with the ID connected\n        this.peers.set(peer.id, peer);\n\n        // Destroy all other peer candidates\n        const peerCandidatesById = this.peerCandidates.get(peer.id);\n        if (peerCandidatesById) {\n            for (const peerCandidate of peerCandidatesById) {\n                if (peerCandidate !== peer) {\n                    peerCandidate.destroy();\n                }\n            }\n\n            this.peerCandidates.delete(peer.id);\n        }\n\n        this.emit(\"peer-connected\", { id: peer.id, remoteAddress: peer.remoteAddress });\n    };\n\n    private onPeerClose = (peer: MediaPeer) => {\n        if (this.peers.get(peer.id) !== peer) {\n            // Try to delete the peer candidate\n\n            const peerCandidatesById = this.peerCandidates.get(peer.id);\n            if (!peerCandidatesById) {\n                return;\n            }\n\n            const index = peerCandidatesById.indexOf(peer);\n            if (index !== -1) {\n                peerCandidatesById.splice(index, 1);\n            }\n\n            if (peerCandidatesById.length === 0) {\n                this.peerCandidates.delete(peer.id);\n            }\n\n            return;\n        }\n\n        for (const [key, value] of this.peerSegmentRequests) {\n            if (value.peerId === peer.id) {\n                this.peerSegmentRequests.delete(key);\n            }\n        }\n\n        this.peers.delete(peer.id);\n        this.emit(\"peer-data-updated\");\n        this.emit(\"peer-closed\", peer.id);\n    };\n\n    private onPeerDataUpdated = () => {\n        this.emit(\"peer-data-updated\");\n    };\n\n    private onSegmentRequest = async (peer: MediaPeer, segmentId: string) => {\n        if (this.masterSwarmId === undefined) {\n            return;\n        }\n\n        const segment = await this.segmentsStorage.getSegment(segmentId, this.masterSwarmId);\n        if (segment && segment.data) {\n            peer.sendSegmentData(segmentId, segment.data);\n        } else {\n            peer.sendSegmentAbsent(segmentId);\n        }\n    };\n\n    private onSegmentLoaded = async (peer: MediaPeer, segmentId: string, data: ArrayBuffer) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n        if (!peerSegmentRequest) {\n            return;\n        }\n\n        const segment = peerSegmentRequest.segment;\n\n        if (this.settings.segmentValidator) {\n            try {\n                await this.settings.segmentValidator({ ...segment, data: data }, \"p2p\", peer.id);\n            } catch (error) {\n                this.debug(\"segment validator failed\", error);\n                this.peerSegmentRequests.delete(segmentId);\n                this.emit(\"segment-error\", segment, error, peer.id);\n                this.onPeerClose(peer);\n                return;\n            }\n        }\n\n        this.peerSegmentRequests.delete(segmentId);\n        this.emit(\"segment-loaded\", segment, data, peer.id);\n    };\n\n    private onSegmentAbsent = (peer: MediaPeer, segmentId: string) => {\n        this.peerSegmentRequests.delete(segmentId);\n        this.emit(\"peer-data-updated\");\n    };\n\n    private onSegmentError = (peer: MediaPeer, segmentId: string, description: string) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n        if (peerSegmentRequest) {\n            this.peerSegmentRequests.delete(segmentId);\n            this.emit(\"segment-error\", peerSegmentRequest.segment, description, peer.id);\n        }\n    };\n\n    private onSegmentTimeout = (peer: MediaPeer, segmentId: string) => {\n        const peerSegmentRequest = this.peerSegmentRequests.get(segmentId);\n        if (peerSegmentRequest) {\n            this.peerSegmentRequests.delete(segmentId);\n            peer.destroy();\n            if (this.peers.delete(peerSegmentRequest.peerId)) {\n                this.emit(\"peer-data-updated\");\n            }\n        }\n    };\n}\n","/**\n * Copyright 2019 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Segment } from \"./loader-interface\";\nimport { SegmentsStorage } from \"./hybrid-loader\";\n\nexport class SegmentsMemoryStorage implements SegmentsStorage {\n    private cache = new Map<string, { segment: Segment; lastAccessed: number }>();\n\n    constructor(\n        private settings: {\n            cachedSegmentExpiration: number;\n            cachedSegmentsCount: number;\n        }\n    ) {}\n\n    public storeSegment = async (segment: Segment): Promise<void> => {\n        this.cache.set(segment.id, { segment, lastAccessed: performance.now() });\n    };\n\n    public getSegmentsMap = async (): Promise<Map<string, { segment: Segment }>> => {\n        return this.cache;\n    };\n\n    public getSegment = async (id: string): Promise<Segment | undefined> => {\n        const cacheItem = this.cache.get(id);\n\n        if (cacheItem === undefined) {\n            return undefined;\n        }\n\n        cacheItem.lastAccessed = performance.now();\n        return cacheItem.segment;\n    };\n\n    public hasSegment = async (id: string): Promise<boolean> => {\n        return this.cache.has(id);\n    };\n\n    public clean = async (masterSwarmId: string, lockedSegmentsFilter?: (id: string) => boolean): Promise<boolean> => {\n        const segmentsToDelete: string[] = [];\n        const remainingSegments: { segment: Segment; lastAccessed: number }[] = [];\n\n        // Delete old segments\n        const now = performance.now();\n\n        for (const cachedSegment of this.cache.values()) {\n            if (now - cachedSegment.lastAccessed > this.settings.cachedSegmentExpiration) {\n                segmentsToDelete.push(cachedSegment.segment.id);\n            } else {\n                remainingSegments.push(cachedSegment);\n            }\n        }\n\n        // Delete segments over cached count\n        let countOverhead = remainingSegments.length - this.settings.cachedSegmentsCount;\n        if (countOverhead > 0) {\n            remainingSegments.sort((a, b) => a.lastAccessed - b.lastAccessed);\n\n            for (const cachedSegment of remainingSegments) {\n                if (lockedSegmentsFilter === undefined || !lockedSegmentsFilter(cachedSegment.segment.id)) {\n                    segmentsToDelete.push(cachedSegment.segment.id);\n                    countOverhead--;\n                    if (countOverhead === 0) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        segmentsToDelete.forEach((id) => this.cache.delete(id));\n        return segmentsToDelete.length > 0;\n    };\n\n    public destroy = async (): Promise<void> => {\n        this.cache.clear();\n    };\n}\n","/**\n * Copyright 2018 Novage LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { EventEmitter } from \"events\";\n\nexport class STEEmitter<T extends string | symbol> extends EventEmitter {\n    public on = (event: T, listener: (...args: any[]) => void): this => super.on(event, listener);\n    public emit = (event: T, ...args: any[]): boolean => super.emit(event, ...args);\n}\n","// Thanks https://github.com/streamroot/videojs-hlsjs-plugin\n// We duplicated this plugin to choose the hls.js version we want, because streamroot only provide a bundled file\n\n//import * as HlsjsLigt from 'hls.js/dist/hls.light.js'\n\nimport * as Hlsjs from 'hls.js'\n\nimport videojs from 'video.js'\nimport { HlsjsConfigHandlerOptions, QualityLevelRepresentation, QualityLevels, VideoJSTechHLS } from '../peertube-videojs-typings'\n\ntype ErrorCounts = {\n  [ type: string ]: number\n}\n\ntype Metadata = {\n  levels: Hlsjs.Level[]\n}\n\n\n\ntype CustomAudioTrack = Hlsjs.MediaPlaylist & { name?: string, lang?: string }\n\nconst registerSourceHandler = function (vjs: typeof videojs) {\n  if (!Hlsjs.default.isSupported()) {\n    console.warn('Hls.js is not supported in this browser!')\n    return\n  }\n\n  const html5 = vjs.getTech('Html5')\n\n  if (!html5) {\n    console.error('Not supported version if video.js')\n    return\n  }\n\n  // FIXME: typings\n  (html5 as any).registerSourceHandler({\n    canHandleSource: function (source: videojs.Tech.SourceObject) {\n      const hlsTypeRE = /^application\\/x-mpegURL|application\\/vnd\\.apple\\.mpegurl$/i\n      const hlsExtRE = /\\.m3u8/i\n\n      if (hlsTypeRE.test(source.type)) return 'probably'\n      if (hlsExtRE.test(source.src)) return 'maybe'\n\n      return ''\n    },\n\n    handleSource: function (source: videojs.Tech.SourceObject, tech: VideoJSTechHLS) {\n      if (tech.hlsProvider) {\n        tech.hlsProvider.dispose()\n      }\n\n      tech.hlsProvider = new Html5Hlsjs(vjs, source, tech)\n\n      return tech.hlsProvider\n    }\n  }, 0);\n\n  // FIXME: typings\n  (vjs as any).Html5Hlsjs = Html5Hlsjs\n}\n\nfunction hlsjsConfigHandler (this: videojs.Player, options: HlsjsConfigHandlerOptions) {\n  const player = this\n\n  if (!options) return\n\n  if (!player.srOptions_) {\n    player.srOptions_ = {}\n  }\n\n  if (!player.srOptions_.hlsjsConfig) {\n    player.srOptions_.hlsjsConfig = options.hlsjsConfig\n  }\n\n  if (!player.srOptions_.captionConfig) {\n    player.srOptions_.captionConfig = options.captionConfig\n  }\n\n  if (options.levelLabelHandler && !player.srOptions_.levelLabelHandler) {\n    player.srOptions_.levelLabelHandler = options.levelLabelHandler\n  }\n}\n\nconst registerConfigPlugin = function (vjs: typeof videojs) {\n  // Used in Brightcove since we don't pass options directly there\n  const registerVjsPlugin = vjs.registerPlugin || vjs.plugin\n  registerVjsPlugin('hlsjs', hlsjsConfigHandler)\n}\n\nclass Html5Hlsjs {\n  private static readonly hooks: { [id: string]: Function[] } = {}\n\n  private readonly videoElement: HTMLVideoElement\n  private readonly errorCounts: ErrorCounts = {}\n  private readonly player: videojs.Player\n  private readonly tech: videojs.Tech\n  private readonly source: videojs.Tech.SourceObject\n  private readonly vjs: typeof videojs\n\n  private hls: Hlsjs.default & { manualLevel?: number, audioTrack?: any, audioTracks?: CustomAudioTrack[] } // FIXME: typings\n  private hlsjsConfig: Partial<Hlsjs.HlsConfig & { cueHandler: any }> = null\n\n  private _duration: number = null\n  private metadata: Metadata = null\n  private isLive: boolean = null\n  private dvrDuration: number = null\n  private edgeMargin: number = null\n\n  private handlers: { [ id in 'play' | 'playing' | 'textTracksChange' | 'audioTracksChange' ]: EventListener } = {\n    play: null,\n    playing: null,\n    textTracksChange: null,\n    audioTracksChange: null\n  }\n\n  private uiTextTrackHandled = false\n\n  constructor (vjs: typeof videojs, source: videojs.Tech.SourceObject, tech: videojs.Tech) {\n    this.vjs = vjs\n    this.source = source\n\n    this.tech = tech;\n    (this.tech as any).name_ = 'Hlsjs'\n\n    this.videoElement = tech.el() as HTMLVideoElement\n    this.player = vjs((tech.options_ as any).playerId)\n\n    this.videoElement.addEventListener('error', event => {\n      let errorTxt: string\n      const mediaError = ((event.currentTarget || event.target) as HTMLVideoElement).error\n\n      if (!mediaError) return\n\n      console.log(mediaError)\n      switch (mediaError.code) {\n        case mediaError.MEDIA_ERR_ABORTED:\n          errorTxt = 'You aborted the video playback'\n          break\n        case mediaError.MEDIA_ERR_DECODE:\n          errorTxt = 'The video playback was aborted due to a corruption problem or because the video used features your browser did not support'\n          this._handleMediaError(mediaError)\n          break\n        case mediaError.MEDIA_ERR_NETWORK:\n          errorTxt = 'A network error caused the video download to fail part-way'\n          break\n        case mediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n          errorTxt = 'The video could not be loaded, either because the server or network failed or because the format is not supported'\n          break\n\n        default:\n          errorTxt = mediaError.message\n      }\n\n      console.error('MEDIA_ERROR: ', errorTxt)\n    })\n\n    this.initialize()\n  }\n\n  duration () {\n    return this._duration || this.videoElement.duration || 0\n  }\n\n  seekable () {\n    if (this.hls.media) {\n      if (!this.isLive) {\n        return this.vjs.createTimeRanges(0, this.hls.media.duration)\n      }\n\n      // Video.js doesn't seem to like floating point timeranges\n      const startTime = Math.round(this.hls.media.duration - this.dvrDuration)\n      const endTime = Math.round(this.hls.media.duration - this.edgeMargin)\n\n      return this.vjs.createTimeRanges(startTime, endTime)\n    }\n\n    return this.vjs.createTimeRanges()\n  }\n\n  // See comment for `initialize` method.\n  dispose () {\n    console.log(\"disposedisposedisposedispose\")\n    this.videoElement.removeEventListener('play', this.handlers.play)\n    this.videoElement.removeEventListener('playing', this.handlers.playing)\n\n    this.player.textTracks().removeEventListener('change', this.handlers.textTracksChange)\n    this.uiTextTrackHandled = false\n\n    this.hls.destroy()\n  }\n\n  static addHook (type: string, callback: Function) {\n    Html5Hlsjs.hooks[ type ] = this.hooks[ type ] || []\n    Html5Hlsjs.hooks[ type ].push(callback)\n  }\n\n  static removeHook (type: string, callback: Function) {\n    if (Html5Hlsjs.hooks[ type ] === undefined) return false\n\n    const index = Html5Hlsjs.hooks[ type ].indexOf(callback)\n    if (index === -1) return false\n\n    Html5Hlsjs.hooks[ type ].splice(index, 1)\n\n    return true\n  }\n\n  private _executeHooksFor (type: string) {\n    if (Html5Hlsjs.hooks[ type ] === undefined) {\n      return\n    }\n\n    // ES3 and IE < 9\n    for (let i = 0; i < Html5Hlsjs.hooks[ type ].length; i++) {\n      Html5Hlsjs.hooks[ type ][ i ](this.player, this.hls)\n    }\n  }\n\n  private _handleMediaError (error: any) {\n    if (this.errorCounts[ Hlsjs.ErrorTypes.MEDIA_ERROR ] === 1) {\n      console.info('trying to recover media error')\n      this.hls.recoverMediaError()\n      return\n    }\n\n    if (this.errorCounts[ Hlsjs.ErrorTypes.MEDIA_ERROR ] === 2) {\n      console.info('2nd try to recover media error (by swapping audio codec')\n      this.hls.swapAudioCodec()\n      this.hls.recoverMediaError()\n      return\n    }\n\n    if (this.errorCounts[ Hlsjs.ErrorTypes.MEDIA_ERROR ] > 2) {\n      console.info('bubbling media error up to VIDEOJS')\n      this.hls.destroy()\n      this.tech.error = () => error\n      this.tech.trigger('error')\n      return\n    }\n  }\n\n  private _handleNetworkError (error: any) {\n    if (this.errorCounts[ Hlsjs.ErrorTypes.NETWORK_ERROR] <= 5) {\n      console.info('trying to recover network error')\n\n      // Wait 1 second and retry\n      setTimeout(() => this.hls.startLoad(), 1000)\n\n      // Reset error count on success\n      this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\n        this.errorCounts[ Hlsjs.ErrorTypes.NETWORK_ERROR] = 0\n      })\n\n      return\n    }\n\n    console.info('bubbling network error up to VIDEOJS')\n    this.hls.destroy()\n    this.tech.error = () => error\n    this.tech.trigger('error')\n  }\n\n  private _onError (_event: any, data: Hlsjs.ErrorData) {\n    const error: { message: string, code?: number } = {\n      message: `HLS.js error: ${data.type} - fatal: ${data.fatal} - ${data.details}`\n    }\n    console.error(error.message, data)\n\n    // increment/set error count\n    if (this.errorCounts[ data.type ]) this.errorCounts[ data.type ] += 1\n    else this.errorCounts[ data.type ] = 1\n\n    if (!data.fatal) return\n\n    if (data.type === Hlsjs.ErrorTypes.NETWORK_ERROR) {\n      error.code = 2\n      this._handleNetworkError(error)\n    } else if (data.type === Hlsjs.ErrorTypes.MEDIA_ERROR && data.details !== 'manifestIncompatibleCodecsError') {\n      error.code = 3\n      this._handleMediaError(error)\n    } else {\n      this.hls.destroy()\n      console.info('bubbling error up to VIDEOJS')\n      this.tech.error = () => error as any\n      this.tech.trigger('error')\n    }\n  }\n\n  private switchQuality (qualityId: number) {\n    this.hls.nextLevel = qualityId\n  }\n\n  private _levelLabel (level: Hlsjs.Level) {\n    if (this.player.srOptions_.levelLabelHandler) {\n      return this.player.srOptions_.levelLabelHandler(level)\n    }\n\n    if (level.height) return level.height + 'p'\n    if (level.width) return Math.round(level.width * 9 / 16) + 'p'\n    if (level.bitrate) return (level.bitrate / 1000) + 'kbps'\n\n    return 0\n  }\n\n  private _relayQualityChange (qualityLevels: QualityLevels) {\n    // Determine if it is \"Auto\" (all tracks enabled)\n    let isAuto = true\n\n    for (let i = 0; i < qualityLevels.length; i++) {\n      if (!qualityLevels[ i ]._enabled) {\n        isAuto = false\n        break\n      }\n    }\n\n    // Interact with ME\n    if (isAuto) {\n      this.hls.currentLevel = -1\n      return\n    }\n\n    // Find ID of highest enabled track\n    let selectedTrack: number\n\n    for (selectedTrack = qualityLevels.length - 1; selectedTrack >= 0; selectedTrack--) {\n      if (qualityLevels[ selectedTrack ]._enabled) {\n        break\n      }\n    }\n\n    this.hls.currentLevel = selectedTrack\n  }\n\n  private _handleQualityLevels () {\n    if (!this.metadata) return\n\n    const qualityLevels = this.player.qualityLevels && this.player.qualityLevels()\n    if (!qualityLevels) return\n\n    for (let i = 0; i < this.metadata.levels.length; i++) {\n      const details = this.metadata.levels[ i ]\n      const representation: QualityLevelRepresentation = {\n        id: i,\n        width: details.width,\n        height: details.height,\n        bandwidth: details.bitrate,\n        bitrate: details.bitrate,\n        _enabled: true\n      }\n\n      const self = this\n      representation.enabled = function (this: QualityLevels, level: number, toggle?: boolean) {\n        // Brightcove switcher works TextTracks-style (enable tracks that it wants to ABR on)\n        if (typeof toggle === 'boolean') {\n          this[ level ]._enabled = toggle\n          self._relayQualityChange(this)\n        }\n\n        return this[ level ]._enabled\n      }\n\n      qualityLevels.addQualityLevel(representation)\n    }\n  }\n\n  private _notifyVideoQualities () {\n    if (!this.metadata) return\n    const cleanTracklist = []\n\n    if (this.metadata.levels.length > 1) {\n      const autoLevel = {\n        id: -1,\n        label: 'auto',\n        selected: this.hls.manualLevel === -1\n      }\n      cleanTracklist.push(autoLevel)\n    }\n\n    this.metadata.levels.forEach((level, index) => {\n      // Don't write in level (shared reference with Hls.js)\n      const quality = {\n        id: index,\n        selected: index === this.hls.manualLevel,\n        label: this._levelLabel(level)\n      }\n\n      cleanTracklist.push(quality)\n    })\n\n    const payload = {\n      qualityData: { video: cleanTracklist },\n      qualitySwitchCallback: this.switchQuality.bind(this)\n    }\n\n    this.tech.trigger('loadedqualitydata', payload)\n\n    // Self-de-register so we don't raise the payload multiple times\n    this.videoElement.removeEventListener('playing', this.handlers.playing)\n  }\n\n  private _updateSelectedAudioTrack () {\n    const playerAudioTracks = this.tech.audioTracks()\n    for (let j = 0; j < playerAudioTracks.length; j++) {\n      // FIXME: typings\n      if ((playerAudioTracks[ j ] as any).enabled) {\n        this.hls.audioTrack = j\n        break\n      }\n    }\n  }\n\n  private _onAudioTracks () {\n    const hlsAudioTracks = this.hls.audioTracks\n    const playerAudioTracks = this.tech.audioTracks()\n\n    if (hlsAudioTracks.length > 1 && playerAudioTracks.length === 0) {\n      // Add Hls.js audio tracks if not added yet\n      for (let i = 0; i < hlsAudioTracks.length; i++) {\n        playerAudioTracks.addTrack(new this.vjs.AudioTrack({\n          id: i.toString(),\n          kind: 'alternative',\n          label: hlsAudioTracks[ i ].name || hlsAudioTracks[ i ].lang,\n          language: hlsAudioTracks[ i ].lang,\n          enabled: i === this.hls.audioTrack\n        }))\n      }\n\n      // Handle audio track change event\n      this.handlers.audioTracksChange = this._updateSelectedAudioTrack.bind(this)\n      playerAudioTracks.addEventListener('change', this.handlers.audioTracksChange)\n    }\n  }\n\n  private _getTextTrackLabel (textTrack: TextTrack) {\n    // Label here is readable label and is optional (used in the UI so if it is there it should be different)\n    return textTrack.label ? textTrack.label : textTrack.language\n  }\n\n  private _isSameTextTrack (track1: TextTrack, track2: TextTrack) {\n    return this._getTextTrackLabel(track1) === this._getTextTrackLabel(track2)\n      && track1.kind === track2.kind\n  }\n\n  private _updateSelectedTextTrack () {\n    const playerTextTracks = this.player.textTracks()\n    let activeTrack: TextTrack = null\n\n    for (let j = 0; j < playerTextTracks.length; j++) {\n      if (playerTextTracks[ j ].mode === 'showing') {\n        activeTrack = playerTextTracks[ j ]\n        break\n      }\n    }\n\n    const hlsjsTracks = this.videoElement.textTracks\n    for (let k = 0; k < hlsjsTracks.length; k++) {\n      if (hlsjsTracks[ k ].kind === 'subtitles' || hlsjsTracks[ k ].kind === 'captions') {\n        hlsjsTracks[ k ].mode = activeTrack && this._isSameTextTrack(hlsjsTracks[ k ], activeTrack)\n          ? 'showing'\n          : 'disabled'\n      }\n    }\n  }\n\n  private _startLoad () {\n    this.hls.startLoad(-1)\n    this.videoElement.removeEventListener('play', this.handlers.play)\n  }\n\n  private _oneLevelObjClone (obj: object) {\n    const result = {}\n    const objKeys = Object.keys(obj)\n    for (let i = 0; i < objKeys.length; i++) {\n      result[ objKeys[ i ] ] = obj[ objKeys[ i ] ]\n    }\n\n    return result\n  }\n\n  private _filterDisplayableTextTracks (textTracks: TextTrackList) {\n    const displayableTracks = []\n\n    // Filter out tracks that is displayable (captions or subtitles)\n    for (let idx = 0; idx < textTracks.length; idx++) {\n      if (textTracks[ idx ].kind === 'subtitles' || textTracks[ idx ].kind === 'captions') {\n        displayableTracks.push(textTracks[ idx ])\n      }\n    }\n\n    return displayableTracks\n  }\n\n  private _updateTextTrackList () {\n    const displayableTracks = this._filterDisplayableTextTracks(this.videoElement.textTracks)\n    const playerTextTracks = this.player.textTracks()\n\n    // Add stubs to make the caption switcher shows up\n    // Adding the Hls.js text track in will make us have double captions\n    for (let idx = 0; idx < displayableTracks.length; idx++) {\n      let isAdded = false\n\n      for (let jdx = 0; jdx < playerTextTracks.length; jdx++) {\n        if (this._isSameTextTrack(displayableTracks[ idx ], playerTextTracks[ jdx ])) {\n          isAdded = true\n          break\n        }\n      }\n\n      if (!isAdded) {\n        const hlsjsTextTrack = displayableTracks[ idx ]\n        this.player.addRemoteTextTrack({\n          kind: hlsjsTextTrack.kind as videojs.TextTrack.Kind,\n          label: this._getTextTrackLabel(hlsjsTextTrack),\n          language: hlsjsTextTrack.language,\n          srclang: hlsjsTextTrack.language\n        }, false)\n      }\n    }\n\n    // Handle UI switching\n    this._updateSelectedTextTrack()\n\n    if (!this.uiTextTrackHandled) {\n      this.handlers.textTracksChange = this._updateSelectedTextTrack.bind(this)\n      playerTextTracks.addEventListener('change', this.handlers.textTracksChange)\n\n      this.uiTextTrackHandled = true\n    }\n  }\n\n  private _onMetaData (_event: any, data: Hlsjs.ManifestLoadedData) {\n    // This could arrive before 'loadedqualitydata' handlers is registered, remember it so we can raise it later\n    this.metadata = data as any\n    this._handleQualityLevels()\n  }\n\n  private _createCueHandler (captionConfig: any) {\n    return {\n      newCue: (track: any, startTime: number, endTime: number, captionScreen: { rows: any[] }) => {\n        let row: any\n        let cue: VTTCue\n        let text: string\n        const VTTCue = (window as any).VTTCue || (window as any).TextTrackCue\n\n        for (let r = 0; r < captionScreen.rows.length; r++) {\n          row = captionScreen.rows[ r ]\n          text = ''\n\n          if (!row.isEmpty()) {\n            for (let c = 0; c < row.chars.length; c++) {\n              text += row.chars[ c ].ucharj\n            }\n\n            cue = new VTTCue(startTime, endTime, text.trim())\n\n            // typeof null === 'object'\n            if (captionConfig != null && typeof captionConfig === 'object') {\n              // Copy client overridden property into the cue object\n              const configKeys = Object.keys(captionConfig)\n\n              for (let k = 0; k < configKeys.length; k++) {\n                cue[ configKeys[ k ] ] = captionConfig[ configKeys[ k ] ]\n              }\n            }\n            track.addCue(cue)\n            if (endTime === startTime) track.addCue(new VTTCue(endTime + 5, ''))\n          }\n        }\n      }\n    }\n  }\n\n  private _initHlsjs () {\n    const techOptions = this.tech.options_ as HlsjsConfigHandlerOptions\n    const srOptions_ = this.player.srOptions_\n\n    const hlsjsConfigRef = srOptions_ && srOptions_.hlsjsConfig || techOptions.hlsjsConfig\n    // Hls.js will write to the reference thus change the object for later streams\n    this.hlsjsConfig = hlsjsConfigRef ? this._oneLevelObjClone(hlsjsConfigRef) : {}\n\n    if ([ '', 'auto' ].includes(this.videoElement.preload) && !this.videoElement.autoplay && this.hlsjsConfig.autoStartLoad === undefined) {\n      this.hlsjsConfig.autoStartLoad = false\n    }\n\n    const captionConfig = srOptions_ && srOptions_.captionConfig || techOptions.captionConfig\n    if (captionConfig) {\n      this.hlsjsConfig.cueHandler = this._createCueHandler(captionConfig)\n    }\n\n    // If the user explicitly sets autoStartLoad to false, we're not going to enter the if block above\n    // That's why we have a separate if block here to set the 'play' listener\n    if (this.hlsjsConfig.autoStartLoad === false) {\n      this.handlers.play = this._startLoad.bind(this)\n      this.videoElement.addEventListener('play', this.handlers.play)\n    }\n\n    // _notifyVideoQualities sometimes runs before the quality picker event handler is registered -> no video switcher\n    this.handlers.playing = this._notifyVideoQualities.bind(this)\n    this.videoElement.addEventListener('playing', this.handlers.playing)\n\n    this.hls = new Hlsjs.default(this.hlsjsConfig)\n\n    this._executeHooksFor('beforeinitialize')\n\n    this.hls.on(Hlsjs.Events.ERROR, (event : any, data : any) => this._onError(event, data))\n    this.hls.on(Hlsjs.Events.AUDIO_TRACKS_UPDATED, () => this._onAudioTracks())\n    this.hls.on(Hlsjs.Events.MANIFEST_PARSED, (event : any, data : any) => this._onMetaData(event, data as any)) // FIXME: typings\n    this.hls.on(Hlsjs.Events.LEVEL_LOADED, (event : any, data : any) => {\n      // The DVR plugin will auto seek to \"live edge\" on start up\n      console.log(\"LOEV\")\n      if (this.hlsjsConfig.liveSyncDuration) {\n        this.edgeMargin = this.hlsjsConfig.liveSyncDuration\n      } else if (this.hlsjsConfig.liveSyncDurationCount) {\n        this.edgeMargin = this.hlsjsConfig.liveSyncDurationCount * data.details.targetduration\n      }\n\n      this.isLive = data.details.live\n      this.dvrDuration = data.details.totalduration\n      this._duration = this.isLive ? Infinity : data.details.totalduration\n    })\n    this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\n      console.log(\"LOEsV\")\n      // Emit custom 'loadedmetadata' event for parity with `videojs-contrib-hls`\n      // Ref: https://github.com/videojs/videojs-contrib-hls#loadedmetadata\n      this.tech.trigger('loadedmetadata')\n    })\n\n    this.hls.attachMedia(this.videoElement)\n\n    this.hls.loadSource(this.source.src)\n  }\n\n  private initialize () {\n    this._initHlsjs()\n  }\n}\n\nexport {\n  Html5Hlsjs,\n  registerSourceHandler,\n  registerConfigPlugin\n}\n","import videojs from 'video.js'\nimport { P2PMediaLoaderPluginOptions, PlayerNetworkInfo } from '../peertube-videojs-typings'\nimport { Engine, initHlsJsPlayer, initVideoJsContribHlsJsPlayer } from './core/p2p-media-loader-master/p2p-media-loader-hlsjs/lib'\n\nimport { Events, Segment } from './core/p2p-media-loader-master/p2p-media-loader-core/lib'\nimport { timeToInt } from '../utils'\nimport { registerConfigPlugin, registerSourceHandler } from './hls-plugin'\nimport * as Hlsjs from 'hls.js'\n\nregisterConfigPlugin(videojs)\nregisterSourceHandler(videojs)\n\nconst Plugin = videojs.getPlugin('plugin')\nclass P2pMediaLoaderPlugin extends Plugin {\n\n  private readonly CONSTANTS = {\n    INFO_SCHEDULER: 1000 // Don't change this\n  }\n  private readonly options: P2PMediaLoaderPluginOptions\n\n  private hlsjs: Hlsjs.default\n  private p2pEngine: Engine\n  private statsP2PBytes = {\n    pendingDownload: [] as number[],\n    pendingUpload: [] as number[],\n    numPeers: 0,\n    totalDownload: 0,\n    totalUpload: 0\n  }\n  private statsHTTPBytes = {\n    pendingDownload: [] as number[],\n    pendingUpload: [] as number[],\n    totalDownload: 0,\n    totalUpload: 0\n  }\n  private startTime: number\n\n  private networkInfoInterval: any\n\n  constructor (player: videojs.Player, options?: P2PMediaLoaderPluginOptions) {\n    super(player)\n\n    this.options = options\n\n    // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\n    if (!(videojs as any).Html5Hlsjs) {\n      console.warn('HLS.js does not seem to be supported. Try to fallback to built in HLS.')\n\n      if (!player.canPlayType('application/vnd.apple.mpegurl')) {\n        const message = 'Cannot fallback to built-in HLS'\n        console.warn(message)\n\n        player.ready(() => player.trigger('error', new Error(message)))\n        return\n      }\n    } else {\n      // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\n      (videojs as any).Html5Hlsjs.addHook('beforeinitialize', (videojsPlayer: any, hlsjs: any) => {\n        this.hlsjs = hlsjs\n      })\n\n      initVideoJsContribHlsJsPlayer(player)\n    }\n\n    this.startTime = timeToInt(options.startTime)\n\n    player.src({\n      type: options.type,\n      src: options.src\n    })\n\n    player.ready(() => {\n      this.initializeCore()\n\n      if ((videojs as any).Html5Hlsjs) {\n        this.initializePlugin()\n      }\n    })\n  }\n\n  dispose () {\n    if (this.hlsjs) this.hlsjs.destroy()\n    if (this.p2pEngine) this.p2pEngine.destroy()\n\n    clearInterval(this.networkInfoInterval)\n  }\n\n  getHLSJS () {\n    return this.hlsjs\n  }\n\n  private initializeCore () {\n    this.player.one('play', () => {\n      this.player.addClass('vjs-has-big-play-button-clicked')\n    })\n\n    this.player.one('canplay', () => {\n      if (this.startTime) {\n        this.player.currentTime(this.startTime)\n      }\n    })\n  }\n\n  private initializePlugin () {\n    initHlsJsPlayer(this.hlsjs)\n\n    // FIXME: typings\n    const options = this.player.tech(true).options_ as any\n    this.p2pEngine = options.hlsjsConfig.loader.getEngine()\n\n    this.hlsjs.on(Hlsjs.Events.LEVEL_SWITCHING, (_: any, data: any) => {\n      this.trigger('resolutionChange', { auto: this.hlsjs.autoLevelEnabled, resolutionId: data.height })\n    })\n\n    this.p2pEngine.on(Events.SegmentError, (segment: Segment, err) => {\n      console.error('Segment error.', segment, err)\n\n      this.options.redundancyUrlManager.removeBySegmentUrl(segment.requestUrl)\n    })\n\n    this.statsP2PBytes.numPeers = 1 + this.options.redundancyUrlManager.countBaseUrls()\n\n    this.runStats()\n  }\n\n  private runStats () {\n    this.p2pEngine.on(Events.PieceBytesDownloaded, (method: string, size: number) => {\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\n\n      elem.pendingDownload.push(size)\n      elem.totalDownload += size\n    })\n\n    this.p2pEngine.on(Events.PieceBytesUploaded, (method: string, size: number) => {\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\n\n      elem.pendingUpload.push(size)\n      elem.totalUpload += size\n    })\n\n    this.p2pEngine.on(Events.PeerConnect, () => this.statsP2PBytes.numPeers++)\n    this.p2pEngine.on(Events.PeerClose, () => this.statsP2PBytes.numPeers--)\n\n    this.networkInfoInterval = setInterval(() => {\n      const p2pDownloadSpeed = this.arraySum(this.statsP2PBytes.pendingDownload)\n      const p2pUploadSpeed = this.arraySum(this.statsP2PBytes.pendingUpload)\n\n      const httpDownloadSpeed = this.arraySum(this.statsHTTPBytes.pendingDownload)\n      const httpUploadSpeed = this.arraySum(this.statsHTTPBytes.pendingUpload)\n\n      this.statsP2PBytes.pendingDownload = []\n      this.statsP2PBytes.pendingUpload = []\n      this.statsHTTPBytes.pendingDownload = []\n      this.statsHTTPBytes.pendingUpload = []\n\n      return this.player.trigger('p2pInfo', {\n        source: 'p2p-media-loader',\n        http: {\n          downloadSpeed: httpDownloadSpeed,\n          uploadSpeed: httpUploadSpeed,\n          downloaded: this.statsHTTPBytes.totalDownload,\n          uploaded: this.statsHTTPBytes.totalUpload\n        },\n        p2p: {\n          downloadSpeed: p2pDownloadSpeed,\n          uploadSpeed: p2pUploadSpeed,\n          numPeers: this.statsP2PBytes.numPeers,\n          downloaded: this.statsP2PBytes.totalDownload,\n          uploaded: this.statsP2PBytes.totalUpload\n        }\n      } as PlayerNetworkInfo)\n    }, this.CONSTANTS.INFO_SCHEDULER)\n  }\n\n  private arraySum (data: number[]) {\n    return data.reduce((a: number, b: number) => a + b, 0)\n  }\n}\n\nvideojs.registerPlugin('p2pMediaLoader', P2pMediaLoaderPlugin)\nexport { P2pMediaLoaderPlugin }\n"],"sourceRoot":""}