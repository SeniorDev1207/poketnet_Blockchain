{"version":3,"sources":["webpack:///./src/assets/player/p2p-media-loader/hls-plugin.ts","webpack:///./src/assets/player/p2p-media-loader/p2p-media-loader-plugin.ts"],"names":["vjs","source","tech","errorCounts","hlsjsConfig","_duration","metadata","isLive","dvrDuration","edgeMargin","handlers","play","playing","textTracksChange","audioTracksChange","uiTextTrackHandled","this","name_","videoElement","el","player","options_","playerId","addEventListener","event","errorTxt","mediaError","currentTarget","target","error","console","log","code","MEDIA_ERR_ABORTED","MEDIA_ERR_DECODE","_handleMediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_SRC_NOT_SUPPORTED","message","initialize","duration","hls","media","createTimeRanges","startTime","Math","round","endTime","removeEventListener","textTracks","destroy","type","callback","hooks","push","undefined","index","indexOf","splice","i","length","MEDIA_ERROR","info","recoverMediaError","swapAudioCodec","trigger","NETWORK_ERROR","setTimeout","startLoad","once","FRAG_LOADED","_event","data","fatal","details","_handleNetworkError","qualityId","nextLevel","level","srOptions_","levelLabelHandler","height","width","bitrate","qualityLevels","selectedTrack","isAuto","_enabled","currentLevel","levels","representation","id","bandwidth","self","enabled","toggle","_relayQualityChange","addQualityLevel","cleanTracklist","label","selected","manualLevel","forEach","quality","_levelLabel","payload","qualityData","video","qualitySwitchCallback","switchQuality","bind","playerAudioTracks","audioTracks","j","audioTrack","hlsAudioTracks","addTrack","AudioTrack","toString","kind","name","lang","language","_updateSelectedAudioTrack","textTrack","track1","track2","_getTextTrackLabel","playerTextTracks","activeTrack","mode","hlsjsTracks","k","_isSameTextTrack","obj","result","objKeys","Object","keys","displayableTracks","idx","_filterDisplayableTextTracks","isAdded","jdx","hlsjsTextTrack","addRemoteTextTrack","srclang","_updateSelectedTextTrack","_handleQualityLevels","captionConfig","newCue","track","captionScreen","row","cue","text","VTTCue","window","TextTrackCue","r","rows","isEmpty","c","chars","ucharj","trim","configKeys","addCue","techOptions","hlsjsConfigRef","_oneLevelObjClone","includes","preload","autoplay","autoStartLoad","cueHandler","_createCueHandler","_startLoad","_notifyVideoQualities","_executeHooksFor","on","ERROR","_onError","AUDIO_TRACKS_UPDATED","_onAudioTracks","MANIFEST_PARSED","_onMetaData","LEVEL_LOADED","liveSyncDuration","liveSyncDurationCount","targetduration","live","totalduration","Infinity","attachMedia","loadSource","src","_initHlsjs","registerPlugin","plugin","options","warn","html5","getTech","registerSourceHandler","canHandleSource","test","handleSource","hlsProvider","dispose","Html5Hlsjs","Plugin","getPlugin","super","CONSTANTS","INFO_SCHEDULER","statsP2PBytes","pendingDownload","pendingUpload","numPeers","totalDownload","totalUpload","statsHTTPBytes","addHook","videojsPlayer","hlsjs","canPlayType","ready","Error","initializeCore","initializePlugin","p2pEngine","clearInterval","networkInfoInterval","one","addClass","currentTime","loader","getEngine","LEVEL_SWITCHING","_","auto","autoLevelEnabled","resolutionId","SegmentError","segment","err","redundancyUrlManager","removeBySegmentUrl","requestUrl","countBaseUrls","runStats","PieceBytesDownloaded","method","size","elem","PieceBytesUploaded","PeerConnect","PeerClose","setInterval","p2pDownloadSpeed","arraySum","p2pUploadSpeed","httpDownloadSpeed","httpUploadSpeed","http","downloadSpeed","uploadSpeed","downloaded","uploaded","p2p","reduce","a","b"],"mappings":"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","file":"8.chunk.js","sourcesContent":["// Thanks https://github.com/streamroot/videojs-hlsjs-plugin\n// We duplicated this plugin to choose the hls.js version we want, because streamroot only provide a bundled file\n\nimport * as Hlsjs from 'hls.js/dist/hls.light.js'\nimport videojs from 'video.js'\nimport { HlsjsConfigHandlerOptions, QualityLevelRepresentation, QualityLevels, VideoJSTechHLS } from '../peertube-videojs-typings'\n\ntype ErrorCounts = {\n  [ type: string ]: number\n}\n\ntype Metadata = {\n  levels: Hlsjs.Level[]\n}\n\ntype CustomAudioTrack = Hlsjs.HlsAudioTrack & { name?: string, lang?: string }\n\nconst registerSourceHandler = function (vjs: typeof videojs) {\n  if (!Hlsjs.isSupported()) {\n    console.warn('Hls.js is not supported in this browser!')\n    return\n  }\n\n  const html5 = vjs.getTech('Html5')\n\n  if (!html5) {\n    console.error('Not supported version if video.js')\n    return\n  }\n\n  // FIXME: typings\n  (html5 as any).registerSourceHandler({\n    canHandleSource: function (source: videojs.Tech.SourceObject) {\n      const hlsTypeRE = /^application\\/x-mpegURL|application\\/vnd\\.apple\\.mpegurl$/i\n      const hlsExtRE = /\\.m3u8/i\n\n      if (hlsTypeRE.test(source.type)) return 'probably'\n      if (hlsExtRE.test(source.src)) return 'maybe'\n\n      return ''\n    },\n\n    handleSource: function (source: videojs.Tech.SourceObject, tech: VideoJSTechHLS) {\n      if (tech.hlsProvider) {\n        tech.hlsProvider.dispose()\n      }\n\n      tech.hlsProvider = new Html5Hlsjs(vjs, source, tech)\n\n      return tech.hlsProvider\n    }\n  }, 0);\n\n  // FIXME: typings\n  (vjs as any).Html5Hlsjs = Html5Hlsjs\n}\n\nfunction hlsjsConfigHandler (this: videojs.Player, options: HlsjsConfigHandlerOptions) {\n  const player = this\n\n  if (!options) return\n\n  if (!player.srOptions_) {\n    player.srOptions_ = {}\n  }\n\n  if (!player.srOptions_.hlsjsConfig) {\n    player.srOptions_.hlsjsConfig = options.hlsjsConfig\n  }\n\n  if (!player.srOptions_.captionConfig) {\n    player.srOptions_.captionConfig = options.captionConfig\n  }\n\n  if (options.levelLabelHandler && !player.srOptions_.levelLabelHandler) {\n    player.srOptions_.levelLabelHandler = options.levelLabelHandler\n  }\n}\n\nconst registerConfigPlugin = function (vjs: typeof videojs) {\n  // Used in Brightcove since we don't pass options directly there\n  const registerVjsPlugin = vjs.registerPlugin || vjs.plugin\n  registerVjsPlugin('hlsjs', hlsjsConfigHandler)\n}\n\nclass Html5Hlsjs {\n  private static readonly hooks: { [id: string]: Function[] } = {}\n\n  private readonly videoElement: HTMLVideoElement\n  private readonly errorCounts: ErrorCounts = {}\n  private readonly player: videojs.Player\n  private readonly tech: videojs.Tech\n  private readonly source: videojs.Tech.SourceObject\n  private readonly vjs: typeof videojs\n\n  private hls: Hlsjs & { manualLevel?: number, audioTrack?: any, audioTracks?: CustomAudioTrack[] } // FIXME: typings\n  private hlsjsConfig: Partial<Hlsjs.Config & { cueHandler: any }> = null\n\n  private _duration: number = null\n  private metadata: Metadata = null\n  private isLive: boolean = null\n  private dvrDuration: number = null\n  private edgeMargin: number = null\n\n  private handlers: { [ id in 'play' | 'playing' | 'textTracksChange' | 'audioTracksChange' ]: EventListener } = {\n    play: null,\n    playing: null,\n    textTracksChange: null,\n    audioTracksChange: null\n  }\n\n  private uiTextTrackHandled = false\n\n  constructor (vjs: typeof videojs, source: videojs.Tech.SourceObject, tech: videojs.Tech) {\n    this.vjs = vjs\n    this.source = source\n\n    this.tech = tech;\n    (this.tech as any).name_ = 'Hlsjs'\n\n    this.videoElement = tech.el() as HTMLVideoElement\n    this.player = vjs((tech.options_ as any).playerId)\n\n    this.videoElement.addEventListener('error', event => {\n      let errorTxt: string\n      const mediaError = ((event.currentTarget || event.target) as HTMLVideoElement).error\n\n      if (!mediaError) return\n\n      console.log(mediaError)\n      switch (mediaError.code) {\n        case mediaError.MEDIA_ERR_ABORTED:\n          errorTxt = 'You aborted the video playback'\n          break\n        case mediaError.MEDIA_ERR_DECODE:\n          errorTxt = 'The video playback was aborted due to a corruption problem or because the video used features your browser did not support'\n          this._handleMediaError(mediaError)\n          break\n        case mediaError.MEDIA_ERR_NETWORK:\n          errorTxt = 'A network error caused the video download to fail part-way'\n          break\n        case mediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n          errorTxt = 'The video could not be loaded, either because the server or network failed or because the format is not supported'\n          break\n\n        default:\n          errorTxt = mediaError.message\n      }\n\n      console.error('MEDIA_ERROR: ', errorTxt)\n    })\n\n    this.initialize()\n  }\n\n  duration () {\n    return this._duration || this.videoElement.duration || 0\n  }\n\n  seekable () {\n    if (this.hls.media) {\n      if (!this.isLive) {\n        return this.vjs.createTimeRanges(0, this.hls.media.duration)\n      }\n\n      // Video.js doesn't seem to like floating point timeranges\n      const startTime = Math.round(this.hls.media.duration - this.dvrDuration)\n      const endTime = Math.round(this.hls.media.duration - this.edgeMargin)\n\n      return this.vjs.createTimeRanges(startTime, endTime)\n    }\n\n    return this.vjs.createTimeRanges()\n  }\n\n  // See comment for `initialize` method.\n  dispose () {\n    this.videoElement.removeEventListener('play', this.handlers.play)\n    this.videoElement.removeEventListener('playing', this.handlers.playing)\n\n    this.player.textTracks().removeEventListener('change', this.handlers.textTracksChange)\n    this.uiTextTrackHandled = false\n\n    this.hls.destroy()\n  }\n\n  static addHook (type: string, callback: Function) {\n    Html5Hlsjs.hooks[ type ] = this.hooks[ type ] || []\n    Html5Hlsjs.hooks[ type ].push(callback)\n  }\n\n  static removeHook (type: string, callback: Function) {\n    if (Html5Hlsjs.hooks[ type ] === undefined) return false\n\n    const index = Html5Hlsjs.hooks[ type ].indexOf(callback)\n    if (index === -1) return false\n\n    Html5Hlsjs.hooks[ type ].splice(index, 1)\n\n    return true\n  }\n\n  private _executeHooksFor (type: string) {\n    if (Html5Hlsjs.hooks[ type ] === undefined) {\n      return\n    }\n\n    // ES3 and IE < 9\n    for (let i = 0; i < Html5Hlsjs.hooks[ type ].length; i++) {\n      Html5Hlsjs.hooks[ type ][ i ](this.player, this.hls)\n    }\n  }\n\n  private _handleMediaError (error: any) {\n    if (this.errorCounts[ Hlsjs.ErrorTypes.MEDIA_ERROR ] === 1) {\n      console.info('trying to recover media error')\n      this.hls.recoverMediaError()\n      return\n    }\n\n    if (this.errorCounts[ Hlsjs.ErrorTypes.MEDIA_ERROR ] === 2) {\n      console.info('2nd try to recover media error (by swapping audio codec')\n      this.hls.swapAudioCodec()\n      this.hls.recoverMediaError()\n      return\n    }\n\n    if (this.errorCounts[ Hlsjs.ErrorTypes.MEDIA_ERROR ] > 2) {\n      console.info('bubbling media error up to VIDEOJS')\n      this.hls.destroy()\n      this.tech.error = () => error\n      this.tech.trigger('error')\n      return\n    }\n  }\n\n  private _handleNetworkError (error: any) {\n    if (this.errorCounts[ Hlsjs.ErrorTypes.NETWORK_ERROR] <= 5) {\n      console.info('trying to recover network error')\n\n      // Wait 1 second and retry\n      setTimeout(() => this.hls.startLoad(), 1000)\n\n      // Reset error count on success\n      this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\n        this.errorCounts[ Hlsjs.ErrorTypes.NETWORK_ERROR] = 0\n      })\n\n      return\n    }\n\n    console.info('bubbling network error up to VIDEOJS')\n    this.hls.destroy()\n    this.tech.error = () => error\n    this.tech.trigger('error')\n  }\n\n  private _onError (_event: any, data: Hlsjs.errorData) {\n    const error: { message: string, code?: number } = {\n      message: `HLS.js error: ${data.type} - fatal: ${data.fatal} - ${data.details}`\n    }\n    console.error(error.message)\n\n    // increment/set error count\n    if (this.errorCounts[ data.type ]) this.errorCounts[ data.type ] += 1\n    else this.errorCounts[ data.type ] = 1\n\n    if (!data.fatal) return\n\n    if (data.type === Hlsjs.ErrorTypes.NETWORK_ERROR) {\n      error.code = 2\n      this._handleNetworkError(error)\n    } else if (data.type === Hlsjs.ErrorTypes.MEDIA_ERROR && data.details !== 'manifestIncompatibleCodecsError') {\n      error.code = 3\n      this._handleMediaError(error)\n    } else {\n      this.hls.destroy()\n      console.info('bubbling error up to VIDEOJS')\n      this.tech.error = () => error as any\n      this.tech.trigger('error')\n    }\n  }\n\n  private switchQuality (qualityId: number) {\n    this.hls.nextLevel = qualityId\n  }\n\n  private _levelLabel (level: Hlsjs.Level) {\n    if (this.player.srOptions_.levelLabelHandler) {\n      return this.player.srOptions_.levelLabelHandler(level)\n    }\n\n    if (level.height) return level.height + 'p'\n    if (level.width) return Math.round(level.width * 9 / 16) + 'p'\n    if (level.bitrate) return (level.bitrate / 1000) + 'kbps'\n\n    return 0\n  }\n\n  private _relayQualityChange (qualityLevels: QualityLevels) {\n    // Determine if it is \"Auto\" (all tracks enabled)\n    let isAuto = true\n\n    for (let i = 0; i < qualityLevels.length; i++) {\n      if (!qualityLevels[ i ]._enabled) {\n        isAuto = false\n        break\n      }\n    }\n\n    // Interact with ME\n    if (isAuto) {\n      this.hls.currentLevel = -1\n      return\n    }\n\n    // Find ID of highest enabled track\n    let selectedTrack: number\n\n    for (selectedTrack = qualityLevels.length - 1; selectedTrack >= 0; selectedTrack--) {\n      if (qualityLevels[ selectedTrack ]._enabled) {\n        break\n      }\n    }\n\n    this.hls.currentLevel = selectedTrack\n  }\n\n  private _handleQualityLevels () {\n    if (!this.metadata) return\n\n    const qualityLevels = this.player.qualityLevels && this.player.qualityLevels()\n    if (!qualityLevels) return\n\n    for (let i = 0; i < this.metadata.levels.length; i++) {\n      const details = this.metadata.levels[ i ]\n      const representation: QualityLevelRepresentation = {\n        id: i,\n        width: details.width,\n        height: details.height,\n        bandwidth: details.bitrate,\n        bitrate: details.bitrate,\n        _enabled: true\n      }\n\n      const self = this\n      representation.enabled = function (this: QualityLevels, level: number, toggle?: boolean) {\n        // Brightcove switcher works TextTracks-style (enable tracks that it wants to ABR on)\n        if (typeof toggle === 'boolean') {\n          this[ level ]._enabled = toggle\n          self._relayQualityChange(this)\n        }\n\n        return this[ level ]._enabled\n      }\n\n      qualityLevels.addQualityLevel(representation)\n    }\n  }\n\n  private _notifyVideoQualities () {\n    if (!this.metadata) return\n    const cleanTracklist = []\n\n    if (this.metadata.levels.length > 1) {\n      const autoLevel = {\n        id: -1,\n        label: 'auto',\n        selected: this.hls.manualLevel === -1\n      }\n      cleanTracklist.push(autoLevel)\n    }\n\n    this.metadata.levels.forEach((level, index) => {\n      // Don't write in level (shared reference with Hls.js)\n      const quality = {\n        id: index,\n        selected: index === this.hls.manualLevel,\n        label: this._levelLabel(level)\n      }\n\n      cleanTracklist.push(quality)\n    })\n\n    const payload = {\n      qualityData: { video: cleanTracklist },\n      qualitySwitchCallback: this.switchQuality.bind(this)\n    }\n\n    this.tech.trigger('loadedqualitydata', payload)\n\n    // Self-de-register so we don't raise the payload multiple times\n    this.videoElement.removeEventListener('playing', this.handlers.playing)\n  }\n\n  private _updateSelectedAudioTrack () {\n    const playerAudioTracks = this.tech.audioTracks()\n    for (let j = 0; j < playerAudioTracks.length; j++) {\n      // FIXME: typings\n      if ((playerAudioTracks[ j ] as any).enabled) {\n        this.hls.audioTrack = j\n        break\n      }\n    }\n  }\n\n  private _onAudioTracks () {\n    const hlsAudioTracks = this.hls.audioTracks\n    const playerAudioTracks = this.tech.audioTracks()\n\n    if (hlsAudioTracks.length > 1 && playerAudioTracks.length === 0) {\n      // Add Hls.js audio tracks if not added yet\n      for (let i = 0; i < hlsAudioTracks.length; i++) {\n        playerAudioTracks.addTrack(new this.vjs.AudioTrack({\n          id: i.toString(),\n          kind: 'alternative',\n          label: hlsAudioTracks[ i ].name || hlsAudioTracks[ i ].lang,\n          language: hlsAudioTracks[ i ].lang,\n          enabled: i === this.hls.audioTrack\n        }))\n      }\n\n      // Handle audio track change event\n      this.handlers.audioTracksChange = this._updateSelectedAudioTrack.bind(this)\n      playerAudioTracks.addEventListener('change', this.handlers.audioTracksChange)\n    }\n  }\n\n  private _getTextTrackLabel (textTrack: TextTrack) {\n    // Label here is readable label and is optional (used in the UI so if it is there it should be different)\n    return textTrack.label ? textTrack.label : textTrack.language\n  }\n\n  private _isSameTextTrack (track1: TextTrack, track2: TextTrack) {\n    return this._getTextTrackLabel(track1) === this._getTextTrackLabel(track2)\n      && track1.kind === track2.kind\n  }\n\n  private _updateSelectedTextTrack () {\n    const playerTextTracks = this.player.textTracks()\n    let activeTrack: TextTrack = null\n\n    for (let j = 0; j < playerTextTracks.length; j++) {\n      if (playerTextTracks[ j ].mode === 'showing') {\n        activeTrack = playerTextTracks[ j ]\n        break\n      }\n    }\n\n    const hlsjsTracks = this.videoElement.textTracks\n    for (let k = 0; k < hlsjsTracks.length; k++) {\n      if (hlsjsTracks[ k ].kind === 'subtitles' || hlsjsTracks[ k ].kind === 'captions') {\n        hlsjsTracks[ k ].mode = activeTrack && this._isSameTextTrack(hlsjsTracks[ k ], activeTrack)\n          ? 'showing'\n          : 'disabled'\n      }\n    }\n  }\n\n  private _startLoad () {\n    this.hls.startLoad(-1)\n    this.videoElement.removeEventListener('play', this.handlers.play)\n  }\n\n  private _oneLevelObjClone (obj: object) {\n    const result = {}\n    const objKeys = Object.keys(obj)\n    for (let i = 0; i < objKeys.length; i++) {\n      result[ objKeys[ i ] ] = obj[ objKeys[ i ] ]\n    }\n\n    return result\n  }\n\n  private _filterDisplayableTextTracks (textTracks: TextTrackList) {\n    const displayableTracks = []\n\n    // Filter out tracks that is displayable (captions or subtitles)\n    for (let idx = 0; idx < textTracks.length; idx++) {\n      if (textTracks[ idx ].kind === 'subtitles' || textTracks[ idx ].kind === 'captions') {\n        displayableTracks.push(textTracks[ idx ])\n      }\n    }\n\n    return displayableTracks\n  }\n\n  private _updateTextTrackList () {\n    const displayableTracks = this._filterDisplayableTextTracks(this.videoElement.textTracks)\n    const playerTextTracks = this.player.textTracks()\n\n    // Add stubs to make the caption switcher shows up\n    // Adding the Hls.js text track in will make us have double captions\n    for (let idx = 0; idx < displayableTracks.length; idx++) {\n      let isAdded = false\n\n      for (let jdx = 0; jdx < playerTextTracks.length; jdx++) {\n        if (this._isSameTextTrack(displayableTracks[ idx ], playerTextTracks[ jdx ])) {\n          isAdded = true\n          break\n        }\n      }\n\n      if (!isAdded) {\n        const hlsjsTextTrack = displayableTracks[ idx ]\n        this.player.addRemoteTextTrack({\n          kind: hlsjsTextTrack.kind as videojs.TextTrack.Kind,\n          label: this._getTextTrackLabel(hlsjsTextTrack),\n          language: hlsjsTextTrack.language,\n          srclang: hlsjsTextTrack.language\n        }, false)\n      }\n    }\n\n    // Handle UI switching\n    this._updateSelectedTextTrack()\n\n    if (!this.uiTextTrackHandled) {\n      this.handlers.textTracksChange = this._updateSelectedTextTrack.bind(this)\n      playerTextTracks.addEventListener('change', this.handlers.textTracksChange)\n\n      this.uiTextTrackHandled = true\n    }\n  }\n\n  private _onMetaData (_event: any, data: Hlsjs.manifestLoadedData) {\n    // This could arrive before 'loadedqualitydata' handlers is registered, remember it so we can raise it later\n    this.metadata = data as any\n    this._handleQualityLevels()\n  }\n\n  private _createCueHandler (captionConfig: any) {\n    return {\n      newCue: (track: any, startTime: number, endTime: number, captionScreen: { rows: any[] }) => {\n        let row: any\n        let cue: VTTCue\n        let text: string\n        const VTTCue = (window as any).VTTCue || (window as any).TextTrackCue\n\n        for (let r = 0; r < captionScreen.rows.length; r++) {\n          row = captionScreen.rows[ r ]\n          text = ''\n\n          if (!row.isEmpty()) {\n            for (let c = 0; c < row.chars.length; c++) {\n              text += row.chars[ c ].ucharj\n            }\n\n            cue = new VTTCue(startTime, endTime, text.trim())\n\n            // typeof null === 'object'\n            if (captionConfig != null && typeof captionConfig === 'object') {\n              // Copy client overridden property into the cue object\n              const configKeys = Object.keys(captionConfig)\n\n              for (let k = 0; k < configKeys.length; k++) {\n                cue[ configKeys[ k ] ] = captionConfig[ configKeys[ k ] ]\n              }\n            }\n            track.addCue(cue)\n            if (endTime === startTime) track.addCue(new VTTCue(endTime + 5, ''))\n          }\n        }\n      }\n    }\n  }\n\n  private _initHlsjs () {\n    const techOptions = this.tech.options_ as HlsjsConfigHandlerOptions\n    const srOptions_ = this.player.srOptions_\n\n    const hlsjsConfigRef = srOptions_ && srOptions_.hlsjsConfig || techOptions.hlsjsConfig\n    // Hls.js will write to the reference thus change the object for later streams\n    this.hlsjsConfig = hlsjsConfigRef ? this._oneLevelObjClone(hlsjsConfigRef) : {}\n\n    if ([ '', 'auto' ].includes(this.videoElement.preload) && !this.videoElement.autoplay && this.hlsjsConfig.autoStartLoad === undefined) {\n      this.hlsjsConfig.autoStartLoad = false\n    }\n\n    const captionConfig = srOptions_ && srOptions_.captionConfig || techOptions.captionConfig\n    if (captionConfig) {\n      this.hlsjsConfig.cueHandler = this._createCueHandler(captionConfig)\n    }\n\n    // If the user explicitly sets autoStartLoad to false, we're not going to enter the if block above\n    // That's why we have a separate if block here to set the 'play' listener\n    if (this.hlsjsConfig.autoStartLoad === false) {\n      this.handlers.play = this._startLoad.bind(this)\n      this.videoElement.addEventListener('play', this.handlers.play)\n    }\n\n    // _notifyVideoQualities sometimes runs before the quality picker event handler is registered -> no video switcher\n    this.handlers.playing = this._notifyVideoQualities.bind(this)\n    this.videoElement.addEventListener('playing', this.handlers.playing)\n\n    this.hls = new Hlsjs(this.hlsjsConfig)\n\n    this._executeHooksFor('beforeinitialize')\n\n    this.hls.on(Hlsjs.Events.ERROR, (event, data) => this._onError(event, data))\n    this.hls.on(Hlsjs.Events.AUDIO_TRACKS_UPDATED, () => this._onAudioTracks())\n    this.hls.on(Hlsjs.Events.MANIFEST_PARSED, (event, data) => this._onMetaData(event, data as any)) // FIXME: typings\n    this.hls.on(Hlsjs.Events.LEVEL_LOADED, (event, data) => {\n      // The DVR plugin will auto seek to \"live edge\" on start up\n      if (this.hlsjsConfig.liveSyncDuration) {\n        this.edgeMargin = this.hlsjsConfig.liveSyncDuration\n      } else if (this.hlsjsConfig.liveSyncDurationCount) {\n        this.edgeMargin = this.hlsjsConfig.liveSyncDurationCount * data.details.targetduration\n      }\n\n      this.isLive = data.details.live\n      this.dvrDuration = data.details.totalduration\n      this._duration = this.isLive ? Infinity : data.details.totalduration\n    })\n    this.hls.once(Hlsjs.Events.FRAG_LOADED, () => {\n      // Emit custom 'loadedmetadata' event for parity with `videojs-contrib-hls`\n      // Ref: https://github.com/videojs/videojs-contrib-hls#loadedmetadata\n      this.tech.trigger('loadedmetadata')\n    })\n\n    this.hls.attachMedia(this.videoElement)\n\n    this.hls.loadSource(this.source.src)\n  }\n\n  private initialize () {\n    this._initHlsjs()\n  }\n}\n\nexport {\n  Html5Hlsjs,\n  registerSourceHandler,\n  registerConfigPlugin\n}\n","import videojs from 'video.js'\nimport { P2PMediaLoaderPluginOptions, PlayerNetworkInfo } from '../peertube-videojs-typings'\nimport { Engine, initHlsJsPlayer, initVideoJsContribHlsJsPlayer } from 'p2p-media-loader-hlsjs'\nimport { Events, Segment } from 'p2p-media-loader-core'\nimport { timeToInt } from '../utils'\nimport { registerConfigPlugin, registerSourceHandler } from './hls-plugin'\nimport * as Hlsjs from 'hls.js/dist/hls.light.js'\n\nregisterConfigPlugin(videojs)\nregisterSourceHandler(videojs)\n\nconst Plugin = videojs.getPlugin('plugin')\nclass P2pMediaLoaderPlugin extends Plugin {\n\n  private readonly CONSTANTS = {\n    INFO_SCHEDULER: 1000 // Don't change this\n  }\n  private readonly options: P2PMediaLoaderPluginOptions\n\n  private hlsjs: Hlsjs\n  private p2pEngine: Engine\n  private statsP2PBytes = {\n    pendingDownload: [] as number[],\n    pendingUpload: [] as number[],\n    numPeers: 0,\n    totalDownload: 0,\n    totalUpload: 0\n  }\n  private statsHTTPBytes = {\n    pendingDownload: [] as number[],\n    pendingUpload: [] as number[],\n    totalDownload: 0,\n    totalUpload: 0\n  }\n  private startTime: number\n\n  private networkInfoInterval: any\n\n  constructor (player: videojs.Player, options?: P2PMediaLoaderPluginOptions) {\n    super(player)\n\n    this.options = options\n\n    // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\n    if (!(videojs as any).Html5Hlsjs) {\n      console.warn('HLS.js does not seem to be supported. Try to fallback to built in HLS.')\n\n      if (!player.canPlayType('application/vnd.apple.mpegurl')) {\n        const message = 'Cannot fallback to built-in HLS'\n        console.warn(message)\n\n        player.ready(() => player.trigger('error', new Error(message)))\n        return\n      }\n    } else {\n      // FIXME: typings https://github.com/Microsoft/TypeScript/issues/14080\n      (videojs as any).Html5Hlsjs.addHook('beforeinitialize', (videojsPlayer: any, hlsjs: any) => {\n        this.hlsjs = hlsjs\n      })\n\n      initVideoJsContribHlsJsPlayer(player)\n    }\n\n    this.startTime = timeToInt(options.startTime)\n\n    player.src({\n      type: options.type,\n      src: options.src\n    })\n\n    player.ready(() => {\n      this.initializeCore()\n\n      if ((videojs as any).Html5Hlsjs) {\n        this.initializePlugin()\n      }\n    })\n  }\n\n  dispose () {\n    if (this.hlsjs) this.hlsjs.destroy()\n    if (this.p2pEngine) this.p2pEngine.destroy()\n\n    clearInterval(this.networkInfoInterval)\n  }\n\n  getHLSJS () {\n    return this.hlsjs\n  }\n\n  private initializeCore () {\n    this.player.one('play', () => {\n      this.player.addClass('vjs-has-big-play-button-clicked')\n    })\n\n    this.player.one('canplay', () => {\n      if (this.startTime) {\n        this.player.currentTime(this.startTime)\n      }\n    })\n  }\n\n  private initializePlugin () {\n    initHlsJsPlayer(this.hlsjs)\n\n    // FIXME: typings\n    const options = this.player.tech(true).options_ as any\n    this.p2pEngine = options.hlsjsConfig.loader.getEngine()\n\n    this.hlsjs.on(Hlsjs.Events.LEVEL_SWITCHING, (_: any, data: any) => {\n      this.trigger('resolutionChange', { auto: this.hlsjs.autoLevelEnabled, resolutionId: data.height })\n    })\n\n    this.p2pEngine.on(Events.SegmentError, (segment: Segment, err) => {\n      console.error('Segment error.', segment, err)\n\n      this.options.redundancyUrlManager.removeBySegmentUrl(segment.requestUrl)\n    })\n\n    this.statsP2PBytes.numPeers = 1 + this.options.redundancyUrlManager.countBaseUrls()\n\n    this.runStats()\n  }\n\n  private runStats () {\n    this.p2pEngine.on(Events.PieceBytesDownloaded, (method: string, size: number) => {\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\n\n      elem.pendingDownload.push(size)\n      elem.totalDownload += size\n    })\n\n    this.p2pEngine.on(Events.PieceBytesUploaded, (method: string, size: number) => {\n      const elem = method === 'p2p' ? this.statsP2PBytes : this.statsHTTPBytes\n\n      elem.pendingUpload.push(size)\n      elem.totalUpload += size\n    })\n\n    this.p2pEngine.on(Events.PeerConnect, () => this.statsP2PBytes.numPeers++)\n    this.p2pEngine.on(Events.PeerClose, () => this.statsP2PBytes.numPeers--)\n\n    this.networkInfoInterval = setInterval(() => {\n      const p2pDownloadSpeed = this.arraySum(this.statsP2PBytes.pendingDownload)\n      const p2pUploadSpeed = this.arraySum(this.statsP2PBytes.pendingUpload)\n\n      const httpDownloadSpeed = this.arraySum(this.statsHTTPBytes.pendingDownload)\n      const httpUploadSpeed = this.arraySum(this.statsHTTPBytes.pendingUpload)\n\n      this.statsP2PBytes.pendingDownload = []\n      this.statsP2PBytes.pendingUpload = []\n      this.statsHTTPBytes.pendingDownload = []\n      this.statsHTTPBytes.pendingUpload = []\n\n      return this.player.trigger('p2pInfo', {\n        source: 'p2p-media-loader',\n        http: {\n          downloadSpeed: httpDownloadSpeed,\n          uploadSpeed: httpUploadSpeed,\n          downloaded: this.statsHTTPBytes.totalDownload,\n          uploaded: this.statsHTTPBytes.totalUpload\n        },\n        p2p: {\n          downloadSpeed: p2pDownloadSpeed,\n          uploadSpeed: p2pUploadSpeed,\n          numPeers: this.statsP2PBytes.numPeers,\n          downloaded: this.statsP2PBytes.totalDownload,\n          uploaded: this.statsP2PBytes.totalUpload\n        }\n      } as PlayerNetworkInfo)\n    }, this.CONSTANTS.INFO_SCHEDULER)\n  }\n\n  private arraySum (data: number[]) {\n    return data.reduce((a: number, b: number) => a + b, 0)\n  }\n}\n\nvideojs.registerPlugin('p2pMediaLoader', P2pMediaLoaderPlugin)\nexport { P2pMediaLoaderPlugin }\n"],"sourceRoot":""}